
;; This file specifies the syntax of Toccata
;; It also contains the code to turn a Toccata program from a string
;; to an AST

;; Components to build the grammar out of
(add-ns grmr (module "grammar.toc"))

;; The different types of nodes in the AST
(add-ns ast (module "ast.toc"))

(defn min [x y]
  (extract (or (< x y)
               (maybe y))))

;; sometimes, we have to see what's wrong
(defn debug [tag]
  (grmr/ignore
   (grmr/optional (grmr/term-fn (fn [text]
                                  (print-err tag (count text)
                                             (str "\"" (subs text 0 (min 40 (count text))) "\""))
                                  0)))))

(defn error [msg]
  (grmr/apply-to (fn [file line]
                   (print-err msg "at" file line)
                   (abort))
                 (grmr/get-value 'file-name)
                 (grmr/get-value 'line-number)))


;; we tag symbols with file/line for use later
(defprotocol Tagged
  (namespace [s])
  (tag [s file line] s)
  (untag [x] x))

(deftype tagged-symbol [ns base sym file-name line-num]
  ast/FileLineInfo
  (ast/file-name [s] file-name)
  (ast/line-number [s] line-num)

  Tagged
  (namespace [s] ns)
  (tag [s file line]
    (tagged-symbol ns base sym file line))
  (untag [_] base)

  Stringable
  (string-list [_]
    (list (extract (or (map ns (fn [ns-str] (str ns-str "/" base)))
                       (maybe (str base))))))

  Hash
  (sha1 [_] (sha1 base))

  Eq
  (=* [_ x] (=* x base)))

(extend-type Symbol
  Tagged
  (namespace [s] nothing)
  (tag [s file line]
    (tagged-symbol nothing s s file line))
  (untag [s] s)

  Eq
  (=* [s x]
    (symkey= s (untag x))))

;; It's useful to be able to tag lists of symbols
(extend-type List
  Tagged
  (tag [l file line]
    (map l (fn [x]
             (tag x file line)))))


(def symbol-start
  (grmr/rule "symbol-start"
               (grmr/any grmr/alpha (grmr/one-of "._<>=+-*/"))))

(def symbol-punct
  (grmr/rule "symbol-punct"
               (grmr/one-of "._<>=+-*/!?")))

(def symbol-char
  (grmr/rule "symbol-char"
               (grmr/any grmr/alpha grmr/digit symbol-punct)))

(def rest-of-symbol
  (grmr/rule "rest-of-symbol"
               (grmr/none-or-more symbol-char)))

(def namespace-punct
  (grmr/rule "namespace-punct"
               (grmr/one-of "._<>=*+!-?")))

(def rest-of-namespace
  (grmr/rule "rest-of-namespace"
               (grmr/none-or-more (grmr/any grmr/alpha
                                                grmr/digit
                                                namespace-punct))))

(def read-namespace
  (grmr/rule "namespace"
               (grmr/apply-to (fn [start the-rest]
                                (symbol (to-str (cons start the-rest))))
                             grmr/alpha
                             rest-of-namespace
                             (grmr/ignore "/"))))

(def read-symbol
  (grmr/rule "tagged-symbol"
               (grmr/apply-to (fn [file-name line-number ns start the-rest]
                                (let [ns-prefix ((= "" ns) ns (str ns "/"))]
                                  (tagged-symbol ns (symbol (to-str (cons start the-rest)))
                                                 (symbol (to-str (comp (list ns-prefix start)
                                                                       the-rest)))
                                                 file-name line-number)))
                                (grmr/get-value 'file-name)
                                (grmr/get-value 'line-number)
                                (grmr/optional read-namespace)
                                symbol-start
                                rest-of-symbol)))

(def read-string-newline
  (grmr/rule "newline"
               (map (grmr/all "\\" "n")
                    (constantly "\n"))))

(def read-string-tab
  (grmr/rule "tab"
               (map (grmr/all "\\" "t")
                    (constantly "\t"))))

(def read-string-backspace
  (grmr/rule "backspace"
               (map (grmr/all "\\" "b")
                    (constantly "\b"))))

(def read-string-return
  (grmr/rule "return"
               (map (grmr/all "\\" "r")
                    (constantly "\r"))))

(def read-string-formfeed
  (grmr/rule "formfeed"
               (map (grmr/all "\\" "f")
                    (constantly "\f"))))

(def read-string-doublequote
  (grmr/rule "doublequote"
               (map (grmr/all "\\" "\"")
                    (constantly "\""))))

(def read-string-backslash
  (grmr/rule "backslash"
               (map (grmr/all "\\" "\\")
                    (constantly "\\"))))

(def not-eol
  (grmr/rule "not-eol"
             (grmr/not-char "\n")))

(defn string-frag-len [s]
  (inline-C Number "
    char *str = NULL;
    int64_t strLen;
    if (arg0->type == StringType) {
      str = ((String *)arg0)->buffer;
      strLen = ((String *)arg0)->len;
    } else if (arg0->type == SubStringType) {
      str = ((SubString *)arg0)->buffer;
      strLen = ((SubString *)arg0)->len;
    }
    int64_t len;
    for (len = 0; len < strLen && str[len] != 34 && str[len] != 92;)
       len++;
    dec_and_free(arg0, 1);
    return(numberValue(len));
"))

(def read-string-fragment
  (grmr/rule "read-string-fragment"
             ;; TODO: we have to count the newlines in here
             (grmr/term-fn (fn [text]
                             (string-frag-len text)))))

(def read-string
  (grmr/rule "string"
             (grmr/apply-to to-str
                            (grmr/ignore "\"")
                            (grmr/none-or-more
                             (grmr/any read-string-fragment
                                       read-string-backslash
                                       read-string-doublequote
                                       read-string-tab
                                       read-string-backspace
                                       read-string-return
                                       read-string-formfeed
                                       read-string-newline))
                            (grmr/ignore "\""))))

(def read-integer
  (grmr/rule "number"
               (grmr/any (map (grmr/one-or-more grmr/digit)
                                 str-to-int)
                           (grmr/apply-to (fn [digits]
                                           (* -1 (str-to-int digits)))
                                         (grmr/ignore "-")
                                         (grmr/one-or-more grmr/digit)))))

(def read-sub-expr
  (grmr/recurse "expr"))

(def linear-whitespace
  (grmr/rule "linear-whitespace"
             (grmr/any "," " " "\t")))

(def ignore-linear-whitespace (grmr/ignore (grmr/none-or-more linear-whitespace)))

(def newline
  (grmr/rule "newline"
             (grmr/apply-to identity
                            "\n" (grmr/ignore (grmr/update-value 'line-number inc)))))

(def ignore-newlines (grmr/ignore (grmr/none-or-more newline)))

(def whitespace
  (grmr/rule "whitespace"
             (grmr/any linear-whitespace
                       "\r"
                       newline)))

(def ignore-whitespace (grmr/ignore (grmr/none-or-more whitespace)))

(def read-arg
  (grmr/rule "arg"
             (grmr/apply-to comp
                            ignore-whitespace
                            read-symbol
                            ignore-whitespace)))

(def read-var-arg
  (grmr/rule "var-arg"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "&")
                            read-arg)))

(def read-params
  (grmr/recursive-rule "params"
                       (grmr/any (grmr/apply-to identity
                                                ignore-whitespace
                                                (grmr/ignore "[")
                                                (grmr/apply-to ast/params
                                                               (grmr/none-or-more
                                                                (grmr/recurse "params"))
                                                               (grmr/optional read-var-arg))
                                                (grmr/any (grmr/ignore "]")
                                                          (error "Missing ']'")))
                                 read-arg)))

(def read-open-paren
  (grmr/rule "open-paren"
             (grmr/ignore (grmr/all ignore-whitespace "(" ignore-whitespace))))

(def read-close-paren
  (grmr/rule "close-paren"
             (grmr/ignore (grmr/all ignore-whitespace ")"))))

(def read-inline
  (grmr/rule "read-inline"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "inline")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/apply-to (fn [file-name line-number lang return-type body]
                                             (ast/inline lang return-type body "" 0))
                                           (grmr/get-value 'file-name)
                                           (grmr/get-value 'line-number)
                                           read-symbol
                                           (grmr/ignore (grmr/one-or-more whitespace))
                                           (grmr/optional (grmr/apply-to identity
                                                                         read-symbol
                                                                         (grmr/ignore
                                                                          (grmr/one-or-more whitespace))))
                                           read-string
                                           read-close-paren))))

(def read-block-comment
  (grmr/rule "block-comment"
             (grmr/apply-to ast/block-comment
                            ignore-whitespace
                            (grmr/get-value 'file-name)
                            (grmr/get-value 'line-number)
                            (grmr/one-or-more
                             (grmr/apply-to identity
                                            ignore-linear-whitespace
                                            (grmr/ignore (grmr/one-or-more ";"))
                                            (grmr/apply-to to-str
                                                           (grmr/none-or-more not-eol))
                                            (grmr/ignore newline))))))

(def read-call
  (grmr/rule "call"
             (grmr/apply-to ast/call-expr
                            read-open-paren
                            (grmr/one-or-more read-sub-expr)
                            read-close-paren)))

(def read-sub-dest
  (grmr/recurse "destructure"))

(def read-list-destructure
  (grmr/rule "list-destructure"
             (grmr/apply-to ast/params
                            ignore-whitespace
                            (grmr/ignore "[")
                            (grmr/none-or-more read-sub-dest)
                            (grmr/any (grmr/apply-to maybe read-var-arg)
                                      (grmr/always nothing))
                            (grmr/ignore "]"))))

(def read-destructure
  (grmr/recursive-rule "destructure"
                       (grmr/any read-list-destructure
                                 read-arg)))
(def read-let-binding
  (grmr/rule "let-binding"
             (grmr/apply-to ast/binding
                            ignore-whitespace
                            read-destructure
                            read-sub-expr)))

(def read-let
  (grmr/rule "let"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "let")
                            ignore-whitespace
                            (grmr/ignore "[")
                            (grmr/any (grmr/apply-to ast/let-expr
                                                     (grmr/one-or-more read-let-binding)
                                                     (grmr/ignore "]")
                                                     (grmr/one-or-more read-sub-expr)
                                                     read-close-paren)
                                      (error "Invalid 'let' expression")))))

(def read-do
  (grmr/rule "do"
             (grmr/apply-to (partial ast/let-expr empty-list)
                            read-open-paren
                            (grmr/ignore "do")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/one-or-more read-sub-expr)
                            read-close-paren)))

(def read-or
  (grmr/rule "or"
             (grmr/apply-to ast/or-expr
                            read-open-paren
                            (grmr/ignore "or")
                            (grmr/one-or-more read-sub-expr)
                            read-close-paren)))

(def read-and
  (grmr/rule "and"
             (grmr/apply-to ast/and-expr
                            read-open-paren
                            (grmr/ignore "and")
                            (grmr/one-or-more read-sub-expr)
                            read-close-paren)))

(def read-assert
  (grmr/rule "assert"
             (grmr/apply-to ast/assert-expr
                            read-open-paren
                            (grmr/ignore "assert")
                            read-sub-expr
                            read-close-paren)))

(def read-returns
  (grmr/rule "returns"
             (grmr/apply-to ast/returns-expr
                            read-open-paren
                            (grmr/ignore "returns")
                            ignore-whitespace
                            read-symbol
                            (grmr/ignore (grmr/one-or-more whitespace))
                            read-sub-expr
                            read-close-paren)))

(def read-apply
  (grmr/rule "apply"
             (grmr/apply-to identity
                            (grmr/ignore "(")
                            (grmr/ignore (grmr/none-or-more whitespace))
                            (grmr/ignore "apply")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to
                                       (fn [f args]
                                         (let [file-name (ast/file-name f)
                                               line-number (ast/line-number f)
                                               apply* (tag 'apply* file-name line-number)
                                               list (tag 'list file-name line-number)]
                                           (ast/call-expr [apply* f
                                                           (ast/call-expr (cons list args))])))
                                       read-sub-expr
                                       (grmr/none-or-more read-sub-expr)
                                       (grmr/ignore (grmr/none-or-more whitespace))
                                       (grmr/ignore ")"))
                                      (error "Invalid 'apply' form")))))

(def read-apply-to
  (grmr/rule "apply-to"
             (grmr/apply-to identity
                            (grmr/ignore "(")
                            (grmr/ignore (grmr/none-or-more whitespace))
                            (grmr/ignore "apply-to")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to
                                       (fn [f arg args]
                                         (let [file-name (ast/file-name f)
                                               line-number (ast/line-number f)
                                               apply* (tag 'apply* file-name line-number)
                                               wrap (tag 'wrap file-name line-number)
                                               list (tag 'list file-name line-number)]
                                           (ast/call-expr [apply*
                                                           (ast/call-expr [wrap arg f])
                                                           (ast/call-expr (list* list arg args))])))
                                       read-sub-expr
                                       read-sub-expr
                                       (grmr/none-or-more read-sub-expr)
                                       (grmr/ignore (grmr/none-or-more whitespace))
                                       (grmr/ignore ")"))
                                      (error "Invalid 'apply-to' form")))))

(def read-inline-body
  (grmr/rule "read-inline-body"
             (grmr/apply-to comp
                            (grmr/none-or-more (grmr/any read-assert
                                                         read-returns
                                                         read-block-comment))
                            ignore-whitespace
                            (grmr/all read-inline)
                            (grmr/none-or-more read-block-comment))))

(def read-fn-doc
  (grmr/rule "fn-doc"
             (grmr/any read-block-comment
                       (grmr/apply-to (fn [fn ln]
                                        (ast/block-comment fn ln (list "")))
                                      (grmr/get-value 'file-name)
                                      (grmr/get-value 'line-number)))))

(def read-single-arity
  (grmr/rule "single-arity"
             (grmr/apply-to (fn [params doc body]
                              (ast/fn-arity params doc body))
                            read-params
                            read-fn-doc
                            (grmr/any read-inline-body
                                      (grmr/one-or-more read-sub-expr)
                                      (error "Body of function is wrong"))
                            ignore-whitespace)))

(def read-arities
  (grmr/rule "arities"
             (grmr/any (grmr/apply-to list read-single-arity)
                       (grmr/apply-to (fn [doc arities]
                                        (map arities (fn [arity]
                                                       (assoc arity .doc doc))))
                                      read-fn-doc
                                      (grmr/one-or-more (apply-to identity
                                                                  read-open-paren
                                                                  read-single-arity
                                                                  read-close-paren))))))

(def read-fn
  (grmr/rule "fn"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "fn")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [name arities]
                                                       (ast/fn-expr name arities))
                                                     (grmr/optional read-symbol)
                                                     ignore-whitespace
                                                     read-arities
                                                     read-close-paren)
                                      (error "Invalid 'fn' expression")))))

(def type-counter (int-generator TypeCount))

(def read-implementation
  (grmr/rule "protocol-implementation"
             (grmr/all read-open-paren
                       read-symbol
                       (grmr/apply-to list read-single-arity)
                       read-close-paren)))


(def read-proto-impls
  (grmr/rule "protocol-implementations"
             (grmr/any (grmr/apply-to hash-map
                                      ignore-whitespace
                                      read-symbol
                                      (grmr/one-or-more read-implementation))
                       read-block-comment)))

(def read-reify
  (grmr/rule "reify"
             (grmr/apply-to (fn [impls]
                              (ast/reified (extract type-counter) impls))
                            read-open-paren
                            (grmr/ignore "reify")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/apply-to comp*
                                           read-proto-impls
                                           (grmr/none-or-more read-proto-impls))
                            read-close-paren)))

(def curr-file-name
  (grmr/rule "_FILE_"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "_FILE_")
                            (grmr/get-value 'file-name))))

(def curr-line
(grmr/rule "_LINE_"
           (grmr/apply-to identity
                          ignore-whitespace
                          (grmr/ignore "_LINE_")
                          (grmr/get-value 'line-number))))

(def read-vector
  (grmr/rule "vector"
             (grmr/apply-to identity
                            (grmr/ignore "[")
                            (grmr/apply-to (fn [fn ln elems]
                                             (ast/call-expr (cons (tag 'vector fn ln) elems)))
                                           (grmr/get-value 'file-name)
                                           (grmr/get-value 'line-number)
                                           (grmr/none-or-more read-sub-expr)
                                           (grmr/any (grmr/ignore "]")
                                                     (error "Missing \"]\""))))))

(def read-hash-map
  (grmr/rule "hash-map"
             (grmr/apply-to identity
                            (grmr/ignore "{")
                            (grmr/apply-to (fn [fn ln elems]
                                             (ast/call-expr (cons (tag 'hash-map fn ln)
                                                                  (comp* empty-list elems))))
                                           (grmr/get-value 'file-name)
                                           (grmr/get-value 'line-number)
                                           (grmr/none-or-more (grmr/all read-sub-expr
                                                                        read-sub-expr))
                                           (grmr/any (grmr/ignore "}")
                                                     (error "Missing \"]\""))))))

(defprotocol QuoteLiteral
  (quote-literal [quoted]
    (ast/quoted quoted)))

(extend-type String
  QuoteLiteral
  (quote-literal [n] n))

(extend-type Number
  QuoteLiteral
  (quote-literal [n] n))

(extend-type List
  QuoteLiteral
  (quote-literal [quoted-list]
    (extract (or (for [head (first quoted-list)
                       :when (= head 'quoted)
                       ast (quote-literal (rest quoted-list))]
                   ast)
                 (for [coll-builder (first quoted-list)
                       :when (or (= coll-builder 'hash-map)
                                 (= coll-builder 'vector))
                       :let [frms (rest quoted-list)]
                       contents (or (empty? frms)
                                    (maybe (map frms quote-literal)))]
                   (ast/call-ast (tag 'vector (ast/file-name quoted-list) (ast/line-number quoted-list))
                                 contents))
                 (maybe
                  (ast/call-ast (tag 'list (ast/file-name quoted-list) (ast/line-number quoted-list))
                                (map quoted-list quote-literal)))))))

(def read-quoted-value
  (grmr/recursive-rule "quoted-value"
                       (grmr/apply-to identity
                                      ignore-whitespace
                                      (grmr/any (grmr/apply-to identity
                                                               read-open-paren
                                                               (grmr/none-or-more (grmr/recurse "quoted-value"))
                                                               read-close-paren)
                                                (grmr/apply-to (partial cons 'vector)
                                                               (grmr/ignore "[")
                                                               (grmr/one-or-more (grmr/recurse "quoted-value"))
                                                               (grmr/ignore "]"))
                                                read-integer
                                                read-string
                                                read-symbol)
                                      ignore-whitespace)))

(def read-quoted
  (grmr/rule "quoted"
             (grmr/apply-to quote-literal
                            (grmr/ignore "'")
                            read-quoted-value)))

(def read-expr
  (grmr/recursive-rule "expr"
                       (grmr/apply-to identity
                                      ignore-whitespace
                                      (grmr/any read-integer
                                                read-string
                                                curr-file-name
                                                curr-line
                                                read-symbol
                                                read-quoted
                                                read-or
                                                read-and
                                                read-fn
                                                read-let
                                                read-do
                                                read-apply
                                                read-apply-to
                                                read-reify
                                                read-vector
                                                read-hash-map
                                                read-assert
                                                read-returns
                                                (grmr/all read-inline
                                                          (error "'inline' expressions not allowed here"))
                                                read-call
                                                read-block-comment)
                                      ignore-whitespace)))

(def read-main
  (grmr/rule "main"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "main")
                            (grmr/any (grmr/apply-to ast/main-fn
                                                     read-params
                                                     (grmr/any read-inline-body
                                                               (grmr/one-or-more read-expr)
                                                               (error "Body of 'main' fn is wrong"))
                                                     read-close-paren)
                                      (error "'main' fn expression is wrong")))))

(def read-def
  (grmr/rule "def"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "def")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [sym pre-comment value post-comment]
                                                       (ast/definition sym (comp pre-comment
                                                                                 (list value)
                                                                                 post-comment)))
                                                     read-symbol
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     (grmr/none-or-more read-block-comment)
                                                     (grmr/any read-inline
                                                               read-expr)
                                                     ignore-whitespace
                                                     (grmr/none-or-more read-block-comment)
                                                     read-close-paren)
                                      (grmr/apply-to ast/declare
                                                     read-symbol
                                                     read-close-paren)
                                      (error "Invalid 'def' expression")))))

(def read-prototype
  (grmr/rule "prototype"
             (grmr/any read-assert
                       (grmr/apply-to identity
                                      read-open-paren
                                      (grmr/any
                                       (grmr/apply-to ast/prototype
                                                      read-symbol
                                                      read-params
                                                      read-fn-doc
                                                      (grmr/any read-inline-body
                                                                (grmr/none-or-more read-expr))
                                                      read-close-paren)
                                       (error "Invalid prototype function"))))))

(def read-defprotocol
  (grmr/rule "defprotocol"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "defprotocol")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [sym prototypes]
                                                       (ast/protocol
                                                        sym (filter prototypes ast/not-assertion?)))
                                                     read-symbol
                                                     (grmr/one-or-more
                                                      (grmr/any read-block-comment
                                                                read-prototype))
                                                     read-close-paren)
                                      (error "Invalid 'defprotocol' expression")))))

(def read-defn
  (grmr/rule "defn"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "defn")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [name arities]
                                                       (ast/definition name
                                                         (list (ast/fn-expr (maybe name)
                                                                            arities))))
                                                     read-symbol
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     read-arities
                                                     read-close-paren)
                                      (error "Invalid 'defn' expression")))))

(def read-extend-type
  (grmr/rule "extend-type"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "extend-type")
                            (grmr/any (grmr/apply-to ast/type-extension
                                                     (grmr/ignore
                                                      (grmr/one-or-more whitespace))
                                                     read-symbol
                                                     (grmr/apply-to comp*
                                                                    read-proto-impls
                                                                    (grmr/none-or-more read-proto-impls))
                                                     read-close-paren)
                                      (error "Invalid 'extend-type' expression")))))

(def read-deftype
  (grmr/rule "deftype"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "deftype")
                            (grmr/any (grmr/apply-to ast/type-expr
                                                     (grmr/ignore
                                                      (grmr/one-or-more whitespace))
                                                     read-symbol
                                                     read-params
                                                     (grmr/any (grmr/apply-to comp*
                                                                              read-proto-impls
                                                                              (grmr/none-or-more read-proto-impls))
                                                               (grmr/always {}))
                                                     read-close-paren)
                                      (error "Invalid 'deftype' expression")))))

(def read-module-spec
  (grmr/rule "module"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "module")
                            (grmr/any (grmr/apply-to ast/module
                                                     (grmr/ignore
                                                      (grmr/one-or-more whitespace))
                                                     read-string
                                                     read-close-paren)
                                      (error "Invalid 'module' expression")))))

(def read-add-ns
  (grmr/rule "add-ns"
             (grmr/apply-to identity
                            read-open-paren
                            (grmr/ignore "add-ns")
                            (grmr/any (grmr/apply-to ast/ns-add
                                                     (grmr/ignore
                                                      (grmr/one-or-more whitespace))
                                                     read-symbol
                                                     read-module-spec
                                                     read-close-paren)
                                      (error "Invalid 'add-ns' expression")))))

(def bad-expr
  (grmr/rule "bad-expr"
             (grmr/all ignore-whitespace "("
                       (error "Invalid expression"))))

(def top-level
  (grmr/recursive-rule "top-level"
                       (grmr/any read-main
                                 read-inline
                                 read-def
                                 read-defprotocol
                                 read-defn
                                 read-extend-type
                                 read-deftype
                                 read-block-comment
                                 read-add-ns
                                 bad-expr)))
