
;; This file specifies the syntax of Toccata
;; It also contains the code to turn a Toccata program from a string
;; to an AST

;; Components to build the grammar out of
(add-ns grmr (module "grammar.toc"))

;; The different types of nodes in the AST
(add-ns ast (module "ast.toc"))

;; sometimes, we have to see what's wrong
(defn debug [tag]
  (grmr/ignore
   (grmr/term-fn (fn [text]
                   (print-err tag (count text) (str "\"" (subs text 0 10) "\""))
                   0))))


;; we tag symbols with file/line for use later
(defprotocol Tagged
  (tag [s file line] s)
  (untag [x] x))

(deftype tagged-symbol [ns base sym file-name line-num]
  ast/FileLineInfo
  (ast/file-name [s] file-name)
  (ast/line-number [s] line-num)

  Tagged
  (tag [s file line]
    (tagged-symbol ns base sym file line))
  (untag [_] sym)

  Stringable
  (string-list [_]
    (list (extract (or (map ns (fn [ns-str] (str ns-str "/" base)))
                       (maybe (str base))))))

  Hash
  (sha1 [_] (sha1 base))

  Eq
  (=* [_ x] (=* x base)))

(extend-type Symbol
  Tagged
  (tag [s file line]
    (tagged-symbol "" s s file line))
  (untag [s] s)

  Eq
  (=* [s x]
    (symkey= s (untag x))))

;; It's useful to be able to tag lists of symbols
(extend-type List
  Tagged
  (tag [l file line]
    (map l (fn [x]
             (tag x file line)))))


(def symbol-start
  (grmr/rule "symbol-start"
               (grmr/any grmr/alpha (grmr/one-of "._<>=+-*/"))))

(def symbol-punct
  (grmr/rule "symbol-punct"
               (grmr/one-of "._<>=*/+!-?")))

(def symbol-char
  (grmr/rule "symbol-char"
               (grmr/any grmr/alpha grmr/digit symbol-punct)))

(def rest-of-symbol
  (grmr/rule "rest-of-symbol"
               (grmr/none-or-more symbol-char)))

(def namespace-punct
  (grmr/rule "namespace-punct"
               (grmr/one-of "._<>=*+!-?")))

(def rest-of-namespace
  (grmr/rule "rest-of-namespace"
               (grmr/none-or-more (grmr/any grmr/alpha
                                                grmr/digit
                                                namespace-punct))))

(def read-namespace
  (grmr/rule "namespace"
               (grmr/apply-to (fn [start the-rest]
                               (symbol (to-str (cons start the-rest))))
                             grmr/alpha
                             rest-of-namespace
                             (grmr/ignore "/"))))

(def read-symbol
  (grmr/rule "tagged-symbol"
               (grmr/apply-to (fn [file-name line-number ns start the-rest]
                                  (let [ns-prefix ((= "" ns) ns (str ns "/"))]
                                    (tagged-symbol ns (symbol (to-str (cons start the-rest)))
                                                   (symbol (to-str (comp (list ns-prefix start)
                                                                         the-rest)))
                                                   file-name line-number)))
                                grmr/file-name
                                grmr/line-number
                                (grmr/optional read-namespace)
                                symbol-start
                                rest-of-symbol)))

(def read-string-newline
  (grmr/rule "newline"
               (map (grmr/all "\\" "n")
                    (constantly "\n"))))

(def read-string-tab
  (grmr/rule "tab"
               (map (grmr/all "\\" "t")
                    (constantly "\t"))))

(def read-string-backspace
  (grmr/rule "backspace"
               (map (grmr/all "\\" "b")
                    (constantly "\b"))))

(def read-string-return
  (grmr/rule "return"
               (map (grmr/all "\\" "r")
                    (constantly "\r"))))

(def read-string-formfeed
  (grmr/rule "formfeed"
               (map (grmr/all "\\" "f")
                    (constantly "\f"))))

(def read-string-doublequote
  (grmr/rule "doublequote"
               (map (grmr/all "\\" "\"")
                    (constantly "\""))))

(def read-string-backslash
  (grmr/rule "backslash"
               (map (grmr/all "\\" "\\")
                    (constantly "\\"))))

(def not-eol
  (grmr/rule "not-eol"
             (grmr/not-char "\n")))

(defn string-frag-len [s]
  (inline-C Number "
    char *str = NULL;
    int64_t strLen;
    if (arg0->type == StringType) {
      str = ((String *)arg0)->buffer;
      strLen = ((String *)arg0)->len;
    } else if (arg0->type == SubStringType) {
      str = ((SubString *)arg0)->buffer;
      strLen = ((SubString *)arg0)->len;
    }
    int64_t len;
    for (len = 0; len < strLen && str[len] != 34 && str[len] != 92;)
       len++;
    dec_and_free(arg0, 1);
    return(numberValue(len));
"))

(def read-string-fragment
  (grmr/rule "read-string-fragment"
               (grmr/term-fn (fn [text]
                                 (string-frag-len text)))))

(def read-string
  (grmr/rule "string"
             (grmr/apply-to to-str
                            (grmr/ignore "\"")
                            (grmr/none-or-more
                             (grmr/any read-string-fragment
                                       read-string-backslash
                                       read-string-doublequote
                                       read-string-tab
                                       read-string-backspace
                                       read-string-return
                                       read-string-formfeed
                                       read-string-newline))
                            (grmr/ignore "\""))))

(def read-integer
  (grmr/rule "number"
               (grmr/any (map (grmr/one-or-more grmr/digit)
                                 str-to-int)
                           (grmr/apply-to (fn [digits]
                                           (* -1 (str-to-int digits)))
                                         (grmr/ignore "-")
                                         (grmr/one-or-more grmr/digit)))))

(def read-sub-expr
  (grmr/recurse "expr"))

(def linear-whitespace
  (grmr/rule "linear-whitespace"
             (grmr/any "," " " "\t")))

(def ignore-linear-whitespace (grmr/ignore (grmr/none-or-more linear-whitespace)))

(def newline
  (grmr/rule "newline"
             (grmr/apply-to identity
                            "\n" (grmr/ignore grmr/inc-line))))

(def ignore-newlines (grmr/ignore (grmr/none-or-more newline)))

(def whitespace
  (grmr/rule "whitespace"
             (grmr/any linear-whitespace
                       "\r"
                       newline)))

(def ignore-whitespace (grmr/ignore (grmr/none-or-more whitespace)))

(def read-arg
  (grmr/rule "arg"
             (grmr/apply-to comp
                            ignore-whitespace
                            read-symbol
                            ignore-whitespace)))

(def read-var-arg
  (grmr/rule "var-arg"
             (grmr/any (grmr/apply-to maybe
                                      ignore-whitespace
                                      (grmr/ignore "&")
                                      read-arg)
                       (grmr/always nothing))))

(def read-params
  (grmr/recursive-rule "params"
                       (grmr/any (grmr/apply-to identity
                                                ignore-whitespace
                                                (grmr/ignore "[")
                                                (grmr/apply-to ast/params
                                                               (grmr/none-or-more
                                                                (grmr/recurse "params"))
                                                               read-var-arg)
                                                (grmr/any (grmr/ignore "]")
                                                          (grmr/error "Missing ']'")))
                                 read-arg)))

(def read-inline
  (grmr/rule "read-inline"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "inline")
                            (grmr/apply-to (fn [file-name line-number lang return-type body]
                                             (ast/inline lang return-type body "" 0))
                                           grmr/file-name
                                           grmr/line-number
                                           (grmr/ignore (grmr/one-or-more whitespace))
                                           read-symbol
                                           (grmr/ignore (grmr/one-or-more whitespace))
                                           (grmr/optional (grmr/apply-to identity
                                                                         read-symbol
                                                                         (grmr/ignore
                                                                          (grmr/one-or-more whitespace))))
                                           read-string
                                           ignore-whitespace
                                           (grmr/ignore ")")))))

(def read-block-comment
  (grmr/rule "block-comment"
             (grmr/apply-to ast/block-comment
                            ignore-whitespace
                            grmr/file-name
                            grmr/line-number
                            (grmr/one-or-more
                             (grmr/apply-to identity
                                            ignore-linear-whitespace
                                            (grmr/ignore (grmr/one-or-more ";"))
                                            (grmr/apply-to to-str
                                                           (grmr/none-or-more not-eol))
                                            (grmr/ignore newline))))))

(def read-call
  (grmr/rule "call"
             (grmr/apply-to ast/call-expr
                            (grmr/ignore "(")
                            (grmr/one-or-more read-sub-expr)
                            (grmr/ignore ")"))))

(def read-sub-dest
  (grmr/recurse "destructure"))

(def read-list-destructure
  (grmr/rule "list-destructure"
             (grmr/apply-to ast/params
                            ignore-whitespace
                            (grmr/ignore "[")
                            (grmr/none-or-more read-sub-dest)
                            (grmr/any (grmr/apply-to maybe read-var-arg)
                                      (grmr/always nothing))
                            (grmr/ignore "]"))))

(def read-destructure
  (grmr/recursive-rule "destructure"
                       (grmr/any read-list-destructure
                                 read-arg)))
(def read-let-binding
  (grmr/rule "let-binding"
             (grmr/apply-to ast/binding
                            ignore-whitespace
                            read-destructure
                            ignore-whitespace
                            read-sub-expr)))

(def read-let
  (grmr/rule "let"
             (grmr/apply-to ast/let-expr
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "let")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/ignore "[")
                            (grmr/one-or-more read-let-binding)
                            (grmr/ignore "]")
                            (grmr/one-or-more read-sub-expr)
                            ignore-whitespace
                            (grmr/ignore ")"))))

(def read-do
  (grmr/rule "do"
             (grmr/apply-to (partial ast/let-expr empty-list)
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "do")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/one-or-more read-sub-expr)
                            ignore-whitespace
                            (grmr/ignore ")"))))

(def read-expr
  (grmr/recursive-rule "expr"
                       (grmr/apply-to identity
                                      ignore-whitespace
                                      (grmr/any read-integer
                                                read-string
                                                read-symbol
                                                read-block-comment
                                                read-let
                                                read-do

                                                read-call)
                                      ignore-whitespace)))

(def read-inline-body
  (grmr/rule "read-inline-body"
             (grmr/apply-to comp
                            (grmr/none-or-more read-block-comment)
                            (grmr/all read-inline)
                            (grmr/none-or-more read-block-comment))))

(def read-single-arity
  (grmr/rule "single-arity"
             (grmr/apply-to (fn [params doc body]
                              (list (ast/fn-arity params doc body)))
                            read-params
                            (grmr/any read-block-comment
                                      (grmr/apply-to (fn [fn ln]
                                                       (ast/block-comment fn ln (list "")))
                                                     grmr/file-name
                                                     grmr/line-number))
                            (grmr/any read-inline-body
                                      (grmr/one-or-more read-expr)
                                      (grmr/error "Body of 'fn' is wrong"))
                            ignore-whitespace)))

(def read-arities
  (grmr/rule "arities"
             read-single-arity))

(def read-main
  (grmr/rule "main"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "main")
                            (grmr/any (grmr/apply-to ast/main-fn
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     read-params
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     ;; TODO: will add later
                                                     ;; (grmr/none-or-more (grmr/any read-assert
                                                     ;;                              read-returns))
                                                     (grmr/any read-inline-body
                                                               (grmr/one-or-more read-expr)
                                                               (grmr/error "Body of 'main' fn is wrong"))
                                                     ignore-whitespace
                                                     (grmr/ignore ")"))
                                      (grmr/error "'main' fn expression is wrong")))))

(def read-def
  (grmr/rule "def"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "def")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [sym pre-comment value post-comment]
                                                       (ast/definition sym (comp pre-comment
                                                                                 (list value)
                                                                                 post-comment)))
                                                     read-symbol
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     (grmr/none-or-more read-block-comment)
                                                     (grmr/any read-inline
                                                               read-expr)
                                                     ignore-whitespace
                                                     (grmr/none-or-more read-block-comment)
                                                     ignore-whitespace
                                                     (grmr/ignore ")"))
                                      (grmr/error "Invalid 'def' expression")))))

(def read-defn
  (grmr/rule "defn"
             (grmr/apply-to identity
                            ignore-whitespace
                            (grmr/ignore "(")
                            ignore-whitespace
                            (grmr/ignore "defn")
                            (grmr/ignore (grmr/one-or-more whitespace))
                            (grmr/any (grmr/apply-to (fn [name arities]
                                                       (ast/definition name
                                                         (list (ast/fn-expr name arities))))
                                                     read-symbol
                                                     (grmr/ignore (grmr/one-or-more whitespace))
                                                     read-arities
                                                     ignore-whitespace
                                                     (grmr/ignore ")"))
                                      (grmr/error "Invalid 'defn' expression")))))

(def bad-expr
  (grmr/rule "bad-expr"
             (grmr/all "(" (grmr/error "Invalid expression"))))

(def top-level
  (grmr/recursive-rule "top-level"
                       (grmr/any read-main
                                 read-inline
                                 read-def
                                 read-defn
                                 read-block-comment
                                 bad-expr)))
