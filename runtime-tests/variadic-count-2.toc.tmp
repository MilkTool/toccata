
#define _XOPEN_SOURCE 600
#include <stdlib.h>
#include "core.h"

// inline
// #line 2 "/home/jim/toccata/core.toc"
Value *empty_list_0 = (Value *)&(List){ListType,-1,0,0,0};

#

// inline
// #line 4 "/home/jim/toccata/core.toc"
Value *empty_vector_1 = (Value *)&(Vector){VectorType,-1,0,5,0,0};

#

// --------- maybe -------------
Value *maybe_3;
Value *maybe_4(List *closures, Value *v_0) {
while (1) {

// inline
// #line 8 "/home/jim/toccata/core.toc"
return(maybe((List *)0, (Value *)0, v_0));
#

};};
FnArity maybe_5 = {FnArityType, -1, 1, (List *)0, 0, maybe_4};
Function maybe_7 = {FunctionType, -1, "maybe", 1, {&maybe_5}};
Value *maybe_3 = (Value *)&maybe_7;


// inline
// #line 10 "/home/jim/toccata/core.toc"
Value *nothing_8 = (Value *)&(Maybe){MaybeType, -1, 0};

#

// proto fn for HashMapNode/assoc*
Value *assoc_STAR__12;
ProtoImpls assoc_STAR__Implementations_14;
Value *assoc_STAR__13(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4);

// proto fn for HashMapNode/dissoc*
Value *dissoc_STAR__11;
ProtoImpls dissoc_STAR__Implementations_16;
Value *dissoc_STAR__15(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3);

// proto fn for HashMapNode/get*
Value *get_STAR__10;
ProtoImpls get_STAR__Implementations_18;
Value *get_STAR__17(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4);

// proto fn for HashMapNode/hash-seq
Value *hash_seq_9;
ProtoImpls hash_seq_Implementations_21;
Value *hash_seq_20(List *closures, Value *arg0, Value *arg1);

// --------- reified-type-args -------------
Value *reified_type_args_24;
Value *reified_type_args_25(List *closures, Value *x_0) {
while (1) {

// inline
// #line 23 "/home/jim/toccata/core.toc"
return(reifiedTypeArgs(x_0));
#

};};
FnArity reified_type_args_26 = {FnArityType, -1, 1, (List *)0, 0, reified_type_args_25};
Function reified_type_args_28 = {FunctionType, -1, "reified-type-args", 1, {&reified_type_args_26}};
Value *reified_type_args_24 = (Value *)&reified_type_args_28;


// --------- reified-get-type -------------
Value *reified_get_type_30;
Value *reified_get_type_31(List *closures, Value *value_0) {
while (1) {

// inline
// #line 27 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(value_0->type);
    dec_and_free(value_0, 1);
    return(numVal);
#

};};
FnArity reified_get_type_32 = {FnArityType, -1, 1, (List *)0, 0, reified_get_type_31};
Function reified_get_type_34 = {FunctionType, -1, "reified-get-type", 1, {&reified_get_type_32}};
Value *reified_get_type_30 = (Value *)&reified_get_type_34;


// proto fn for Type/type-name
Value *type_name_40;
ProtoImpls type_name_Implementations_42;
Value *type_name_41(List *closures, Value *arg0);
Value *Default_type_name_43(List *closures, Value *value_0) {
while (1) {

// inline
// #line 47 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(value_0->type);
    dec_and_free(value_0, 1);
    return(integer_str(numVal));
#

};};
FnArity Default_type_name_44 = {FnArityType, -1, 1, (List *)0, 0, Default_type_name_43};

// proto fn for Type/type-args
Value *type_args_39;
ProtoImpls type_args_Implementations_47;
Value *type_args_46(List *closures, Value *arg0);
Value *Default_type_args_48(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 54 "/home/jim/toccata/core.toc"
Value *rslt1 = reified_type_args_25(empty_list, x_0);
switch (rslt1->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 54\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt1);

};};
FnArity Default_type_args_49 = {FnArityType, -1, 1, (List *)0, 0, Default_type_args_48};

// proto fn for Type/get-type
Value *get_type_38;
ProtoImpls get_type_Implementations_52;
Value *get_type_51(List *closures, Value *arg0);
Value *Default_get_type_53(List *closures, Value *value_0) {
while (1) {

// inline
// #line 40 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(value_0->type);
    dec_and_free(value_0, 1);
    return(numVal);
#

};};
FnArity Default_get_type_54 = {FnArityType, -1, 1, (List *)0, 0, Default_get_type_53};

// proto fn for Type/instance?
Value *instance_QM__37;
ProtoImpls instance_QM__Implementations_57;
Value *instance_QM__56(List *closures, Value *arg0, Value *arg1);

// proto fn for Type/has-field
Value *has_field_36;
ProtoImpls has_field_Implementations_60;
Value *has_field_59(List *closures, Value *arg0, Value *arg1);
Value *Default_has_field_61(List *closures, Value *arg0, Value *field_1) {
while (1) {

dec_and_free(arg0, 1);

dec_and_free(field_1, 1);
return(nothing_8);

};};
FnArity Default_has_field_62 = {FnArityType, -1, 2, (List *)0, 0, Default_has_field_61};

// proto fn for Type/same-type?
Value *same_type_QM__35;
ProtoImpls same_type_QM__Implementations_65;
Value *same_type_QM__64(List *closures, Value *arg0, Value *arg1);

// --------- new-type-value -------------
Value *new_type_value_68;
Value *new_type_value_69(List *closures, Value *reified_template_0, Value *type_arg_values_1) {
while (1) {

// inline
// #line 68 "/home/jim/toccata/core.toc"

  ReifiedVal *template = (ReifiedVal *)reified_template_0;
  ReifiedVal *rv = malloc_reified(template->implCount);
  int rvSize = sizeof(ReifiedVal) + sizeof(Function *) * template->implCount;
  memcpy(rv, template, rvSize);
  __atomic_store(&rv->refs, &refsInit, __ATOMIC_RELAXED);
  rv->typeArgs = type_arg_values_1;
  return((Value *)rv);
#

};};
FnArity new_type_value_70 = {FnArityType, -1, 2, (List *)0, 0, new_type_value_69};
Function new_type_value_72 = {FunctionType, -1, "new-type-value", 1, {&new_type_value_70}};
Value *new_type_value_68 = (Value *)&new_type_value_72;


// --------- make-value -------------
Value *make_value_74;
Value *make_value_75(List *closures, Value *reified_template_0, Value *type_arg_values_1) {
while (1) {

// inline
// #line 78 "/home/jim/toccata/core.toc"

  ReifiedVal *template = (ReifiedVal *)reified_template_0;
  ReifiedVal *rv = malloc_reified(template->implCount);
  int rvSize = sizeof(ReifiedVal) + sizeof(Function *) * template->implCount;
  memcpy(rv, template, rvSize);
  __atomic_store(&rv->refs, &refsInit, __ATOMIC_RELAXED);
  rv->typeArgs = type_arg_values_1;
  dec_and_free(reified_template_0, 1);
  return((Value *)rv);
#

};};
FnArity make_value_76 = {FnArityType, -1, 2, (List *)0, 0, make_value_75};
Function make_value_78 = {FunctionType, -1, "make-value", 1, {&make_value_76}};
Value *make_value_74 = (Value *)&make_value_78;


// --------- list-count -------------
Value *list_count_80;
Value *list_count_81(List *closures, Value *l_0) {
while (1) {

// inline
// #line 90 "/home/jim/toccata/core.toc"

   Value *numVal = integerValue(((List *)l_0)->len);
   dec_and_free(l_0, 1);
   return(numVal);
#

};};
Value *list_count_83(List *closures, Value *l_0) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 88\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:              \n$TOCCATA_DIR/core.toc:: 89\n");
#endif
abort();
}
return(list_count_81(closures, l_0));
};
FnArity list_count_82 = {FnArityType, -1, 1, (List *)0, 0, list_count_83};
Function list_count_84 = {FunctionType, -1, "list-count", 1, {&list_count_82}};
Value *list_count_80 = (Value *)&list_count_84;


// --------- mutate-vect-conj -------------
Value *mutate_vect_conj_86;
Value *mutate_vect_conj_87(List *closures, Value *v_0, Value *x_1) {
while (1) {

// inline
// #line 97 "/home/jim/toccata/core.toc"
return((Value *)mutateVectConj((Vector *)v_0, x_1));
#

};};
Value *mutate_vect_conj_89(List *closures, Value *v_0, Value *x_1) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 95\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 96\n");
#endif
abort();
}
return(mutate_vect_conj_87(closures, v_0, x_1));
};
FnArity mutate_vect_conj_88 = {FnArityType, -1, 2, (List *)0, 0, mutate_vect_conj_89};
Function mutate_vect_conj_90 = {FunctionType, -1, "mutate-vect-conj", 1, {&mutate_vect_conj_88}};
Value *mutate_vect_conj_86 = (Value *)&mutate_vect_conj_90;


// --------- list-map -------------
Value *list_map_92;
Value *list_map_93(List *closures, Value *l_0, Value *f_1) {
while (1) {

// inline
// #line 101 "/home/jim/toccata/core.toc"
return(listMap(l_0, f_1));
#

};};
Value *list_map_95(List *closures, Value *l_0, Value *f_1) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 99\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
return(list_map_93(closures, l_0, f_1));
};
FnArity list_map_94 = {FnArityType, -1, 2, (List *)0, 0, list_map_95};
Function list_map_96 = {FunctionType, -1, "list-map", 1, {&list_map_94}};
Value *list_map_92 = (Value *)&list_map_96;


// --------- list-concat -------------
Value *list_concat_98;
Value *list_concat_99(List *closures, Value *l_0) {
while (1) {

// inline
// #line 105 "/home/jim/toccata/core.toc"
return(listConcat(l_0));
#

};};
Value *list_concat_101(List *closures, Value *l_0) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 103\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}
return(list_concat_99(closures, l_0));
};
FnArity list_concat_100 = {FnArityType, -1, 1, (List *)0, 0, list_concat_101};
Function list_concat_102 = {FunctionType, -1, "list-concat", 1, {&list_concat_100}};
Value *list_concat_98 = (Value *)&list_concat_102;


// --------- add-numbers -------------
Value *add_numbers_104;
Value *add_numbers_105(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 110 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(((Integer *)x_0)->numVal + ((Integer *)y_1)->numVal);
    dec_and_free(x_0, 1);
    dec_and_free(y_1, 1);
    return(numVal);
#

};};
Value *add_numbers_107(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 107\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 108\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 107\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 109\n");
#endif
abort();
}
return(add_numbers_105(closures, x_0, y_1));
};
FnArity add_numbers_106 = {FnArityType, -1, 2, (List *)0, 0, add_numbers_107};
Function add_numbers_108 = {FunctionType, -1, "add-numbers", 1, {&add_numbers_106}};
Value *add_numbers_104 = (Value *)&add_numbers_108;


// --------- str-malloc -------------
Value *str_malloc_110;
Value *str_malloc_111(List *closures, Value *len_0) {
while (1) {

// inline
// #line 118 "/home/jim/toccata/core.toc"

  String *strVal = malloc_string(((Integer *)len_0)->numVal);
  strVal->len = 0;
  strVal->buffer[0] = 0;
  dec_and_free(len_0, 1);
  return((Value *)strVal);

#

};};
Value *str_malloc_113(List *closures, Value *len_0) {
switch (len_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 116\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, len_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 117\n");
#endif
abort();
}
return(str_malloc_111(closures, len_0));
};
FnArity str_malloc_112 = {FnArityType, -1, 1, (List *)0, 0, str_malloc_113};
Function str_malloc_114 = {FunctionType, -1, "str-malloc", 1, {&str_malloc_112}};
Value *str_malloc_110 = (Value *)&str_malloc_114;


// --------- fn-apply -------------
Value *fn_apply_116;
Value *fn_apply_117(List *closures, Value *x_0, Value *args_1) {
while (1) {

// inline
// #line 128 "/home/jim/toccata/core.toc"
return(fnApply(x_0, args_1));
#

};};
Value *fn_apply_119(List *closures, Value *x_0, Value *args_1) {
switch (x_0->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 125\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}
switch (args_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 125\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
return(fn_apply_117(closures, x_0, args_1));
};
FnArity fn_apply_118 = {FnArityType, -1, 2, (List *)0, 0, fn_apply_119};
Function fn_apply_120 = {FunctionType, -1, "fn-apply", 1, {&fn_apply_118}};
Value *fn_apply_116 = (Value *)&fn_apply_120;


// --------- abort -------------
Value *abort_122;
Value *abort_123(List *closures) {
while (1) {

// inline
// #line 131 "/home/jim/toccata/core.toc"
abort();
    return(nothing);
#

};};
FnArity abort_124 = {FnArityType, -1, 0, (List *)0, 0, abort_123};
Function abort_126 = {FunctionType, -1, "abort", 1, {&abort_124}};
Value *abort_122 = (Value *)&abort_126;


// --------- subtract-numbers -------------
Value *subtract_numbers_128;
Value *subtract_numbers_129(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 138 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(((Integer *)x_0)->numVal - ((Integer *)y_1)->numVal);
    dec_and_free(x_0, 1);
    dec_and_free(y_1, 1);
    return(numVal);
#

};};
Value *subtract_numbers_131(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 135\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 136\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 135\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 137\n");
#endif
abort();
}
return(subtract_numbers_129(closures, x_0, y_1));
};
FnArity subtract_numbers_130 = {FnArityType, -1, 2, (List *)0, 0, subtract_numbers_131};
Function subtract_numbers_132 = {FunctionType, -1, "subtract-numbers", 1, {&subtract_numbers_130}};
Value *subtract_numbers_128 = (Value *)&subtract_numbers_132;


// --------- mult-numbers -------------
Value *mult_numbers_134;
Value *mult_numbers_135(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 147 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(((Integer *)x_0)->numVal * ((Integer *)y_1)->numVal);
    dec_and_free(x_0, 1);
    dec_and_free(y_1, 1);
    return(numVal);
#

};};
Value *mult_numbers_137(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 144\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 145\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 144\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 146\n");
#endif
abort();
}
return(mult_numbers_135(closures, x_0, y_1));
};
FnArity mult_numbers_136 = {FnArityType, -1, 2, (List *)0, 0, mult_numbers_137};
Function mult_numbers_138 = {FunctionType, -1, "mult-numbers", 1, {&mult_numbers_136}};
Value *mult_numbers_134 = (Value *)&mult_numbers_138;


// --------- rem -------------
Value *rem_140;
Value *rem_141(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 156 "/home/jim/toccata/core.toc"

    Value *numVal = integerValue(((Integer *)x_0)->numVal % ((Integer *)y_1)->numVal);
    dec_and_free(x_0, 1);
    dec_and_free(y_1, 1);
    return(numVal);
#

};};
Value *rem_143(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 153\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 154\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 153\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 155\n");
#endif
abort();
}
return(rem_141(closures, x_0, y_1));
};
FnArity rem_142 = {FnArityType, -1, 2, (List *)0, 0, rem_143};
Function rem_144 = {FunctionType, -1, "rem", 1, {&rem_142}};
Value *rem_140 = (Value *)&rem_144;


// --------- vect-count -------------
Value *vect_count_146;
Value *vect_count_147(List *closures, Value *v_0) {
while (1) {

// inline
// #line 164 "/home/jim/toccata/core.toc"

   Value *result = integerValue(((Vector *)v_0)->count);
   dec_and_free(v_0, 1);
   return(result);
#

};};
Value *vect_count_149(List *closures, Value *v_0) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 162\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:             \n$TOCCATA_DIR/core.toc:: 163\n");
#endif
abort();
}
return(vect_count_147(closures, v_0));
};
FnArity vect_count_148 = {FnArityType, -1, 1, (List *)0, 0, vect_count_149};
Function vect_count_150 = {FunctionType, -1, "vect-count", 1, {&vect_count_148}};
Value *vect_count_146 = (Value *)&vect_count_150;


// inline
// #line 170 "/home/jim/toccata/core.toc"
Value *emptyBMI_151 = (Value *)&emptyBMI;

#

// --------- identity -------------
Value *identity_153;
Value *identity_154(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
return(x_0);

};};
FnArity identity_155 = {FnArityType, -1, 1, (List *)0, 0, identity_154};
Function identity_157 = {FunctionType, -1, "identity", 1, {&identity_155}};
Value *identity_153 = (Value *)&identity_157;

Value *arityImpl159(List *closures, Value *, Value *);
Value *arityImpl159(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 179 "/home/jim/toccata/core.toc"
return(checkInstance(IntegerType, x_1));
#

};};
FnArity staticArity160 = {FnArityType, -1, 2, (List *)0, 0, arityImpl159};
ReifiedVal reifiedStatic162 = {19, -1, (Value *)0, 0, {}};
Value *reifiedPtr163 = (Value *)&reifiedStatic162;
Value *arityImpl165(List *closures, Value *, Value *);
Value *arityImpl165(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 185 "/home/jim/toccata/core.toc"
return(checkInstance(ListType, x_1));
#

};};
FnArity staticArity166 = {FnArityType, -1, 2, (List *)0, 0, arityImpl165};
ReifiedVal reifiedStatic168 = {20, -1, (Value *)0, 0, {}};
Value *reifiedPtr169 = (Value *)&reifiedStatic168;
Value *arityImpl171(List *closures, Value *, Value *);
Value *arityImpl171(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 191 "/home/jim/toccata/core.toc"
return(checkInstance(MaybeType, x_1));
#

};};
FnArity staticArity172 = {FnArityType, -1, 2, (List *)0, 0, arityImpl171};
ReifiedVal reifiedStatic174 = {21, -1, (Value *)0, 0, {}};
Value *reifiedPtr175 = (Value *)&reifiedStatic174;
Value *arityImpl177(List *closures, Value *, Value *);
Value *arityImpl177(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 197 "/home/jim/toccata/core.toc"
return(checkInstance(SymbolType, x_1));
#

};};
FnArity staticArity178 = {FnArityType, -1, 2, (List *)0, 0, arityImpl177};
ReifiedVal reifiedStatic180 = {22, -1, (Value *)0, 0, {}};
Value *reifiedPtr181 = (Value *)&reifiedStatic180;
Value *arityImpl183(List *closures, Value *, Value *);
Value *arityImpl183(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 203 "/home/jim/toccata/core.toc"
return(checkInstance(VectorType, x_1));
#

};};
FnArity staticArity184 = {FnArityType, -1, 2, (List *)0, 0, arityImpl183};
ReifiedVal reifiedStatic186 = {23, -1, (Value *)0, 0, {}};
Value *reifiedPtr187 = (Value *)&reifiedStatic186;
Value *arityImpl189(List *closures, Value *, Value *);
Value *arityImpl189(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 209 "/home/jim/toccata/core.toc"
return(checkInstance(FunctionType, x_1));
#

};};
FnArity staticArity190 = {FnArityType, -1, 2, (List *)0, 0, arityImpl189};
ReifiedVal reifiedStatic192 = {24, -1, (Value *)0, 0, {}};
Value *reifiedPtr193 = (Value *)&reifiedStatic192;
Value *arityImpl195(List *closures, Value *, Value *);
Value *arityImpl195(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 215 "/home/jim/toccata/core.toc"
return(checkInstance(PromiseType, x_1));
#

};};
FnArity staticArity196 = {FnArityType, -1, 2, (List *)0, 0, arityImpl195};
ReifiedVal reifiedStatic198 = {25, -1, (Value *)0, 0, {}};
Value *reifiedPtr199 = (Value *)&reifiedStatic198;
Value *arityImpl201(List *closures, Value *, Value *);
Value *arityImpl201(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 221 "/home/jim/toccata/core.toc"
return(checkInstance(FutureType, x_1));
#

};};
FnArity staticArity202 = {FnArityType, -1, 2, (List *)0, 0, arityImpl201};
ReifiedVal reifiedStatic204 = {26, -1, (Value *)0, 0, {}};
Value *reifiedPtr205 = (Value *)&reifiedStatic204;
Value *arityImpl207(List *closures, Value *, Value *);
Value *arityImpl207(List *closures, Value *arg0, Value *x_1) {
while (1) {

// inline
// #line 227 "/home/jim/toccata/core.toc"
return(checkInstance(AgentType, x_1));
#

};};
FnArity staticArity208 = {FnArityType, -1, 2, (List *)0, 0, arityImpl207};
ReifiedVal reifiedStatic210 = {27, -1, (Value *)0, 0, {}};
Value *reifiedPtr211 = (Value *)&reifiedStatic210;

// --------- bit-and -------------
Value *bit_and_213;
Value *bit_and_214(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 233 "/home/jim/toccata/core.toc"
return(bitAnd(x_0, y_1));
#

};};
Value *bit_and_216(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 229\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 231\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 229\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 232\n");
#endif
abort();
}
return(bit_and_214(closures, x_0, y_1));
};
FnArity bit_and_215 = {FnArityType, -1, 2, (List *)0, 0, bit_and_216};
Function bit_and_217 = {FunctionType, -1, "bit-and", 1, {&bit_and_215}};
Value *bit_and_213 = (Value *)&bit_and_217;


// --------- bit-or -------------
Value *bit_or_219;
Value *bit_or_220(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 239 "/home/jim/toccata/core.toc"
return(bitOr(x_0, y_1));
#

};};
Value *bit_or_222(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 235\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 237\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 235\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 238\n");
#endif
abort();
}
return(bit_or_220(closures, x_0, y_1));
};
FnArity bit_or_221 = {FnArityType, -1, 2, (List *)0, 0, bit_or_222};
Function bit_or_223 = {FunctionType, -1, "bit-or", 1, {&bit_or_221}};
Value *bit_or_219 = (Value *)&bit_or_223;


// --------- deliver -------------
Value *deliver_225;
Value *deliver_226(List *closures, Value *p_0, Value *v_1) {
while (1) {

// inline
// #line 245 "/home/jim/toccata/core.toc"
return(deliverPromise(p_0, v_1));
#

};};
Value *deliver_228(List *closures, Value *p_0, Value *v_1) {
switch (p_0->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 241\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_0)));
fprintf(stderr, "'Promise' From:            \n$TOCCATA_DIR/core.toc:: 244\n");
#endif
abort();
}
return(deliver_226(closures, p_0, v_1));
};
FnArity deliver_227 = {FnArityType, -1, 2, (List *)0, 0, deliver_228};
Function deliver_229 = {FunctionType, -1, "deliver", 1, {&deliver_227}};
Value *deliver_225 = (Value *)&deliver_229;


// --------- delivered -------------
Value *delivered_231;
Value *delivered_232(List *closures, Value *p_0) {
while (1) {

// inline
// #line 250 "/home/jim/toccata/core.toc"
return(promiseDelivered(p_0));
#

};};
Value *delivered_234(List *closures, Value *p_0) {
switch (p_0->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 247\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_0)));
fprintf(stderr, "'Promise' From:            \n$TOCCATA_DIR/core.toc:: 249\n");
#endif
abort();
}
return(delivered_232(closures, p_0));
};
FnArity delivered_233 = {FnArityType, -1, 1, (List *)0, 0, delivered_234};
Function delivered_235 = {FunctionType, -1, "delivered", 1, {&delivered_233}};
Value *delivered_231 = (Value *)&delivered_235;


// proto fn for Composition/zero
Value *zero_237;
ProtoImpls zero_Implementations_239;
Value *zero_238(List *closures, Value *arg0);

// proto fn for Composition/comp*
Value *comp_STAR__236;
ProtoImpls comp_STAR__Implementations_241;
Value *comp_STAR__240(List *closures, Value *arg0, Value *arg1);
ProtoImpls comp_STAR__Implementations_243;
Value *comp_STAR__242(List *closures, Value *arg0, Value *arg1, Value *arg2);

// --------- comp -------------
Value *comp_245;
Value *comp_247(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
return(x_0);

};};
FnArity comp_248 = {FnArityType, -1, 1, (List *)0, 0, comp_247};
Value *comp_246(List *closures, Value *arg0) {
while (1) {
Value *x_3;
Value *xs_1;
Value **destArgs2[2] = {&x_3, &xs_1};
destructValue("core", "281", (Value *)arg0, 2, destArgs2);
incRef(x_3, 1);
incRef(xs_1, 1);
Value *rslt4 = proto2Arg(&comp_STAR__Implementations_241, "<nothing>/comp*", x_3, xs_1, "core", 282);
return(rslt4);

};};
Value *comp_251(List *closures, Value *args) {
Value *arg0;
Value **destArgs5[1] = {&arg0};
destructValue("core", "278", (Value *)args, 1, destArgs5);
return(comp_246(closures, args));
};
FnArity comp_250 = {FnArityType, -1, 1, (List *)0, 1, comp_251};
Function comp_252 = {FunctionType, -1, "comp", 2, {&comp_248, &comp_250}};
Value *comp_245 = (Value *)&comp_252;


// proto fn for Container/wrap
Value *wrap_261;
ProtoImpls wrap_Implementations_263;
Value *wrap_262(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/flatten
Value *flatten_260;
ProtoImpls flatten_Implementations_265;
Value *flatten_264(List *closures, Value *arg0);

// proto fn for Container/map
Value *map_259;
ProtoImpls map_Implementations_267;
Value *map_266(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/send*
Value *send_STAR__258;
ProtoImpls send_STAR__Implementations_269;
Value *send_STAR__268(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/flat-map
Value *flat_map_257;
ProtoImpls flat_map_Implementations_271;
Value *flat_map_270(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/extend
Value *extend_256;
ProtoImpls extend_Implementations_273;
Value *extend_272(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/apply*
Value *apply_STAR__255;
ProtoImpls apply_STAR__Implementations_275;
Value *apply_STAR__274(List *closures, Value *arg0, Value *arg1);

// proto fn for Container/extract
Value *extract_254;
ProtoImpls extract_Implementations_277;
Value *extract_276(List *closures, Value *arg0);

// proto fn for Container/duplicate
Value *duplicate_253;
ProtoImpls duplicate_Implementations_279;
Value *duplicate_278(List *closures, Value *arg0);

// --------- cons -------------
Value *cons_281;
Value *cons_282(List *closures, Value *x_0, Value *l_1) {
while (1) {

// inline
// #line 363 "/home/jim/toccata/core.toc"

   Value *listVal = (Value *)listCons(x_0, (List *)l_1);
   return(listVal);

#

};};
Value *cons_284(List *closures, Value *x_0, Value *l_1) {
switch (l_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 360\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}
return(cons_282(closures, x_0, l_1));
};
FnArity cons_283 = {FnArityType, -1, 2, (List *)0, 0, cons_284};
Function cons_285 = {FunctionType, -1, "cons", 1, {&cons_283}};
Value *cons_281 = (Value *)&cons_285;


// --------- send -------------
Value *send_287;
Value *send_288(List *closures, Value *arg0) {
while (1) {
Value *v_3;
Value *f_4;
Value *args_1;
Value **destArgs2[3] = {&v_3, &f_4, &args_1};
destructValue("core", "367", (Value *)arg0, 3, destArgs2);
incRef(v_3, 1);
incRef(f_4, 1);
incRef(args_1, 1);
switch (args_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 367\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 370\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}

// static-fixed
// #line 370 "/home/jim/toccata/core.toc"
Value *rslt5 = cons_282(empty_list, f_4, args_1);
Value *rslt6 = proto2Arg(&send_STAR__Implementations_269, "<nothing>/send*", v_3, rslt5, "core", 370);
return(rslt6);

};};
Value *send_290(List *closures, Value *args) {
Value *arg0;
Value **destArgs7[1] = {&arg0};
destructValue("core", "367", (Value *)args, 1, destArgs7);
return(send_288(closures, args));
};
FnArity send_289 = {FnArityType, -1, 1, (List *)0, 1, send_290};
Function send_291 = {FunctionType, -1, "send", 1, {&send_289}};
Value *send_287 = (Value *)&send_291;


// proto fn for Collection/reduce
Value *reduce_297;
ProtoImpls reduce_Implementations_299;
Value *reduce_298(List *closures, Value *arg0, Value *arg1, Value *arg2);

// proto fn for Collection/empty
Value *empty_296;
ProtoImpls empty_Implementations_301;
Value *empty_300(List *closures, Value *arg0);

// proto fn for Collection/conj
Value *conj_295;
ProtoImpls conj_Implementations_303;
Value *conj_302(List *closures, Value *arg0, Value *arg1);

// proto fn for Collection/empty?
Value *empty_QM__294;
ProtoImpls empty_QM__Implementations_305;
Value *empty_QM__304(List *closures, Value *arg0);

// proto fn for Collection/filter
Value *filter_293;
ProtoImpls filter_Implementations_308;
Value *filter_307(List *closures, Value *arg0, Value *arg1);

// proto fn for Collection/count
Value *count_292;
ProtoImpls count_Implementations_310;
Value *count_309(List *closures, Value *arg0);

// proto fn for Seqable/split
Value *split_321;
ProtoImpls split_Implementations_323;
Value *split_322(List *closures, Value *arg0, Value *arg1);
ProtoImpls split_Implementations_325;
Value *split_324(List *closures, Value *arg0, Value *arg1, Value *arg2);

// proto fn for Seqable/to-str
Value *to_str_320;
ProtoImpls to_str_Implementations_328;
Value *to_str_327(List *closures, Value *arg0);

// proto fn for Seqable/reverse
Value *reverse_319;
ProtoImpls reverse_Implementations_331;
Value *reverse_330(List *closures, Value *arg0);

// proto fn for Seqable/seq
Value *seq_318;
ProtoImpls seq_Implementations_333;
Value *seq_332(List *closures, Value *arg0);

// proto fn for Seqable/first
Value *first_317;
ProtoImpls first_Implementations_336;
Value *first_335(List *closures, Value *arg0);

// proto fn for Seqable/butlast
Value *butlast_316;
ProtoImpls butlast_Implementations_339;
Value *butlast_338(List *closures, Value *arg0);

// proto fn for Seqable/vec
Value *vec_315;
ProtoImpls vec_Implementations_341;
Value *vec_340(List *closures, Value *arg0);

// proto fn for Seqable/rest
Value *rest_314;
ProtoImpls rest_Implementations_344;
Value *rest_343(List *closures, Value *arg0);

// proto fn for Seqable/split-with
Value *split_with_313;
ProtoImpls split_with_Implementations_346;
Value *split_with_345(List *closures, Value *arg0, Value *arg1);
ProtoImpls split_with_Implementations_348;
Value *split_with_347(List *closures, Value *arg0, Value *arg1, Value *arg2);

// proto fn for Seqable/last
Value *last_312;
ProtoImpls last_Implementations_350;
Value *last_349(List *closures, Value *arg0);

// --------- drop -------------
Value *drop_353;
Value *drop_354(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 1);
incRef(n_1, 1);
Value *rslt2 = proto2Arg(&split_Implementations_323, "<nothing>/split", coll_0, n_1, "core", 461);
Value *arg5;
Value *tail_6;
Value *tail_3;
Value **destArgs4[3] = {&arg5, &tail_6, &tail_3};
destructValue("core", "461", (Value *)rslt2, 3, destArgs4);

dec_and_free(arg5, 1);
incRef(tail_6, 1);

dec_and_free(tail_3, 1);
return(tail_6);

};};
Value *drop_356(List *closures, Value *coll_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 459\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 461\n$TOCCATA_DIR/core.toc:: 442\n");
#endif
abort();
}
return(drop_354(closures, coll_0, n_1));
};
FnArity drop_355 = {FnArityType, -1, 2, (List *)0, 0, drop_356};
Function drop_357 = {FunctionType, -1, "drop", 1, {&drop_355}};
Value *drop_353 = (Value *)&drop_357;


// --------- drop-while -------------
Value *drop_while_359;
Value *drop_while_360(List *closures, Value *coll_0, Value *pred_1) {
while (1) {
incRef(coll_0, 1);
incRef(pred_1, 1);
Value *rslt2 = proto2Arg(&split_with_Implementations_346, "<nothing>/split-with", coll_0, pred_1, "core", 465);
Value *arg5;
Value *tail_6;
Value *tail_3;
Value **destArgs4[3] = {&arg5, &tail_6, &tail_3};
destructValue("core", "465", (Value *)rslt2, 3, destArgs4);

dec_and_free(arg5, 1);
incRef(tail_6, 1);

dec_and_free(tail_3, 1);
return(tail_6);

};};
FnArity drop_while_361 = {FnArityType, -1, 2, (List *)0, 0, drop_while_360};
Function drop_while_363 = {FunctionType, -1, "drop-while", 1, {&drop_while_361}};
Value *drop_while_359 = (Value *)&drop_while_363;


// --------- take -------------
Value *take_365;
Value *take_366(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 1);
incRef(n_1, 1);
Value *rslt2 = proto2Arg(&split_Implementations_323, "<nothing>/split", coll_0, n_1, "core", 469);
Value *prefix_5;
Value *arg6;
Value *tail_3;
Value **destArgs4[3] = {&prefix_5, &arg6, &tail_3};
destructValue("core", "469", (Value *)rslt2, 3, destArgs4);
incRef(prefix_5, 1);

dec_and_free(arg6, 1);

dec_and_free(tail_3, 1);
return(prefix_5);

};};
Value *take_368(List *closures, Value *coll_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 468\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 469\n$TOCCATA_DIR/core.toc:: 442\n");
#endif
abort();
}
return(take_366(closures, coll_0, n_1));
};
FnArity take_367 = {FnArityType, -1, 2, (List *)0, 0, take_368};
Function take_369 = {FunctionType, -1, "take", 1, {&take_367}};
Value *take_365 = (Value *)&take_369;


// --------- take-while -------------
Value *take_while_371;
Value *take_while_372(List *closures, Value *coll_0, Value *pred_1) {
while (1) {
incRef(coll_0, 1);
incRef(pred_1, 1);
Value *rslt2 = proto2Arg(&split_with_Implementations_346, "<nothing>/split-with", coll_0, pred_1, "core", 473);
Value *prefix_5;
Value *arg6;
Value *tail_3;
Value **destArgs4[3] = {&prefix_5, &arg6, &tail_3};
destructValue("core", "473", (Value *)rslt2, 3, destArgs4);
incRef(prefix_5, 1);

dec_and_free(arg6, 1);

dec_and_free(tail_3, 1);
return(prefix_5);

};};
FnArity take_while_373 = {FnArityType, -1, 2, (List *)0, 0, take_while_372};
Function take_while_375 = {FunctionType, -1, "take-while", 1, {&take_while_373}};
Value *take_while_371 = (Value *)&take_while_375;


// --------- second -------------
Value *second_377;
Value *second_378(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", coll_0, "core", 478);
Value *rslt2 = proto1Arg(&first_Implementations_336, "<nothing>/first", rslt1, "core", 478);
return(rslt2);

};};
FnArity second_379 = {FnArityType, -1, 1, (List *)0, 0, second_378};
Function second_381 = {FunctionType, -1, "second", 1, {&second_379}};
Value *second_377 = (Value *)&second_381;


// proto fn for Indexed/nth
Value *nth_383;
ProtoImpls nth_Implementations_385;
Value *nth_384(List *closures, Value *arg0, Value *arg1);

// proto fn for Indexed/store
Value *store_382;
ProtoImpls store_Implementations_388;
Value *store_387(List *closures, Value *arg0, Value *arg1, Value *arg2);

// proto fn for Hashable/sha1-update
Value *sha1_update_391;
ProtoImpls sha1_update_Implementations_393;
Value *sha1_update_392(List *closures, Value *arg0, Value *arg1);

// proto fn for Hashable/sha1
Value *sha1_390;
ProtoImpls sha1_Implementations_395;
Value *sha1_394(List *closures, Value *arg0);

// proto fn for Associative/vals
Value *vals_400;
ProtoImpls vals_Implementations_402;
Value *vals_401(List *closures, Value *arg0);

// proto fn for Associative/keys
Value *keys_399;
ProtoImpls keys_Implementations_405;
Value *keys_404(List *closures, Value *arg0);

// proto fn for Associative/assoc
Value *assoc_398;
ProtoImpls assoc_Implementations_408;
Value *assoc_407(List *closures, Value *arg0, Value *arg1, Value *arg2);
Integer num0 = {IntegerType, -1, 0};
Value *numPtr0 = (Value *)&num0;
Value *Default_assoc_409(List *closures, Value *m_0, Value *k_1, Value *v_2) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 3);
incRef(v_2, 1);
Value *rslt3 = proto1Arg(&sha1_Implementations_395, "<nothing>/sha1", k_1, "core", 504);
switch (numPtr0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, numPtr0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 504\n$TOCCATA_DIR/core.toc:: 504\n");
#endif
abort();
}
Value *rslt4 = proto5Arg(&assoc_STAR__Implementations_14, "<nothing>/assoc*", m_0, k_1, v_2, rslt3, numPtr0, "core", 504);
return(rslt4);

};};
FnArity Default_assoc_410 = {FnArityType, -1, 3, (List *)0, 0, Default_assoc_409};

// proto fn for Associative/get
Value *get_397;
ProtoImpls get_Implementations_413;
Value *get_412(List *closures, Value *arg0, Value *arg1);
ProtoImpls get_Implementations_415;
Value *get_414(List *closures, Value *arg0, Value *arg1, Value *arg2);

// proto fn for Function/invoke
Value *invoke_417;
ProtoImpls invoke_Implementations_419;
Value *invoke_418(List *closures, Value *arg0);
ProtoImpls invoke_Implementations_421;
Value *invoke_420(List *closures, Value *arg0, Value *arg1);
ProtoImpls invoke_Implementations_423;
Value *invoke_422(List *closures, Value *arg0, Value *arg1, Value *arg2);
ProtoImpls invoke_Implementations_425;
Value *invoke_424(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3);
ProtoImpls invoke_Implementations_427;
Value *invoke_426(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4);
ProtoImpls invoke_Implementations_429;
Value *invoke_428(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5);
ProtoImpls invoke_Implementations_431;
Value *invoke_430(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6);
ProtoImpls invoke_Implementations_433;
Value *invoke_432(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7);
ProtoImpls invoke_Implementations_435;
Value *invoke_434(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7, Value *arg8);

// proto fn for Ord/<*
Value *_LT__STAR__436;
ProtoImpls _LT__STAR__Implementations_438;
Value *_LT__STAR__437(List *closures, Value *arg0, Value *arg1);

// proto fn for Eq/=*
Value *_EQ__STAR__440;
ProtoImpls _EQ__STAR__Implementations_442;
Value *_EQ__STAR__441(List *closures, Value *arg0, Value *arg1);

// --------- sha1-init -------------
Value *sha1_init_445;
Value *sha1_init_446(List *closures) {
while (1) {

// inline
// #line 550 "/home/jim/toccata/core.toc"
return(malloc_sha1());
#

};};
FnArity sha1_init_447 = {FnArityType, -1, 0, (List *)0, 0, sha1_init_446};
Function sha1_init_449 = {FunctionType, -1, "sha1-init", 1, {&sha1_init_447}};
Value *sha1_init_445 = (Value *)&sha1_init_449;


// --------- sha1-finalize -------------
Value *sha1_finalize_451;
Value *sha1_finalize_452(List *closures, Value *ctxt_0) {
while (1) {

// inline
// #line 553 "/home/jim/toccata/core.toc"
return(finalize_sha1(ctxt_0));
#

};};
FnArity sha1_finalize_453 = {FnArityType, -1, 1, (List *)0, 0, sha1_finalize_452};
Function sha1_finalize_455 = {FunctionType, -1, "sha1-finalize", 1, {&sha1_finalize_453}};
Value *sha1_finalize_451 = (Value *)&sha1_finalize_455;


// --------- address-of -------------
Value *address_of_457;
Value *address_of_458(List *closures, Value *x_0) {
while (1) {

// inline
// #line 556 "/home/jim/toccata/core.toc"
return(integerValue((long long)x_0));
#

};};
FnArity address_of_459 = {FnArityType, -1, 1, (List *)0, 0, address_of_458};
Function address_of_461 = {FunctionType, -1, "address-of", 1, {&address_of_459}};
Value *address_of_457 = (Value *)&address_of_461;


// --------- identical -------------
Value *identical_463;
Value *identical_464(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 560 "/home/jim/toccata/core.toc"

  if (x_0 == y_1) {
    dec_and_free(y_1, 1);
    return(maybe((List *)0, (Value *)0, x_0));
  } else {
    dec_and_free(x_0, 1);
    dec_and_free(y_1, 1);
    return(nothing);
  }
#

};};
FnArity identical_465 = {FnArityType, -1, 2, (List *)0, 0, identical_464};
Function identical_467 = {FunctionType, -1, "identical", 1, {&identical_465}};
Value *identical_463 = (Value *)&identical_467;


// --------- fn-name -------------
Value *fn_name_469;
Value *fn_name_470(List *closures, Value *f_0) {
while (1) {

// inline
// #line 572 "/home/jim/toccata/core.toc"

  Value *strVal = stringValue(((Function *)f_0)->name);
  dec_and_free(f_0, 1);
  return(strVal);
#

};};
Value *fn_name_472(List *closures, Value *f_0) {
switch (f_0->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'f' at $TOCCATA_DIR/core.toc, line 570\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_0)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 571\n");
#endif
abort();
}
return(fn_name_470(closures, f_0));
};
FnArity fn_name_471 = {FnArityType, -1, 1, (List *)0, 0, fn_name_472};
Function fn_name_473 = {FunctionType, -1, "fn-name", 1, {&fn_name_471}};
Value *fn_name_469 = (Value *)&fn_name_473;

Value *Integer__EQ__STAR__475(List *closures, Value *, Value *);
Value *Integer__EQ__STAR__475(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 580 "/home/jim/toccata/core.toc"
return(integer_EQ(x_0, y_1));
#

};};
FnArity Integer__EQ__STAR__476 = {FnArityType, -1, 2, (List *)0, 0, Integer__EQ__STAR__475};

// --------- maybe-map -------------
Value *maybe_map_479;
Value *maybe_map_480(List *closures, Value *mv_0, Value *f_1) {
while (1) {

// inline
// #line 584 "/home/jim/toccata/core.toc"
return(maybeMap(mv_0, f_1));
#

};};
Value *maybe_map_482(List *closures, Value *mv_0, Value *f_1) {
switch (mv_0->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 582\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_0)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
return(maybe_map_480(closures, mv_0, f_1));
};
FnArity maybe_map_481 = {FnArityType, -1, 2, (List *)0, 0, maybe_map_482};
Function maybe_map_483 = {FunctionType, -1, "maybe-map", 1, {&maybe_map_481}};
Value *maybe_map_479 = (Value *)&maybe_map_483;


// --------- maybe-apply -------------
Value *maybe_apply_485;
Value *maybe_apply_486(List *closures, Value *mv_0, Value *args_1) {
while (1) {

// inline
// #line 588 "/home/jim/toccata/core.toc"
return(maybeApply(mv_0, args_1));
#

};};
Value *maybe_apply_488(List *closures, Value *mv_0, Value *args_1) {
switch (mv_0->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 586\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_0)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 587\n");
#endif
abort();
}
return(maybe_apply_486(closures, mv_0, args_1));
};
FnArity maybe_apply_487 = {FnArityType, -1, 2, (List *)0, 0, maybe_apply_488};
Function maybe_apply_489 = {FunctionType, -1, "maybe-apply", 1, {&maybe_apply_487}};
Value *maybe_apply_485 = (Value *)&maybe_apply_489;

Value *Maybe__EQ__STAR__502(List *closures, Value *, Value *);
Value *Maybe_get_503(List *closures, Value *, Value *);
Value *Maybe_get_504(List *closures, Value *, Value *, Value *);
Value *Maybe_assoc_505(List *closures, Value *, Value *, Value *);
Value *Maybe_zero_506(List *closures, Value *);
Value *Maybe_invoke_507(List *closures, Value *, Value *, Value *);
Value *Maybe_map_508(List *closures, Value *, Value *);
Value *Maybe_extract_509(List *closures, Value *);
Value *Maybe_extract_510(List *closures, Value *);
Value *Maybe_wrap_511(List *closures, Value *, Value *);
Value *Maybe_apply_STAR__512(List *closures, Value *, Value *);
Value *Maybe_flat_map_513(List *closures, Value *, Value *);
Value *Maybe__EQ__STAR__502(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 617 "/home/jim/toccata/core.toc"
return(maybeEQ(x_0, y_1));
#

};};
FnArity Maybe__EQ__STAR__514 = {FnArityType, -1, 2, (List *)0, 0, Maybe__EQ__STAR__502};
Value *Maybe_get_503(List *closures, Value *m_0, Value *arg1) {
while (1) {
incRef(m_0, 1);

dec_and_free(arg1, 1);
return(m_0);

};};
Value *Maybe_get_517(List *closures, Value *m_0, Value *arg1) {
switch (m_0->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'm'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, m_0)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 509\n");
#endif
abort();
}
return(Maybe_get_503(closures, m_0, arg1));
};
FnArity Maybe_get_516 = {FnArityType, -1, 2, (List *)0, 0, Maybe_get_517};
Value *Maybe_get_504(List *closures, Value *m_0, Value *arg1, Value *not_found_2) {
while (1) {

dec_and_free(arg1, 1);
incRef(not_found_2, 1);
if (!isNothing(m_0,"",0)) {
Value *rslt3 = maybeExtract(m_0);
return(rslt3);
} else {
dec_and_free(m_0, 1);
return(not_found_2);
}

};};
FnArity Maybe_get_518 = {FnArityType, -1, 3, (List *)0, 0, Maybe_get_504};
Value *Maybe_assoc_505(List *closures, Value *arg0, Value *arg1, Value *v_2) {
while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);
incRef(v_2, 1);

// static-fixed
// #line 627 "/home/jim/toccata/core.toc"
Value *rslt3 = maybe_4(empty_list, v_2);
return(rslt3);

};};
FnArity Maybe_assoc_520 = {FnArityType, -1, 3, (List *)0, 0, Maybe_assoc_505};
Value *Maybe_zero_506(List *closures, Value *mv_0) {
while (1) {

dec_and_free(mv_0, 1);
return(nothing_8);

};};
FnArity Maybe_zero_522 = {FnArityType, -1, 1, (List *)0, 0, Maybe_zero_506};
Value *Maybe_invoke_507(List *closures, Value *m_0, Value *t_1, Value *f_2) {
while (1) {

// inline
// #line 614 "/home/jim/toccata/core.toc"
return(maybeInvoke(m_0, t_1, f_2));
#

};};
FnArity Maybe_invoke_524 = {FnArityType, -1, 3, (List *)0, 0, Maybe_invoke_507};
Value *Maybe_map_508(List *closures, Value *mv_0, Value *f_1) {
while (1) {
incRef(mv_0, 1);
incRef(f_1, 1);

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt2 = maybe_map_480(empty_list, mv_0, f_1);
return(rslt2);

};};
Value *Maybe_map_527(List *closures, Value *mv_0, Value *f_1) {
switch (mv_0->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_0)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
return(Maybe_map_508(closures, mv_0, f_1));
};
FnArity Maybe_map_526 = {FnArityType, -1, 2, (List *)0, 0, Maybe_map_527};
Value *Maybe_extract_509(List *closures, Value *mv_0) {
while (1) {

// inline
// #line 596 "/home/jim/toccata/core.toc"
return(maybeExtract(mv_0));
#

};};
FnArity Maybe_extract_528 = {FnArityType, -1, 1, (List *)0, 0, Maybe_extract_509};
Value *Maybe_extract_510(List *closures, Value *mv_0) {
while (1) {

// inline
// #line 599 "/home/jim/toccata/core.toc"
return(maybeExtract(mv_0));
#

};};
FnArity Maybe_extract_530 = {FnArityType, -1, 1, (List *)0, 0, Maybe_extract_510};
Value *Maybe_wrap_511(List *closures, Value *arg0, Value *mv_1) {
while (1) {

dec_and_free(arg0, 1);
incRef(mv_1, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt2 = maybe_4(empty_list, mv_1);
return(rslt2);

};};
FnArity Maybe_wrap_532 = {FnArityType, -1, 2, (List *)0, 0, Maybe_wrap_511};
Value *Maybe_apply_STAR__512(List *closures, Value *mv_0, Value *args_1) {
while (1) {
incRef(mv_0, 1);
incRef(args_1, 1);

// static-fixed
// #line 605 "/home/jim/toccata/core.toc"
Value *rslt2 = maybe_apply_486(empty_list, mv_0, args_1);
return(rslt2);

};};
Value *Maybe_apply_STAR__535(List *closures, Value *mv_0, Value *args_1) {
switch (mv_0->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_0)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 605\n$TOCCATA_DIR/core.toc:: 587\n");
#endif
abort();
}
return(Maybe_apply_STAR__512(closures, mv_0, args_1));
};
FnArity Maybe_apply_STAR__534 = {FnArityType, -1, 2, (List *)0, 0, Maybe_apply_STAR__535};
Value *Maybe_flat_map_513(List *closures, Value *mv_0, Value *f_1) {
while (1) {
incRef(mv_0, 2);
incRef(f_1, 1);
Value *andRslt2;
andRslt2 = mv_0;
if (isNothing(andRslt2,"",0)) {
dec_and_free(f_1, 2);
dec_and_free(mv_0, 2);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt3 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", mv_0, "core", 608);

// dynamic unknown type
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7;
if((f_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 608\n",
extractStr(type_name(empty_list, f_1)), f_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt7 = _fn(_arity->closures, f_1, rslt3);
} else {
FnArity *arity4 = findFnArity(f_1, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
rslt7 = fn6(arity4->closures, rslt3);
} else if(arity4 != (FnArity *)0 && arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(rslt3, dynArgs5);
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_1)->name);
  abort();
}
dec_and_free(f_1, 1);
}
return(rslt7);
}

};};
FnArity Maybe_flat_map_536 = {FnArityType, -1, 2, (List *)0, 0, Maybe_flat_map_513};

// --------- list -------------
Value *list_539;
Value *list_540(List *closures, Value *arg0) {
while (1) {
Value *l_1 = seq(empty_list, arg0);
incRef(l_1, 1);
return(l_1);

};};
Value *list_542(List *closures, Value *args) {
Value *arg0;
Value **destArgs2[1] = {&arg0};
destructValue("core", "630", (Value *)args, 1, destArgs2);
return(list_540(closures, args));
};
FnArity list_541 = {FnArityType, -1, 1, (List *)0, 1, list_542};
Function list_543 = {FunctionType, -1, "list", 1, {&list_541}};
Value *list_539 = (Value *)&list_543;

Value *List__EQ__STAR__560(List *closures, Value *, Value *);
Value *List_seq_561(List *closures, Value *);
Value *List_reverse_562(List *closures, Value *);
Value *List_first_563(List *closures, Value *);
Value *List_rest_564(List *closures, Value *);
Value *List_zero_565(List *closures, Value *);
Value *List_comp_STAR__566(List *closures, Value *, Value *);
Value *List_map_567(List *closures, Value *, Value *);
Value *List_wrap_568(List *closures, Value *, Value *);
Value *List_flatten_569(List *closures, Value *);
Value *List_flat_map_570(List *closures, Value *, Value *);
Value *List_count_571(List *closures, Value *);
Value *List_empty_QM__572(List *closures, Value *);
Value *List_empty_573(List *closures, Value *);
Value *List_conj_574(List *closures, Value *, Value *);
Value *List_filter_575(List *closures, Value *, Value *);
Value *List__EQ__STAR__560(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 669 "/home/jim/toccata/core.toc"
return(listEQ(x_0, y_1));
#

};};
FnArity List__EQ__STAR__576 = {FnArityType, -1, 2, (List *)0, 0, List__EQ__STAR__560};
Value *List_seq_561(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);
return(l_0);

};};
Value *List_seq_579(List *closures, Value *l_0) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 415\n");
#endif
abort();
}
return(List_seq_561(closures, l_0));
};
FnArity List_seq_578 = {FnArityType, -1, 1, (List *)0, 0, List_seq_579};
Value *List_reverse_562(List *closures, Value *l_0) {
while (1) {

// inline
// #line 675 "/home/jim/toccata/core.toc"
return((Value *)reverseList((List *)l_0));
#

};};
FnArity List_reverse_580 = {FnArityType, -1, 1, (List *)0, 0, List_reverse_562};
Value *List_first_563(List *closures, Value *l_0) {
while (1) {

// inline
// #line 678 "/home/jim/toccata/core.toc"
return(car(l_0));
#

};};
FnArity List_first_582 = {FnArityType, -1, 1, (List *)0, 0, List_first_563};
Value *List_rest_564(List *closures, Value *l_0) {
while (1) {

// inline
// #line 681 "/home/jim/toccata/core.toc"
return(cdr(l_0));
#

};};
FnArity List_rest_584 = {FnArityType, -1, 1, (List *)0, 0, List_rest_564};
Value *List_zero_565(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(empty_list_0);

};};
FnArity List_zero_586 = {FnArityType, -1, 1, (List *)0, 0, List_zero_565};
Value *List_comp_STAR__566(List *closures, Value *l_0, Value *ls_1) {
while (1) {
incRef(l_0, 1);
incRef(ls_1, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", ls_1, "core", 666);
Value *l_3 = rslt2;
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 666\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_3, 1);
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt4 = list_map_93(empty_list, l_3, seq_318);
switch (rslt4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 666\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 666\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}

// static-fixed
// #line 666 "/home/jim/toccata/core.toc"
Value *rslt5 = cons_282(empty_list, l_0, rslt4);
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 666\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 666\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 666 "/home/jim/toccata/core.toc"
Value *rslt6 = list_concat_99(empty_list, rslt5);
return(rslt6);

};};
FnArity List_comp_STAR__588 = {FnArityType, -1, 2, (List *)0, 0, List_comp_STAR__566};
Value *List_map_567(List *closures, Value *l_0, Value *f_1) {
while (1) {
incRef(l_0, 1);
incRef(f_1, 1);

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt2 = list_map_93(empty_list, l_0, f_1);
return(rslt2);

};};
Value *List_map_591(List *closures, Value *l_0, Value *f_1) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
return(List_map_567(closures, l_0, f_1));
};
FnArity List_map_590 = {FnArityType, -1, 2, (List *)0, 0, List_map_591};
Value *List_wrap_568(List *closures, Value *x_0, Value *v_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(v_1, 1);

// call-list
// #line 654 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)v_1, newList2);
Value *rslt3 = (Value *)newList2;
return(rslt3);

};};
FnArity List_wrap_592 = {FnArityType, -1, 2, (List *)0, 0, List_wrap_568};
Value *List_flatten_569(List *closures, Value *ls_0) {
while (1) {
incRef(ls_0, 1);

// static-fixed
// #line 657 "/home/jim/toccata/core.toc"
Value *rslt1 = list_concat_99(empty_list, ls_0);
return(rslt1);

};};
Value *List_flatten_595(List *closures, Value *ls_0) {
switch (ls_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'ls'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ls_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 657\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}
return(List_flatten_569(closures, ls_0));
};
FnArity List_flatten_594 = {FnArityType, -1, 1, (List *)0, 0, List_flatten_595};
Value *List_flat_map_570(List *closures, Value *l_0, Value *mf_1) {
while (1) {
incRef(l_0, 1);
incRef(mf_1, 1);

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt2 = list_map_93(empty_list, l_0, mf_1);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 660\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt3 = list_concat_99(empty_list, rslt2);
return(rslt3);

};};
Value *List_flat_map_597(List *closures, Value *l_0, Value *mf_1) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
return(List_flat_map_570(closures, l_0, mf_1));
};
FnArity List_flat_map_596 = {FnArityType, -1, 2, (List *)0, 0, List_flat_map_597};
Value *List_count_571(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);

// static-fixed
// #line 636 "/home/jim/toccata/core.toc"
Value *rslt1 = list_count_81(empty_list, l_0);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 636\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 381\n");
#endif
abort();
}
return(rslt1);

};};
Value *List_count_599(List *closures, Value *l_0) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 636\n$TOCCATA_DIR/core.toc:: 89 \n");
#endif
abort();
}
return(List_count_571(closures, l_0));
};
FnArity List_count_598 = {FnArityType, -1, 1, (List *)0, 0, List_count_599};
Value *List_empty_QM__572(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", l_0, "core", 639);

// type-known for =*
// #line 639 "/home/jim/toccata/core.toc"
Value *rslt3 = Integer__EQ__STAR__475(empty_list, numPtr0, rslt2);
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(empty_list_0, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 640 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, empty_list_0);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 640\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity List_empty_QM__600 = {FnArityType, -1, 1, (List *)0, 0, List_empty_QM__572};
Value *List_empty_573(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(empty_list_0);

};};
FnArity List_empty_602 = {FnArityType, -1, 1, (List *)0, 0, List_empty_573};
Value *List_conj_574(List *closures, Value *l_0, Value *v_1) {
while (1) {
incRef(l_0, 1);
incRef(v_1, 1);

// static-fixed
// #line 644 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, v_1, l_0);
return(rslt2);

};};
Value *List_conj_605(List *closures, Value *l_0, Value *v_1) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 644\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}
return(List_conj_574(closures, l_0, v_1));
};
FnArity List_conj_604 = {FnArityType, -1, 2, (List *)0, 0, List_conj_605};
Value *List_filter_575(List *closures, Value *coll_0, Value *f_1) {
while (1) {

// inline
// #line 647 "/home/jim/toccata/core.toc"
return(listFilter(coll_0, f_1));
#

};};
FnArity List_filter_606 = {FnArityType, -1, 2, (List *)0, 0, List_filter_575};

// --------- list-reduce -------------
Value *list_reduce_609;
Value *list_reduce_610(List *closures, Value *l_0, Value *result_1, Value *f_2) {
while (1) {
incRef(l_0, 5);
incRef(result_1, 3);
incRef(f_2, 3);
Value *andRslt3;
Value *rslt4 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", l_0, "core", 685);
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(result_1, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt3, 1);

// static-fixed
// #line 686 "/home/jim/toccata/core.toc"
Value *rslt5 = maybe_4(empty_list, result_1);
andRslt3 = rslt5;
}
if (!isNothing(andRslt3,"",0)) {
Value *rslt17 = maybeExtract(andRslt3);
return(rslt17);
} else {
dec_and_free(andRslt3, 1);
Value *rslt6 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", l_0, "core", 687);
Value *rslt7 = proto1Arg(&first_Implementations_336, "<nothing>/first", l_0, "core", 687);

// type-known for extract
// #line 687 "/home/jim/toccata/core.toc"
Value *rslt8 = Maybe_extract_510(empty_list, rslt7);

// dynamic unknown type
// #line 687 "/home/jim/toccata/core.toc"
Value *rslt12;
if((f_2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_2->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at core: 687\n",
extractStr(type_name(empty_list, f_2)), f_2->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt12 = _fn(_arity->closures, f_2, result_1, rslt8);
} else {
FnArity *arity9 = findFnArity(f_2, 2);
if(arity9 != (FnArity *)0 && !arity9->variadic) {
FnType2 *fn11 = (FnType2 *)arity9->fn;
rslt12 = fn11(arity9->closures, result_1, rslt8);
} else if(arity9 != (FnArity *)0 && arity9->variadic) {
FnType1 *fn11 = (FnType1 *)arity9->fn;
List *dynArgs10 = empty_list;
dynArgs10 = (List *)listCons(rslt8, dynArgs10);
dynArgs10 = (List *)listCons(result_1, dynArgs10);
rslt12 = fn11(arity9->closures, (Value *)dynArgs10);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_2)->name);
  abort();
}
dec_and_free(f_2, 1);
}
Value *rslt16;
FnArity *arity13 = findFnArity(list_reduce_609, 3);
if(arity13 != (FnArity *)0 && !arity13->variadic) { FnType3 *fn15 = (FnType3 *)arity13->fn;


// dynamic fn type
// #line 687 "/home/jim/toccata/core.toc"
rslt16 = fn15(arity13->closures, rslt6, rslt12, f_2);
} else if(arity13 != (FnArity *)0 && arity13->variadic) { FnType1 *fn15 = (FnType1 *)arity13->fn;
List *dynArgs14 = empty_list;
dynArgs14 = (List *)listCons(f_2, dynArgs14);
dynArgs14 = (List *)listCons(rslt12, dynArgs14);
dynArgs14 = (List *)listCons(rslt6, dynArgs14);

// dynamic fn type
// #line 687 "/home/jim/toccata/core.toc"
rslt16 = fn15(arity13->closures, (Value *)dynArgs14);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)list_reduce_609)->name, "core", 687);
  abort();
}
dec_and_free(list_reduce_609, 1);
return(rslt16);
}

};};
Value *list_reduce_612(List *closures, Value *l_0, Value *result_1, Value *f_2) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 683\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}
return(list_reduce_610(closures, l_0, result_1, f_2));
};
FnArity list_reduce_611 = {FnArityType, -1, 3, (List *)0, 0, list_reduce_612};
Function list_reduce_613 = {FunctionType, -1, "list-reduce", 1, {&list_reduce_611}};
Value *list_reduce_609 = (Value *)&list_reduce_613;

Value *print_err_614;

// --------- list* -------------
Value *list_STAR__616;
Value *list_STAR__619(List *closures) {
while (1) {
return(empty_list_0);

};};
FnArity list_STAR__620 = {FnArityType, -1, 0, (List *)0, 0, list_STAR__619};
Value *list_STAR__618(List *closures, Value *arg_0) {
while (1) {
incRef(arg_0, 1);
return(arg_0);

};};
Value *list_STAR__623(List *closures, Value *arg_0) {
switch (arg_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'arg' at $TOCCATA_DIR/core.toc, line 690\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, arg_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 693\n");
#endif
abort();
}
return(list_STAR__618(closures, arg_0));
};
FnArity list_STAR__622 = {FnArityType, -1, 1, (List *)0, 0, list_STAR__623};

// --------- anon -------------
Value *fn624;
Value *anon_625(List *closures, Value *arg_list_0, Value *arg_1) {
while (1) {
incRef(arg_list_0, 1);
incRef(arg_1, 1);

// static-fixed
// #line 700 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, arg_1, arg_list_0);
return(rslt2);

};};
Value *anon_627(List *closures, Value *arg_list_0, Value *arg_1) {
switch (arg_list_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'arg-list' at $TOCCATA_DIR/core.toc, line 699\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, arg_list_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 700\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}
return(anon_625(closures, arg_list_0, arg_1));
};
FnArity anon_626 = {FnArityType, -1, 2, (List *)0, 0, anon_627};
Function anon_628 = {FunctionType, -1, "anon", 1, {&anon_626}};
Value *fn624 = (Value *)&anon_628;

Value *list_STAR__617(List *closures, Value *arg0) {
while (1) {
Value *arg_3;
Value *args_1;
Value **destArgs2[2] = {&arg_3, &args_1};
destructValue("core", "695", (Value *)arg0, 2, destArgs2);
incRef(arg_3, 1);
incRef(args_1, 1);
switch (args_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 695\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 696\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}

// static-fixed
// #line 696 "/home/jim/toccata/core.toc"
Value *rslt4 = cons_282(empty_list, arg_3, args_1);

// type-known for reverse
// #line 696 "/home/jim/toccata/core.toc"
Value *rslt5 = List_reverse_562(empty_list, rslt4);
Value *arg_list_8;
Value *args_6;
Value **destArgs7[2] = {&arg_list_8, &args_6};
destructValue("core", "696", (Value *)rslt5, 2, destArgs7);
incRef(arg_list_8, 1);
switch (arg_list_8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'arg-list' at $TOCCATA_DIR/core.toc, line 696\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, arg_list_8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 697\n");
#endif
abort();
}
incRef(args_6, 1);
Value *rslt9 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", args_6, arg_list_8, fn624, "core", 698);
return(rslt9);

};};
Value *list_STAR__630(List *closures, Value *args) {
Value *arg0;
Value **destArgs10[1] = {&arg0};
destructValue("core", "690", (Value *)args, 1, destArgs10);
return(list_STAR__617(closures, args));
};
FnArity list_STAR__629 = {FnArityType, -1, 1, (List *)0, 1, list_STAR__630};
Function list_STAR__631 = {FunctionType, -1, "list*", 3, {&list_STAR__620, &list_STAR__622, &list_STAR__629}};
Value *list_STAR__616 = (Value *)&list_STAR__631;

Value *List_vec_634(List *closures, Value *);
Value *List_reduce_635(List *closures, Value *, Value *, Value *);
Value *List_vec_634(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);
Value *rslt1 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", l_0, empty_vector_1, mutate_vect_conj_86, "core", 705);
switch (rslt1->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 705\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Vector' From:             \n$TOCCATA_DIR/core.toc:: 419\n");
#endif
abort();
}
return(rslt1);

};};
FnArity List_vec_636 = {FnArityType, -1, 1, (List *)0, 0, List_vec_634};
Value *List_reduce_635(List *closures, Value *l_0, Value *result_1, Value *f_2) {
while (1) {
incRef(l_0, 1);
incRef(result_1, 1);
incRef(f_2, 1);

// static-fixed
// #line 708 "/home/jim/toccata/core.toc"
Value *rslt3 = list_reduce_610(empty_list, l_0, result_1, f_2);
return(rslt3);

};};
Value *List_reduce_639(List *closures, Value *l_0, Value *result_1, Value *f_2) {
switch (l_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}
return(List_reduce_635(closures, l_0, result_1, f_2));
};
FnArity List_reduce_638 = {FnArityType, -1, 3, (List *)0, 0, List_reduce_639};

// --------- vector -------------
Value *vector_641;
Value *vector_642(List *closures, Value *arg0) {
while (1) {
Value *l_1 = seq(empty_list, arg0);
incRef(l_1, 1);

// type-known for vec
// #line 713 "/home/jim/toccata/core.toc"
Value *rslt2 = List_vec_634(empty_list, l_1);
return(rslt2);

};};
Value *vector_644(List *closures, Value *args) {
Value *arg0;
Value **destArgs3[1] = {&arg0};
destructValue("core", "711", (Value *)args, 1, destArgs3);
return(vector_642(closures, args));
};
FnArity vector_643 = {FnArityType, -1, 1, (List *)0, 1, vector_644};
Function vector_645 = {FunctionType, -1, "vector", 1, {&vector_643}};
Value *vector_641 = (Value *)&vector_645;


// --------- + -------------
Value *_PLUS__647;
Value *_PLUS__650(List *closures) {
while (1) {
return(numPtr0);

};};
FnArity _PLUS__651 = {FnArityType, -1, 0, (List *)0, 0, _PLUS__650};
Value *_PLUS__649(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 1);
incRef(y_1, 1);

// static-fixed
// #line 718 "/home/jim/toccata/core.toc"
Value *rslt2 = add_numbers_105(empty_list, x_0, y_1);
return(rslt2);

};};
Value *_PLUS__654(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 715\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 108\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 715\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 109\n");
#endif
abort();
}
return(_PLUS__649(closures, x_0, y_1));
};
FnArity _PLUS__653 = {FnArityType, -1, 2, (List *)0, 0, _PLUS__654};
Value *_PLUS__648(List *closures, Value *arg0) {
while (1) {
Value *xs_1 = seq(empty_list, arg0);
incRef(xs_1, 1);
switch (xs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, xs_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 720\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}

// type-known for reduce
// #line 720 "/home/jim/toccata/core.toc"
Value *rslt2 = List_reduce_635(empty_list, xs_1, numPtr0, add_numbers_104);
return(rslt2);

};};
Value *_PLUS__656(List *closures, Value *args) {
Value *arg0;
Value **destArgs3[1] = {&arg0};
destructValue("core", "715", (Value *)args, 1, destArgs3);
return(_PLUS__648(closures, args));
};
FnArity _PLUS__655 = {FnArityType, -1, 1, (List *)0, 1, _PLUS__656};
Function _PLUS__657 = {FunctionType, -1, "+", 3, {&_PLUS__651, &_PLUS__653, &_PLUS__655}};
Value *_PLUS__647 = (Value *)&_PLUS__657;


// --------- < -------------
Value *_LT__659;
Value *_LT__661(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 1);
incRef(y_1, 1);
Value *rslt2 = proto2Arg(&_LT__STAR__Implementations_438, "<nothing>/<*", x_0, y_1, "core", 725);
return(rslt2);

};};
FnArity _LT__662 = {FnArityType, -1, 2, (List *)0, 0, _LT__661};

// --------- anon -------------
Value *fn664;
Value *anon_666(List *closures, Value *x_0, Value *arg1) {
while (1) {
incRef(x_0, 1);

dec_and_free(arg1, 1);
return(x_0);

};};
FnArity anon_667 = {FnArityType, -1, 2, (List *)0, 0, anon_666};
Function anon_669 = {FunctionType, -1, "anon", 1, {&anon_667}};
Value *fn664 = (Value *)&anon_669;

Value *_LT__660(List *closures, Value *arg0) {
while (1) {
Value *v_3;
Value *vs_1;
Value **destArgs2[2] = {&v_3, &vs_1};
destructValue("core", "726", (Value *)arg0, 2, destArgs2);
incRef(v_3, 3);
incRef(vs_1, 5);
Value *orRslt4;
Value *andRslt5;

// type-known for empty?
// #line 727 "/home/jim/toccata/core.toc"
Value *rslt6 = List_empty_QM__572(empty_list, vs_1);
andRslt5 = rslt6;
if (isNothing(andRslt5,"",0)) {
dec_and_free(v_3, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt5, 1);

// static-fixed
// #line 728 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_4(empty_list, v_3);
andRslt5 = rslt7;
}
orRslt4 = andRslt5;
if (!isNothing(orRslt4,"",0)) {
dec_and_free(_LT__659, 1);
dec_and_free(fn664, 1);
dec_and_free(maybe_apply_485, 1);
dec_and_free(v_3, 2);
dec_and_free(vs_1, 4);
dec_and_free(maybe_3, 1);
return(orRslt4);
} else {
dec_and_free(orRslt4, 1);
Value *y_10;
Value *tail_8;
Value **destArgs9[2] = {&y_10, &tail_8};
destructValue("core", "729", (Value *)vs_1, 2, destArgs9);
incRef(y_10, 1);

dec_and_free(tail_8, 1);

// static-fixed
// #line 730 "/home/jim/toccata/core.toc"
Value *rslt11 = maybe_4(empty_list, fn664);
Value *mv_12 = rslt11;
switch (mv_12->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 730\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_12)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 605\n$TOCCATA_DIR/core.toc:: 587\n");
#endif
abort();
}
incRef(mv_12, 1);
switch (mv_12->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_12)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 605\n$TOCCATA_DIR/core.toc:: 587\n");
#endif
abort();
}
Value *rslt13 = proto2Arg(&_LT__STAR__Implementations_438, "<nothing>/<*", v_3, y_10, "core", 731);

// call-list
// #line 732 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)vs_1, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 732\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 732\n$TOCCATA_DIR/core.toc:: 732\n$TOCCATA_DIR/core.toc:: 732\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 732\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 732\n$TOCCATA_DIR/core.toc: 732\ncore: 732                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 732\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 732\n$TOCCATA_DIR/core.toc: 732\ncore: 732                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value **rslt15_args[2] = {&rslt15_0, &rslt15_1};
destructValue("$TOCCATA_DIR/core.toc", "732", (Value *)rslt15, 2, rslt15_args);
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
}
Value *rslt16 = proto2Arg(&apply_STAR__Implementations_275, "<nothing>/apply*", _LT__659, rslt15, "core", 732);

// call-list
// #line 731 "/home/jim/toccata/core.toc"
List *newList17 = empty_list;
newList17 = listCons((Value *)rslt16, newList17);
newList17 = listCons((Value *)rslt13, newList17);
Value *rslt18 = (Value *)newList17;
Value *args_19 = rslt18;
incRef(args_19, 1);

// static-fixed
// #line 605 "/home/jim/toccata/core.toc"
Value *rslt20 = maybe_apply_486(empty_list, mv_12, args_19);
return(rslt20);
}

};};
Value *_LT__671(List *closures, Value *args) {
Value *arg0;
Value **destArgs21[1] = {&arg0};
destructValue("core", "722", (Value *)args, 1, destArgs21);
return(_LT__660(closures, args));
};
FnArity _LT__670 = {FnArityType, -1, 1, (List *)0, 1, _LT__671};
Function _LT__672 = {FunctionType, -1, "<", 2, {&_LT__662, &_LT__670}};
Value *_LT__659 = (Value *)&_LT__672;


// --------- > -------------
Value *_GT__674;
Value *anon_679(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs2[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs2);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
return(val1);

};};
Value *_GT__676(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 2);
incRef(y_1, 1);
Value *rslt2 = proto2Arg(&_LT__STAR__Implementations_438, "<nothing>/<*", y_1, x_0, "core", 737);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 737\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_679;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)x_0, (List *)anon_4->closures);
Function *anon_682 = malloc_function(1);
anon_682->name = "anon";
anon_682->arityCount = 1;
anon_682->arities[0] = anon_4;
Value *fn678 = (Value *)anon_682;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt5 = maybe_map_480(empty_list, mv_3, fn678);
return(rslt5);

};};
FnArity _GT__683 = {FnArityType, -1, 2, (List *)0, 0, _GT__676};
Value *_GT__675(List *closures, Value *arg0) {
while (1) {
Value *v_3;
Value *vs_1;
Value **destArgs2[2] = {&v_3, &vs_1};
destructValue("core", "738", (Value *)arg0, 2, destArgs2);
incRef(v_3, 3);
incRef(vs_1, 5);
Value *orRslt4;
Value *andRslt5;

// type-known for empty?
// #line 739 "/home/jim/toccata/core.toc"
Value *rslt6 = List_empty_QM__572(empty_list, vs_1);
andRslt5 = rslt6;
if (isNothing(andRslt5,"",0)) {
dec_and_free(v_3, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt5, 1);

// static-fixed
// #line 740 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_4(empty_list, v_3);
andRslt5 = rslt7;
}
orRslt4 = andRslt5;
if (!isNothing(orRslt4,"",0)) {
dec_and_free(_GT__674, 2);
dec_and_free(v_3, 2);
dec_and_free(vs_1, 4);
return(orRslt4);
} else {
dec_and_free(orRslt4, 1);
Value *y_10;
Value *tail_8;
Value **destArgs9[2] = {&y_10, &tail_8};
destructValue("core", "741", (Value *)vs_1, 2, destArgs9);
incRef(y_10, 1);

dec_and_free(tail_8, 1);
Value *andRslt11;

// call-list
// #line 742 "/home/jim/toccata/core.toc"
List *newList12 = empty_list;
newList12 = listCons((Value *)vs_1, newList12);
Value *rslt13 = (Value *)newList12;
switch (rslt13->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 742\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 742\n$TOCCATA_DIR/core.toc:: 742\n$TOCCATA_DIR/core.toc:: 742\n");
#endif
abort();
}
switch (rslt13->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 742\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 742\n$TOCCATA_DIR/core.toc: 742\ncore: 742                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt13, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 742\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt13))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 742\n$TOCCATA_DIR/core.toc: 742\ncore: 742                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt13, 1);
Value *rslt13_0;
Value *rslt13_1;
Value **rslt13_args[2] = {&rslt13_0, &rslt13_1};
destructValue("$TOCCATA_DIR/core.toc", "742", (Value *)rslt13, 2, rslt13_args);
dec_and_free(rslt13_0, 1);
dec_and_free(rslt13_1, 1);
}
Value *rslt14 = proto2Arg(&apply_STAR__Implementations_275, "apply*", _GT__674, rslt13, "core", 742);
if (rslt14->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",742);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt14)));
abort();
}
andRslt11 = rslt14;
if (isNothing(andRslt11,"",0)) {
dec_and_free(_GT__674, 1);
dec_and_free(v_3, 2);
dec_and_free(y_10, 2);
return(nothing);
} else {
dec_and_free(andRslt11, 1);
Value *rslt18;
FnArity *arity15 = findFnArity(_GT__674, 2);
if(arity15 != (FnArity *)0 && !arity15->variadic) { FnType2 *fn17 = (FnType2 *)arity15->fn;


// dynamic fn type
// #line 743 "/home/jim/toccata/core.toc"
rslt18 = fn17(arity15->closures, v_3, y_10);
} else if(arity15 != (FnArity *)0 && arity15->variadic) { FnType1 *fn17 = (FnType1 *)arity15->fn;
List *dynArgs16 = empty_list;
dynArgs16 = (List *)listCons(y_10, dynArgs16);
dynArgs16 = (List *)listCons(v_3, dynArgs16);

// dynamic fn type
// #line 743 "/home/jim/toccata/core.toc"
rslt18 = fn17(arity15->closures, (Value *)dynArgs16);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)_GT__674)->name, "core", 743);
  abort();
}
dec_and_free(_GT__674, 1);
return(rslt18);
}
orRslt4 = andRslt11;
}

};};
Value *_GT__686(List *closures, Value *args) {
Value *arg0;
Value **destArgs19[1] = {&arg0};
destructValue("core", "734", (Value *)args, 1, destArgs19);
return(_GT__675(closures, args));
};
FnArity _GT__685 = {FnArityType, -1, 1, (List *)0, 1, _GT__686};
Function _GT__687 = {FunctionType, -1, ">", 2, {&_GT__683, &_GT__685}};
Value *_GT__674 = (Value *)&_GT__687;


// --------- <= -------------
Value *_LT__EQ__689;
Value *_LT__EQ__692(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 748 "/home/jim/toccata/core.toc"
Value *rslt1 = maybe_4(empty_list, x_0);
return(rslt1);

};};
FnArity _LT__EQ__693 = {FnArityType, -1, 1, (List *)0, 0, _LT__EQ__692};
Value *_LT__EQ__691(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 3);
incRef(y_1, 3);
Value *orRslt2;
Value *rslt3 = proto2Arg(&_LT__STAR__Implementations_438, "<nothing>/<*", x_0, y_1, "core", 749);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(y_1, 2);
dec_and_free(x_0, 2);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *rslt4 = proto2Arg(&_EQ__STAR__Implementations_442, "<nothing>/=*", x_0, y_1, "core", 749);
return(rslt4);
}

};};
FnArity _LT__EQ__695 = {FnArityType, -1, 2, (List *)0, 0, _LT__EQ__691};
Value *_LT__EQ__690(List *closures, Value *arg0) {
while (1) {
Value *x_3;
Value *y_4;
Value *ys_1;
Value **destArgs2[3] = {&x_3, &y_4, &ys_1};
destructValue("core", "750", (Value *)arg0, 3, destArgs2);
incRef(x_3, 3);
incRef(y_4, 5);
incRef(ys_1, 1);
Value *andRslt5;
Value *orRslt6;
Value *rslt7 = proto2Arg(&_LT__STAR__Implementations_438, "<nothing>/<*", x_3, y_4, "core", 751);
orRslt6 = rslt7;
if (!isNothing(orRslt6,"",0)) {
dec_and_free(x_3, 2);
dec_and_free(y_4, 2);

} else {
dec_and_free(orRslt6, 1);
Value *rslt8 = proto2Arg(&_EQ__STAR__Implementations_442, "<nothing>/=*", x_3, y_4, "core", 751);
orRslt6 = rslt8;
}
andRslt5 = orRslt6;
if (isNothing(andRslt5,"",0)) {
dec_and_free(ys_1, 2);
dec_and_free(_LT__EQ__689, 1);
dec_and_free(y_4, 2);
return(nothing);
} else {
dec_and_free(andRslt5, 1);

// call-list
// #line 752 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)ys_1, newList9);
newList9 = listCons((Value *)y_4, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 752\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 752\n$TOCCATA_DIR/core.toc:: 752\n$TOCCATA_DIR/core.toc:: 752\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 752\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 752\n$TOCCATA_DIR/core.toc: 752\ncore: 752                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 752\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 752\n$TOCCATA_DIR/core.toc: 752\ncore: 752                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value *rslt10_2;
Value **rslt10_args[3] = {&rslt10_0, &rslt10_1, &rslt10_2};
destructValue("$TOCCATA_DIR/core.toc", "752", (Value *)rslt10, 3, rslt10_args);
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
dec_and_free(rslt10_2, 1);
}
Value *rslt11 = proto2Arg(&apply_STAR__Implementations_275, "apply*", _LT__EQ__689, rslt10, "core", 752);
return(rslt11);
}

};};
Value *_LT__EQ__698(List *closures, Value *args) {
Value *arg0;
Value **destArgs12[1] = {&arg0};
destructValue("core", "745", (Value *)args, 1, destArgs12);
return(_LT__EQ__690(closures, args));
};
FnArity _LT__EQ__697 = {FnArityType, -1, 1, (List *)0, 1, _LT__EQ__698};
Function _LT__EQ__699 = {FunctionType, -1, "<=", 3, {&_LT__EQ__693, &_LT__EQ__695, &_LT__EQ__697}};
Value *_LT__EQ__689 = (Value *)&_LT__EQ__699;


// --------- = -------------
Value *_EQ__701;
Value *_EQ__704(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);

// static-fixed
// #line 757 "/home/jim/toccata/core.toc"
Value *rslt1 = maybe_4(empty_list, v_0);
return(rslt1);

};};
FnArity _EQ__705 = {FnArityType, -1, 1, (List *)0, 0, _EQ__704};
Value *_EQ__703(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 1);
incRef(y_1, 1);
Value *rslt2 = proto2Arg(&_EQ__STAR__Implementations_442, "<nothing>/=*", x_0, y_1, "core", 758);
return(rslt2);

};};
FnArity _EQ__707 = {FnArityType, -1, 2, (List *)0, 0, _EQ__703};
Value *_EQ__702(List *closures, Value *arg0) {
while (1) {
Value *x_3;
Value *y_4;
Value *ys_1;
Value **destArgs2[3] = {&x_3, &y_4, &ys_1};
destructValue("core", "759", (Value *)arg0, 3, destArgs2);
incRef(x_3, 1);
incRef(y_4, 3);
incRef(ys_1, 1);
Value *andRslt5;
Value *rslt6 = proto2Arg(&_EQ__STAR__Implementations_442, "<nothing>/=*", x_3, y_4, "core", 760);
andRslt5 = rslt6;
if (isNothing(andRslt5,"",0)) {
dec_and_free(ys_1, 2);
dec_and_free(_EQ__701, 1);
dec_and_free(y_4, 2);
return(nothing);
} else {
dec_and_free(andRslt5, 1);

// call-list
// #line 761 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)ys_1, newList7);
newList7 = listCons((Value *)y_4, newList7);
Value *rslt8 = (Value *)newList7;
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 761\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 761\n$TOCCATA_DIR/core.toc:: 761\n$TOCCATA_DIR/core.toc:: 761\n");
#endif
abort();
}
switch (rslt8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 761\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 761\n$TOCCATA_DIR/core.toc: 761\ncore: 761                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 761\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 761\n$TOCCATA_DIR/core.toc: 761\ncore: 761                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8, 1);
Value *rslt8_0;
Value *rslt8_1;
Value *rslt8_2;
Value **rslt8_args[3] = {&rslt8_0, &rslt8_1, &rslt8_2};
destructValue("$TOCCATA_DIR/core.toc", "761", (Value *)rslt8, 3, rslt8_args);
dec_and_free(rslt8_0, 1);
dec_and_free(rslt8_1, 1);
dec_and_free(rslt8_2, 1);
}
Value *rslt9 = proto2Arg(&apply_STAR__Implementations_275, "apply*", _EQ__701, rslt8, "core", 761);
return(rslt9);
}

};};
Value *_EQ__710(List *closures, Value *args) {
Value *arg0;
Value **destArgs10[1] = {&arg0};
destructValue("core", "754", (Value *)args, 1, destArgs10);
return(_EQ__702(closures, args));
};
FnArity _EQ__709 = {FnArityType, -1, 1, (List *)0, 1, _EQ__710};
Function _EQ__711 = {FunctionType, -1, "=", 3, {&_EQ__705, &_EQ__707, &_EQ__709}};
Value *_EQ__701 = (Value *)&_EQ__711;


// --------- some -------------
Value *some_713;
Value *some_714(List *closures, Value *coll_0, Value *f_1) {
while (1) {
incRef(coll_0, 5);
incRef(f_1, 3);
Value *andRslt2;
Value *rslt3 = proto1Arg(&count_Implementations_310, "<nothing>/count", coll_0, "core", 764);

// static-fixed
// #line 764 "/home/jim/toccata/core.toc"
Value *rslt4 = _LT__661(empty_list, numPtr0, rslt3);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",764);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt2 = rslt4;
if (isNothing(andRslt2,"",0)) {
dec_and_free(f_1, 4);
dec_and_free(coll_0, 4);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *orRslt5;
Value *rslt6 = proto1Arg(&first_Implementations_336, "<nothing>/first", coll_0, "core", 765);
Value *mv_7 = rslt6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(mv_7, 2);
dec_and_free(f_1, 2);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);

// dynamic unknown type
// #line 765 "/home/jim/toccata/core.toc"
Value *rslt13;
if((f_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 765\n",
extractStr(type_name(empty_list, f_1)), f_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, f_1, rslt9);
} else {
FnArity *arity10 = findFnArity(f_1, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, rslt9);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(rslt9, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_1)->name);
  abort();
}
dec_and_free(f_1, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",765);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt8 = rslt13;
}
orRslt5 = andRslt8;
if (!isNothing(orRslt5,"",0)) {
dec_and_free(f_1, 2);
dec_and_free(coll_0, 2);
return(orRslt5);
} else {
dec_and_free(orRslt5, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", coll_0, "core", 766);

// recursive-fixed
// #line 766 "/home/jim/toccata/core.toc"
coll_0 = rslt14;
f_1 = f_1;
}
andRslt2 = orRslt5;
}

};};
FnArity some_715 = {FnArityType, -1, 2, (List *)0, 0, some_714};
Function some_717 = {FunctionType, -1, "some", 1, {&some_715}};
Value *some_713 = (Value *)&some_717;


// --------- partial -------------
Value *partial_719;
Value *anon_722(List *closures, Value *arg0) {

while (1) {
Value *more_args_1 = seq(empty_list, arg0);
incRef(more_args_1, 1);
Value *val3;
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs10[3] = {&val3, &val2, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs10);
incRef(val3, 1);
incRef(val2, 1);

dec_and_free(closuresTail, 1);

// call-list
// #line 771 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)more_args_1, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 771\n$TOCCATA_DIR/core.toc:: 771\n$TOCCATA_DIR/core.toc:: 771\n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 771\n$TOCCATA_DIR/core.toc: 771\ncore: 771                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 771\n$TOCCATA_DIR/core.toc: 771\ncore: 771                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value **rslt5_args[2] = {&rslt5_0, &rslt5_1};
destructValue("$TOCCATA_DIR/core.toc", "771", (Value *)rslt5, 2, rslt5_args);
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
}

// type-known for comp*
// #line 771 "/home/jim/toccata/core.toc"
Value *rslt6 = List_comp_STAR__566(empty_list, val3, rslt5);

// call-list
// #line 771 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)rslt6, newList7);
Value *rslt8 = (Value *)newList7;
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 771\n$TOCCATA_DIR/core.toc:: 771\n$TOCCATA_DIR/core.toc:: 771\n");
#endif
abort();
}
switch (rslt8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 771\n$TOCCATA_DIR/core.toc: 771\ncore: 771                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 771\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 771\n$TOCCATA_DIR/core.toc: 771\ncore: 771                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8, 1);
Value *rslt8_0;
Value *rslt8_1;
Value **rslt8_args[2] = {&rslt8_0, &rslt8_1};
destructValue("$TOCCATA_DIR/core.toc", "771", (Value *)rslt8, 2, rslt8_args);
dec_and_free(rslt8_0, 1);
dec_and_free(rslt8_1, 1);
}
Value *rslt9 = proto2Arg(&apply_STAR__Implementations_275, "apply*", val2, rslt8, "core", 771);
return(rslt9);

};};
Value *partial_720(List *closures, Value *arg0) {
while (1) {
Value *f_3;
Value *args_1;
Value **destArgs2[2] = {&f_3, &args_1};
destructValue("core", "768", (Value *)arg0, 2, destArgs2);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 1;
anon_4->fn = anon_722;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)f_3, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)args_1, (List *)anon_4->closures);
Function *anon_725 = malloc_function(1);
anon_725->name = "anon";
anon_725->arityCount = 1;
anon_725->arities[0] = anon_4;
Value *fn721 = (Value *)anon_725;
return(fn721);

};};
Value *partial_727(List *closures, Value *args) {
Value *arg0;
Value **destArgs5[1] = {&arg0};
destructValue("core", "768", (Value *)args, 1, destArgs5);
return(partial_720(closures, args));
};
FnArity partial_726 = {FnArityType, -1, 1, (List *)0, 1, partial_727};
Function partial_728 = {FunctionType, -1, "partial", 1, {&partial_726}};
Value *partial_719 = (Value *)&partial_728;

Value *arityImpl730(List *closures, Value *, Value *);
Integer num1 = {IntegerType, -1, 2};
Value *numPtr1 = (Value *)&num1;
Integer num2 = {IntegerType, -1, 5};
Value *numPtr2 = (Value *)&num2;
Value *arityImpl730(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
List *newList2 = empty_list;
newList2 = listCons((Value *)numPtr2, newList2);
newList2 = listCons((Value *)numPtr1, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From: \n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value *rslt3_2;
Value **rslt3_args[3] = {&rslt3_0, &rslt3_1, &rslt3_2};
destructValue("", "0", (Value *)rslt3, 3, rslt3_args);
switch (rslt3_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
switch (rslt3_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_1)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
dec_and_free(rslt3_2, 1);
}
Value *rslt4 = reified_get_type_31(empty_list, y_1);
List *newList5 = empty_list;
newList5 = listCons((Value *)rslt4, newList5);
newList5 = listCons((Value *)_EQ__STAR__440, newList5);
Value *rslt6 = (Value *)newList5;
Value *rslt7 = partial_720(empty_list, (Value *)rslt6);
Value *rslt8 = some_714(empty_list, rslt3, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt8);

};};
FnArity staticArity731 = {FnArityType, -1, 2, (List *)0, 0, arityImpl730};
ReifiedVal reifiedStatic733 = {28, -1, (Value *)0, 0, {}};
Value *reifiedPtr734 = (Value *)&reifiedStatic733;
Value *String_count_736(List *closures, Value *);
Value *String_count_736(List *closures, Value *s_0) {
while (1) {

// inline
// #line 779 "/home/jim/toccata/core.toc"
return(strCount(s_0));
#

};};
FnArity String_count_737 = {FnArityType, -1, 1, (List *)0, 0, String_count_736};
Value *String_count_740(List *closures, Value *);
Value *String_count_740(List *closures, Value *s_0) {
while (1) {

// inline
// #line 779 "/home/jim/toccata/core.toc"
return(strCount(s_0));
#

};};
FnArity String_count_741 = {FnArityType, -1, 1, (List *)0, 0, String_count_740};

// --------- str-append -------------
Value *str_append_744;
Value *str_append_745(List *closures, Value *dest_0, Value *src_1) {
while (1) {

// inline
// #line 784 "/home/jim/toccata/core.toc"

  String *s_1 = (String *)dest_0;
  if (src_1->type == StringBufferType) {
    String *s2 = (String *)src_1;
    strncat(s_1->buffer, s2->buffer, s2->len);
    s_1->len += s2->len;
  } else if (src_1->type == SubStringType) {
    SubString *s2 = (SubString *)src_1;
    strncat(s_1->buffer, s2->buffer, s2->len);
    s_1->len += s2->len;
  }
  dec_and_free(dest_0, 1);
  dec_and_free(src_1, 1);
  return(nothing);
#

};};
Value *str_append_747(List *closures, Value *dest_0, Value *src_1) {
switch (dest_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest' at $TOCCATA_DIR/core.toc, line 781\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, dest_0)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 782\n");
#endif
abort();
}
switch (src_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src' at $TOCCATA_DIR/core.toc, line 781\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, src_1)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 783\n");
#endif
abort();
}
return(str_append_745(closures, dest_0, src_1));
};
FnArity str_append_746 = {FnArityType, -1, 2, (List *)0, 0, str_append_747};
Function str_append_748 = {FunctionType, -1, "str-append", 1, {&str_append_746}};
Value *str_append_744 = (Value *)&str_append_748;


// --------- pr* -------------
Value *pr_STAR__750;
Value *pr_STAR__751(List *closures, Value *str_0) {
while (1) {

// inline
// #line 801 "/home/jim/toccata/core.toc"
return(prSTAR(str_0));
#

};};
Value *pr_STAR__753(List *closures, Value *str_0) {
switch (str_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'str' at $TOCCATA_DIR/core.toc, line 799\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, str_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 800\n");
#endif
abort();
}
return(pr_STAR__751(closures, str_0));
};
FnArity pr_STAR__752 = {FnArityType, -1, 1, (List *)0, 0, pr_STAR__753};
Function pr_STAR__754 = {FunctionType, -1, "pr*", 1, {&pr_STAR__752}};
Value *pr_STAR__750 = (Value *)&pr_STAR__754;


// --------- pr-err* -------------
Value *pr_err_STAR__756;
Value *pr_err_STAR__757(List *closures, Value *str_0) {
while (1) {

// inline
// #line 805 "/home/jim/toccata/core.toc"
return(prErrSTAR(str_0));
#

};};
Value *pr_err_STAR__759(List *closures, Value *str_0) {
switch (str_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'str' at $TOCCATA_DIR/core.toc, line 803\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, str_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 804\n");
#endif
abort();
}
return(pr_err_STAR__757(closures, str_0));
};
FnArity pr_err_STAR__758 = {FnArityType, -1, 1, (List *)0, 0, pr_err_STAR__759};
Function pr_err_STAR__760 = {FunctionType, -1, "pr-err*", 1, {&pr_err_STAR__758}};
Value *pr_err_STAR__756 = (Value *)&pr_err_STAR__760;


// --------- escape-chars -------------
Value *escape_chars_762;
Value *escape_chars_763(List *closures, Value *s_0) {
while (1) {

// inline
// #line 809 "/home/jim/toccata/core.toc"
return(escapeChars(s_0));
#

};};
Value *escape_chars_765(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's' at $TOCCATA_DIR/core.toc, line 807\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 808\n");
#endif
abort();
}
return(escape_chars_763(closures, s_0));
};
FnArity escape_chars_764 = {FnArityType, -1, 1, (List *)0, 0, escape_chars_765};
Function escape_chars_766 = {FunctionType, -1, "escape-chars", 1, {&escape_chars_764}};
Value *escape_chars_762 = (Value *)&escape_chars_766;


// --------- char -------------
Value *char_768;
Value *char_769(List *closures, Value *n_0) {
while (1) {

// inline
// #line 814 "/home/jim/toccata/core.toc"

  String *strVal = malloc_string(2);
  strVal->len = 1;
  strVal->buffer[0] = ((Integer *)n_0)->numVal;
  strVal->buffer[1] = 0;
  return((Value *)strVal);

#

};};
Value *char_771(List *closures, Value *n_0) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 811\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 813\n");
#endif
abort();
}
return(char_769(closures, n_0));
};
FnArity char_770 = {FnArityType, -1, 1, (List *)0, 0, char_771};
Function char_772 = {FunctionType, -1, "char", 1, {&char_770}};
Value *char_768 = (Value *)&char_772;


// --------- char-code -------------
Value *char_code_774;
Value *char_code_775(List *closures, Value *c_0) {
while (1) {

// inline
// #line 824 "/home/jim/toccata/core.toc"

   if (c_0->type == StringBufferType) {
     String *s = (String *)c_0;
     Value *numVal = integerValue((unsigned char)s->buffer[0]);
     dec_and_free(c_0, 1);
     return(numVal);
   } else if (c_0->type == SubStringType) {
     SubString *s = (SubString *)c_0;
     Value *numVal = integerValue((unsigned char)s->buffer[0]);
     dec_and_free(c_0, 1);
     return(numVal);
   }

#

};};
Value *char_code_777(List *closures, Value *c_0) {
switch (c_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c' at $TOCCATA_DIR/core.toc, line 821\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, c_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 823\n");
#endif
abort();
}
return(char_code_775(closures, c_0));
};
FnArity char_code_776 = {FnArityType, -1, 1, (List *)0, 0, char_code_777};
Function char_code_778 = {FunctionType, -1, "char-code", 1, {&char_code_776}};
Value *char_code_774 = (Value *)&char_code_778;


// --------- subs -------------
Value *subs_780;
Value *subs_782(List *closures, Value *src_0, Value *index_1) {
while (1) {

// inline
// #line 842 "/home/jim/toccata/core.toc"
return(subs2(src_0, index_1));
#

};};
Value *subs_784(List *closures, Value *src_0, Value *index_1) {
switch (src_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src' at $TOCCATA_DIR/core.toc, line 837\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, src_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 840\n");
#endif
abort();
}
switch (index_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index' at $TOCCATA_DIR/core.toc, line 837\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, index_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 841\n");
#endif
abort();
}
return(subs_782(closures, src_0, index_1));
};
FnArity subs_783 = {FnArityType, -1, 2, (List *)0, 0, subs_784};
Value *subs_781(List *closures, Value *src_0, Value *index_1, Value *length_2) {
while (1) {

// inline
// #line 847 "/home/jim/toccata/core.toc"
return(subs3(src_0, index_1, length_2));
#

};};
Value *subs_786(List *closures, Value *src_0, Value *index_1, Value *length_2) {
switch (src_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src' at $TOCCATA_DIR/core.toc, line 837\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, src_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 844\n");
#endif
abort();
}
switch (index_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index' at $TOCCATA_DIR/core.toc, line 837\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, index_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 845\n");
#endif
abort();
}
switch (length_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'length' at $TOCCATA_DIR/core.toc, line 837\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, length_2)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 846\n");
#endif
abort();
}
return(subs_781(closures, src_0, index_1, length_2));
};
FnArity subs_785 = {FnArityType, -1, 3, (List *)0, 0, subs_786};
Function subs_787 = {FunctionType, -1, "subs", 2, {&subs_783, &subs_785}};
Value *subs_780 = (Value *)&subs_787;


// --------- symbol -------------
Value *symbol_789;
Value *symbol_790(List *closures, Value *sym_str_0) {
while (1) {

// inline
// #line 852 "/home/jim/toccata/core.toc"
return(symbol(sym_str_0));
#

};};
Value *symbol_792(List *closures, Value *sym_str_0) {
switch (sym_str_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'sym-str' at $TOCCATA_DIR/core.toc, line 849\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, sym_str_0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 851\n");
#endif
abort();
}
return(symbol_790(closures, sym_str_0));
};
FnArity symbol_791 = {FnArityType, -1, 1, (List *)0, 0, symbol_792};
Function symbol_793 = {FunctionType, -1, "symbol", 1, {&symbol_791}};
Value *symbol_789 = (Value *)&symbol_793;


// proto fn for Stringable/string-list
Value *string_list_795;
ProtoImpls string_list_Implementations_797;
Value *string_list_796(List *closures, Value *arg0);

// proto fn for Stringable/show*
Value *show_STAR__794;
ProtoImpls show_STAR__Implementations_800;
Value *show_STAR__799(List *closures, Value *arg0, Value *arg1);

// --------- show -------------
Value *show_803;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[1];
} str0 = {StringBufferType, -1, 0, 0, ""};
Value *strPtr0 = (Value *)&str0;
Value *show_804(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
switch (strPtr0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 867\n$TOCCATA_DIR/core.toc:: 861\n");
#endif
abort();
}
switch (strPtr0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr0)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 867\n$TOCCATA_DIR/core.toc:: 867\n");
#endif
abort();
}
Value *rslt1 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", x_0, strPtr0, "core", 867);
return(rslt1);

};};
FnArity show_805 = {FnArityType, -1, 1, (List *)0, 0, show_804};
Function show_807 = {FunctionType, -1, "show", 1, {&show_805}};
Value *show_803 = (Value *)&show_807;

Value *List_to_str_809(List *closures, Value *);

// --------- anon -------------
Value *fn810;
Value *anon_811(List *closures, Value *len_0, Value *s_1) {
while (1) {
incRef(len_0, 1);
incRef(s_1, 1);
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_1, "core", 875);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 875\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 875\n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 109\n");
#endif
abort();
}

// static-fixed
// #line 875 "/home/jim/toccata/core.toc"
Value *rslt3 = _PLUS__649(empty_list, len_0, rslt2);
return(rslt3);

};};
Value *anon_813(List *closures, Value *len_0, Value *s_1) {
switch (len_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 873\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, len_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 875\n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 108\n");
#endif
abort();
}
switch (s_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's' at $TOCCATA_DIR/core.toc, line 873\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_1)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 874\n");
#endif
abort();
}
return(anon_811(closures, len_0, s_1));
};
FnArity anon_812 = {FnArityType, -1, 2, (List *)0, 0, anon_813};
Function anon_814 = {FunctionType, -1, "anon", 1, {&anon_812}};
Value *fn810 = (Value *)&anon_814;

Value *anon_817(List *closures, Value *s_0) {

while (1) {
incRef(s_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest'\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 878\n$TOCCATA_DIR/core.toc:: 782\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 878 "/home/jim/toccata/core.toc"
Value *rslt2 = str_append_745(empty_list, val1, s_0);
return(rslt2);

};};
Value *List_to_str_809(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", coll_0, string_list_795, "core", 872);
switch (rslt1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 872\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 872\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}

// static-fixed
// #line 872 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, strPtr0, rslt1);
Value *ss_list_3 = rslt2;
switch (ss_list_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 872\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_list_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 873\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}
incRef(ss_list_3, 2);
switch (ss_list_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 872\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_list_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 873\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}

// type-known for reduce
// #line 873 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, ss_list_3, numPtr0, fn810);
Value *new_len_5 = rslt4;
switch (new_len_5->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 873\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, new_len_5)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 876\n$TOCCATA_DIR/core.toc:: 117\n");
#endif
abort();
}
incRef(new_len_5, 1);
switch (new_len_5->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 873\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, new_len_5)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 876\n$TOCCATA_DIR/core.toc:: 117\n");
#endif
abort();
}

// static-fixed
// #line 876 "/home/jim/toccata/core.toc"
Value *rslt6 = str_malloc_111(empty_list, new_len_5);
Value *new_str_7 = rslt6;
switch (new_str_7->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest' at $TOCCATA_DIR/core.toc, line 876\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, new_str_7)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 878\n$TOCCATA_DIR/core.toc:: 782\n");
#endif
abort();
}
incRef(new_str_7, 2);
switch (new_str_7->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest' at $TOCCATA_DIR/core.toc, line 876\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, new_str_7)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 878\n$TOCCATA_DIR/core.toc:: 782\n");
#endif
abort();
}
Value *l_8 = ss_list_3;
incRef(l_8, 1);
switch (l_8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_9 = malloc_fnArity();
anon_9->count = 1;
anon_9->variadic = 0;
anon_9->fn = anon_817;
anon_9->closures = empty_list;
anon_9->closures = listCons((Value *)new_str_7, (List *)anon_9->closures);
Function *anon_820 = malloc_function(1);
anon_820->name = "anon";
anon_820->arityCount = 1;
anon_820->arities[0] = anon_9;
Value *fn816 = (Value *)anon_820;

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt10 = list_map_93(empty_list, l_8, fn816);

dec_and_free(rslt10, 1);
return(new_str_7);

};};
FnArity List_to_str_821 = {FnArityType, -1, 1, (List *)0, 0, List_to_str_809};
Value *Function_string_list_830(List *closures, Value *);
Value *Function_show_STAR__831(List *closures, Value *, Value *);
Value *Function__EQ__STAR__832(List *closures, Value *, Value *);
Value *Function_type_name_833(List *closures, Value *);
Value *Function_comp_STAR__834(List *closures, Value *, Value *);
Value *Function_sha1_835(List *closures, Value *);
Value *Function_apply_STAR__836(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[11];
} str1 = {StringBufferType, -1, 10, 0, "<Function "};
Value *strPtr1 = (Value *)&str1;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str2 = {StringBufferType, -1, 1, 0, ">"};
Value *strPtr2 = (Value *)&str2;
Value *Function_string_list_830(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);

// static-fixed
// #line 889 "/home/jim/toccata/core.toc"
Value *rslt1 = fn_name_470(empty_list, arg0);

// call-list
// #line 889 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr2, newList2);
newList2 = listCons((Value *)rslt1, newList2);
newList2 = listCons((Value *)strPtr1, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt3);

};};
Value *Function_string_list_838(List *closures, Value *arg0) {
switch (arg0->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 889\n$TOCCATA_DIR/core.toc:: 571\n");
#endif
abort();
}
return(Function_string_list_830(closures, arg0));
};
FnArity Function_string_list_837 = {FnArityType, -1, 1, (List *)0, 0, Function_string_list_838};
Value *Function_show_STAR__831(List *closures, Value *x_0, Value *arg1) {
while (1) {
incRef(x_0, 1);

dec_and_free(arg1, 1);
Value *rslt2 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", x_0, "core", 892);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 892\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt2);

};};
Value *Function_show_STAR__840(List *closures, Value *x_0, Value *arg1) {
switch (arg1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, arg1)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 891\n$TOCCATA_DIR/core.toc:: 861\n");
#endif
abort();
}
return(Function_show_STAR__831(closures, x_0, arg1));
};
FnArity Function_show_STAR__839 = {FnArityType, -1, 2, (List *)0, 0, Function_show_STAR__840};
Value *Function__EQ__STAR__832(List *closures, Value *arg0, Value *arg1) {
while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);
return(nothing_8);

};};
FnArity Function__EQ__STAR__841 = {FnArityType, -1, 2, (List *)0, 0, Function__EQ__STAR__832};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[9];
} str3 = {StringBufferType, -1, 8, 0, "Function"};
Value *strPtr3 = (Value *)&str3;
Value *Function_type_name_833(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr3);

};};
FnArity Function_type_name_843 = {FnArityType, -1, 1, (List *)0, 0, Function_type_name_833};

// --------- anon -------------
Value *fn847;
Value *anon_848(List *closures, Value *x_0, Value *f_1) {
while (1) {
incRef(x_0, 1);
incRef(f_1, 1);

// dynamic unknown type
// #line 904 "/home/jim/toccata/core.toc"
Value *rslt5;
if((f_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 904\n",
extractStr(type_name(empty_list, f_1)), f_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, f_1, x_0);
} else {
FnArity *arity2 = findFnArity(f_1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, x_0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(x_0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_1)->name);
  abort();
}
dec_and_free(f_1, 1);
}
return(rslt5);

};};
FnArity anon_849 = {FnArityType, -1, 2, (List *)0, 0, anon_848};
Function anon_851 = {FunctionType, -1, "anon", 1, {&anon_849}};
Value *fn847 = (Value *)&anon_851;

Value *anon_846(List *closures, Value *arg0) {

while (1) {
Value *xs_1 = seq(empty_list, arg0);
incRef(xs_1, 1);
Value *val3;
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[3] = {&val3, &val2, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs8);
incRef(val3, 1);
incRef(val2, 1);
switch (val2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 902\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// call-list
// #line 902 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)xs_1, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 902\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 902\n$TOCCATA_DIR/core.toc:: 902\n$TOCCATA_DIR/core.toc:: 902\n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 902\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From:          \n$TOCCATA_DIR/core.toc: 902\n$TOCCATA_DIR/core.toc: 902\ncore: 902                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 902\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From:          \n$TOCCATA_DIR/core.toc: 902\n$TOCCATA_DIR/core.toc: 902\ncore: 902                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value **rslt5_args[2] = {&rslt5_0, &rslt5_1};
destructValue("$TOCCATA_DIR/core.toc", "902", (Value *)rslt5, 2, rslt5_args);
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
}
Value *rslt6 = proto2Arg(&apply_STAR__Implementations_275, "apply*", val3, rslt5, "core", 902);

// type-known for reduce
// #line 902 "/home/jim/toccata/core.toc"
Value *rslt7 = List_reduce_635(empty_list, val2, rslt6, fn847);
return(rslt7);

};};
Value *Function_comp_STAR__834(List *closures, Value *f_0, Value *fs_1) {
while (1) {
incRef(f_0, 1);
incRef(fs_1, 1);

// static-fixed
// #line 900 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, f_0, fs_1);

// type-known for reverse
// #line 900 "/home/jim/toccata/core.toc"
Value *rslt3 = List_reverse_562(empty_list, rslt2);
Value *f_6;
Value *fs_4;
Value **destArgs5[2] = {&f_6, &fs_4};
destructValue("core", "900", (Value *)rslt3, 2, destArgs5);
switch (fs_4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 900\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, fs_4)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 902\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}
FnArity *anon_7 = malloc_fnArity();
anon_7->count = 1;
anon_7->variadic = 1;
anon_7->fn = anon_846;
anon_7->closures = empty_list;
anon_7->closures = listCons((Value *)fs_4, (List *)anon_7->closures);
anon_7->closures = listCons((Value *)f_6, (List *)anon_7->closures);
Function *anon_854 = malloc_function(1);
anon_854->name = "anon";
anon_854->arityCount = 1;
anon_854->arities[0] = anon_7;
Value *fn845 = (Value *)anon_854;
return(fn845);

};};
Value *Function_comp_STAR__856(List *closures, Value *f_0, Value *fs_1) {
switch (fs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fs'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, fs_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 900\n$TOCCATA_DIR/core.toc:: 362\n");
#endif
abort();
}
return(Function_comp_STAR__834(closures, f_0, fs_1));
};
FnArity Function_comp_STAR__855 = {FnArityType, -1, 2, (List *)0, 0, Function_comp_STAR__856};
Value *Function_sha1_835(List *closures, Value *f_0) {
while (1) {

dec_and_free(f_0, 1);
return(numPtr0);

};};
FnArity Function_sha1_857 = {FnArityType, -1, 1, (List *)0, 0, Function_sha1_835};
Value *Function_apply_STAR__836(List *closures, Value *f_0, Value *args_1) {
while (1) {
incRef(f_0, 1);
incRef(args_1, 1);

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt2 = fn_apply_117(empty_list, list_STAR__616, args_1);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt3 = fn_apply_117(empty_list, f_0, rslt2);
return(rslt3);

};};
Value *Function_apply_STAR__860(List *closures, Value *f_0, Value *args_1) {
switch (f_0->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'f'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_0)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}
switch (args_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
return(Function_apply_STAR__836(closures, f_0, args_1));
};
FnArity Function_apply_STAR__859 = {FnArityType, -1, 2, (List *)0, 0, Function_apply_STAR__860};

// --------- interpose -------------
Value *interpose_862;
Value *anon_866(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs4);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// call-list
// #line 914 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)x_0, newList2);
newList2 = listCons((Value *)val1, newList2);
Value *rslt3 = (Value *)newList2;
return(rslt3);

};};
Value *interpose_863(List *closures, Value *coll_0, Value *sep_1) {
while (1) {
incRef(coll_0, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", coll_0, "core", 914);
Value *l_3 = rslt2;
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 914\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_3, 1);
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_866;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)sep_1, (List *)anon_4->closures);
Function *anon_869 = malloc_function(1);
anon_869->name = "anon";
anon_869->arityCount = 1;
anon_869->arities[0] = anon_4;
Value *fn865 = (Value *)anon_869;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt5 = list_map_93(empty_list, l_3, fn865);
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt6 = list_concat_99(empty_list, rslt5);

// type-known for rest
// #line 914 "/home/jim/toccata/core.toc"
Value *rslt7 = List_rest_564(empty_list, rslt6);
return(rslt7);

};};
FnArity interpose_870 = {FnArityType, -1, 2, (List *)0, 0, interpose_863};
Function interpose_872 = {FunctionType, -1, "interpose", 1, {&interpose_870}};
Value *interpose_862 = (Value *)&interpose_872;


// --------- print -------------
Value *print_874;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str4 = {StringBufferType, -1, 1, 0, " "};
Value *strPtr4 = (Value *)&str4;
Value *print_875(List *closures, Value *arg0) {
while (1) {
Value *vs_1 = seq(empty_list, arg0);
incRef(vs_1, 1);
switch (strPtr4->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr4)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 917\n$TOCCATA_DIR/core.toc:: 917\n");
#endif
abort();
}

// static-fixed
// #line 917 "/home/jim/toccata/core.toc"
Value *rslt2 = interpose_863(empty_list, vs_1, strPtr4);
Value *rslt3 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", rslt2, string_list_795, "core", 917);
Value *rslt4 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, pr_STAR__750, "core", 917);
return(rslt4);

};};
Value *print_877(List *closures, Value *args) {
Value *arg0;
Value **destArgs5[1] = {&arg0};
destructValue("core", "916", (Value *)args, 1, destArgs5);
return(print_875(closures, args));
};
FnArity print_876 = {FnArityType, -1, 1, (List *)0, 1, print_877};
Function print_878 = {FunctionType, -1, "print", 1, {&print_876}};
Value *print_874 = (Value *)&print_878;


// --------- println -------------
Value *println_880;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str5 = {StringBufferType, -1, 1, 0, "\n"};
Value *strPtr5 = (Value *)&str5;
Value *println_881(List *closures, Value *arg0) {
while (1) {
Value *vs_1 = seq(empty_list, arg0);
incRef(vs_1, 1);

// static-fixed
// #line 920 "/home/jim/toccata/core.toc"
Value *rslt2 = interpose_863(empty_list, vs_1, strPtr4);
Value *rslt3 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", rslt2, string_list_795, "core", 920);
Value *rslt4 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, pr_STAR__750, "core", 920);

dec_and_free(rslt4, 1);
switch (strPtr5->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'str'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr5)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 921\n$TOCCATA_DIR/core.toc:: 800\n");
#endif
abort();
}
switch (strPtr5->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr5)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 921\n$TOCCATA_DIR/core.toc:: 921\n");
#endif
abort();
}

// static-fixed
// #line 921 "/home/jim/toccata/core.toc"
Value *rslt5 = pr_STAR__751(empty_list, strPtr5);
return(rslt5);

};};
Value *println_883(List *closures, Value *args) {
Value *arg0;
Value **destArgs6[1] = {&arg0};
destructValue("core", "919", (Value *)args, 1, destArgs6);
return(println_881(closures, args));
};
FnArity println_882 = {FnArityType, -1, 1, (List *)0, 1, println_883};
Function println_884 = {FunctionType, -1, "println", 1, {&println_882}};
Value *println_880 = (Value *)&println_884;


// --------- print-err -------------
Value *print_err_614;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[6];
} str6 = {StringBufferType, -1, 5, 0, "\n*** "};
Value *strPtr6 = (Value *)&str6;
Value *print_err_887(List *closures, Value *arg0) {
while (1) {
Value *vs_1 = seq(empty_list, arg0);
incRef(vs_1, 1);
switch (strPtr6->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'str'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr6)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 924\n$TOCCATA_DIR/core.toc:: 804\n");
#endif
abort();
}
switch (strPtr6->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr6)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 924\n$TOCCATA_DIR/core.toc:: 924\n");
#endif
abort();
}

// static-fixed
// #line 924 "/home/jim/toccata/core.toc"
Value *rslt2 = pr_err_STAR__757(empty_list, strPtr6);

dec_and_free(rslt2, 1);

// static-fixed
// #line 925 "/home/jim/toccata/core.toc"
Value *rslt3 = interpose_863(empty_list, vs_1, strPtr4);
Value *rslt4 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", rslt3, string_list_795, "core", 925);
Value *rslt5 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt4, pr_err_STAR__756, "core", 925);

dec_and_free(rslt5, 1);

// static-fixed
// #line 926 "/home/jim/toccata/core.toc"
Value *rslt6 = pr_err_STAR__757(empty_list, strPtr5);
return(rslt6);

};};
Value *print_err_889(List *closures, Value *args) {
Value *arg0;
Value **destArgs7[1] = {&arg0};
destructValue("core", "923", (Value *)args, 1, destArgs7);
return(print_err_887(closures, args));
};
FnArity print_err_888 = {FnArityType, -1, 1, (List *)0, 1, print_err_889};
Function print_err_890 = {FunctionType, -1, "print-err", 1, {&print_err_888}};
Value *print_err_614 = (Value *)&print_err_890;


// --------- str -------------
Value *str_892;
Value *str_893(List *closures, Value *arg0) {
while (1) {
Value *vs_1 = seq(empty_list, arg0);
incRef(vs_1, 1);

// type-known for to-str
// #line 932 "/home/jim/toccata/core.toc"
Value *rslt2 = List_to_str_809(empty_list, vs_1);
switch (rslt2->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 932\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 931\n");
#endif
abort();
}
return(rslt2);

};};
Value *str_895(List *closures, Value *args) {
Value *arg0;
Value **destArgs3[1] = {&arg0};
destructValue("core", "928", (Value *)args, 1, destArgs3);
return(str_893(closures, args));
};
FnArity str_894 = {FnArityType, -1, 1, (List *)0, 1, str_895};
Function str_896 = {FunctionType, -1, "str", 1, {&str_894}};
Value *str_892 = (Value *)&str_896;


// --------- inc -------------
Value *inc_898;
Integer num3 = {IntegerType, -1, 1};
Value *numPtr3 = (Value *)&num3;
Value *inc_899(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
switch (numPtr3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, numPtr3)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 936\n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 108\n");
#endif
abort();
}

// static-fixed
// #line 936 "/home/jim/toccata/core.toc"
Value *rslt1 = _PLUS__649(empty_list, numPtr3, x_0);
return(rslt1);

};};
Value *inc_901(List *closures, Value *x_0) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 934\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 936\n$TOCCATA_DIR/core.toc:: 718\n$TOCCATA_DIR/core.toc:: 109\n");
#endif
abort();
}
return(inc_899(closures, x_0));
};
FnArity inc_900 = {FnArityType, -1, 1, (List *)0, 0, inc_901};
Function inc_902 = {FunctionType, -1, "inc", 1, {&inc_900}};
Value *inc_898 = (Value *)&inc_902;


// --------- - -------------
Value *_MINUS__904;
Value *_MINUS__907(List *closures) {
while (1) {
return(numPtr0);

};};
FnArity _MINUS__908 = {FnArityType, -1, 0, (List *)0, 0, _MINUS__907};
Value *_MINUS__906(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
return(x_0);

};};
FnArity _MINUS__910 = {FnArityType, -1, 1, (List *)0, 0, _MINUS__906};
Value *_MINUS__905(List *closures, Value *arg0) {
while (1) {
Value *x_3;
Value *xs_1;
Value **destArgs2[2] = {&x_3, &xs_1};
destructValue("core", "942", (Value *)arg0, 2, destArgs2);
incRef(x_3, 1);
incRef(xs_1, 1);
switch (xs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 942\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, xs_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 942\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}

// type-known for reduce
// #line 942 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, xs_1, x_3, subtract_numbers_128);
return(rslt4);

};};
Value *_MINUS__913(List *closures, Value *args) {
Value *arg0;
Value **destArgs5[1] = {&arg0};
destructValue("core", "938", (Value *)args, 1, destArgs5);
return(_MINUS__905(closures, args));
};
FnArity _MINUS__912 = {FnArityType, -1, 1, (List *)0, 1, _MINUS__913};
Function _MINUS__914 = {FunctionType, -1, "-", 3, {&_MINUS__908, &_MINUS__910, &_MINUS__912}};
Value *_MINUS__904 = (Value *)&_MINUS__914;


// --------- dec -------------
Value *dec_916;
Value *dec_917(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 947 "/home/jim/toccata/core.toc"
Value *rslt1 = subtract_numbers_129(empty_list, x_0, numPtr3);
return(rslt1);

};};
Value *dec_919(List *closures, Value *x_0) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 944\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 946\n");
#endif
abort();
}
return(dec_917(closures, x_0));
};
FnArity dec_918 = {FnArityType, -1, 1, (List *)0, 0, dec_919};
Function dec_920 = {FunctionType, -1, "dec", 1, {&dec_918}};
Value *dec_916 = (Value *)&dec_920;


// --------- * -------------
Value *_STAR__922;
Value *_STAR__925(List *closures) {
while (1) {
return(numPtr3);

};};
FnArity _STAR__926 = {FnArityType, -1, 0, (List *)0, 0, _STAR__925};
Value *_STAR__924(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 1);
incRef(y_1, 1);

// static-fixed
// #line 952 "/home/jim/toccata/core.toc"
Value *rslt2 = mult_numbers_135(empty_list, x_0, y_1);
return(rslt2);

};};
Value *_STAR__929(List *closures, Value *x_0, Value *y_1) {
switch (x_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 949\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 952\n$TOCCATA_DIR/core.toc:: 145\n");
#endif
abort();
}
switch (y_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 949\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, y_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 952\n$TOCCATA_DIR/core.toc:: 146\n");
#endif
abort();
}
return(_STAR__924(closures, x_0, y_1));
};
FnArity _STAR__928 = {FnArityType, -1, 2, (List *)0, 0, _STAR__929};
Value *_STAR__923(List *closures, Value *arg0) {
while (1) {
Value *xs_1 = seq(empty_list, arg0);
incRef(xs_1, 1);
switch (xs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, xs_1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 953\n$TOCCATA_DIR/core.toc:: 708\n$TOCCATA_DIR/core.toc:: 684\n");
#endif
abort();
}

// type-known for reduce
// #line 953 "/home/jim/toccata/core.toc"
Value *rslt2 = List_reduce_635(empty_list, xs_1, numPtr3, mult_numbers_134);
return(rslt2);

};};
Value *_STAR__931(List *closures, Value *args) {
Value *arg0;
Value **destArgs3[1] = {&arg0};
destructValue("core", "949", (Value *)args, 1, destArgs3);
return(_STAR__923(closures, args));
};
FnArity _STAR__930 = {FnArityType, -1, 1, (List *)0, 1, _STAR__931};
Function _STAR__932 = {FunctionType, -1, "*", 3, {&_STAR__926, &_STAR__928, &_STAR__930}};
Value *_STAR__922 = (Value *)&_STAR__932;

Value *Integer_string_list_940(List *closures, Value *);
Value *Integer_show_STAR__941(List *closures, Value *, Value *);
Value *Integer_type_args_942(List *closures, Value *);
Value *Integer_type_name_943(List *closures, Value *);
Value *Integer__LT__STAR__944(List *closures, Value *, Value *);
Value *Integer_sha1_update_945(List *closures, Value *, Value *);
Value *Integer_sha1_946(List *closures, Value *);
Value *Integer_string_list_940(List *closures, Value *n_0) {
while (1) {

// inline
// #line 961 "/home/jim/toccata/core.toc"
return((Value *)listCons(integer_str(n_0), empty_list));

#

};};
FnArity Integer_string_list_947 = {FnArityType, -1, 1, (List *)0, 0, Integer_string_list_940};
Value *Integer_show_STAR__941(List *closures, Value *x_0, Value *indent_1) {
while (1) {
incRef(x_0, 1);

dec_and_free(indent_1, 1);
Value *rslt2 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", x_0, "core", 964);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 964\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt2);

};};
Value *Integer_show_STAR__950(List *closures, Value *x_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:             \n$TOCCATA_DIR/core.toc:: 963\n$TOCCATA_DIR/core.toc:: 861\n");
#endif
abort();
}
return(Integer_show_STAR__941(closures, x_0, indent_1));
};
FnArity Integer_show_STAR__949 = {FnArityType, -1, 2, (List *)0, 0, Integer_show_STAR__950};
Value *Integer_type_args_942(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);

// call-vector
// #line 957 "/home/jim/toccata/core.toc"
Vector *newVect1 = empty_vect;
newVect1 = mutateVectConj(newVect1, n_0);
Value *rslt2 = (Value *)newVect1;
switch (rslt2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 957\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt2);

};};
FnArity Integer_type_args_951 = {FnArityType, -1, 1, (List *)0, 0, Integer_type_args_942};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str7 = {StringBufferType, -1, 7, 0, "Integer"};
Value *strPtr7 = (Value *)&str7;
Value *Integer_type_name_943(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr7);

};};
FnArity Integer_type_name_953 = {FnArityType, -1, 1, (List *)0, 0, Integer_type_name_943};
Value *Integer__LT__STAR__944(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 967 "/home/jim/toccata/core.toc"
return(integerLT(x_0, y_1));
#

};};
FnArity Integer__LT__STAR__955 = {FnArityType, -1, 2, (List *)0, 0, Integer__LT__STAR__944};
Value *Integer_sha1_update_945(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {

// inline
// #line 971 "/home/jim/toccata/core.toc"

  Sha1Update(((Opaque *)ctxt_1)->ptr, (void *)&((Integer *)x_0)->type, 8);
  Sha1Update(((Opaque *)ctxt_1)->ptr, (void *)&((Integer *)x_0)->numVal, 8);
  dec_and_free(x_0, 1);
  return(ctxt_1);

#

};};
FnArity Integer_sha1_update_957 = {FnArityType, -1, 2, (List *)0, 0, Integer_sha1_update_945};
Value *Integer_sha1_946(List *closures, Value *x_0) {
while (1) {

// inline
// #line 979 "/home/jim/toccata/core.toc"
return(integerSha1(x_0));
#

};};
FnArity Integer_sha1_959 = {FnArityType, -1, 1, (List *)0, 0, Integer_sha1_946};
Value *Vector_seq_969(List *closures, Value *);
Value *Vector_to_str_970(List *closures, Value *);
Value *Vector_get_971(List *closures, Value *, Value *);
Value *Vector_empty_QM__972(List *closures, Value *);
Value *Vector_empty_973(List *closures, Value *);
Value *Vector_count_974(List *closures, Value *);
Value *Vector_conj_975(List *closures, Value *, Value *);
Value *Vector_conj_976(List *closures, Value *, Value *);
Value *Vector_seq_969(List *closures, Value *v_0) {
while (1) {

// inline
// #line 1012 "/home/jim/toccata/core.toc"
return(vectSeq((Vector *)v_0, 0));

#

};};
FnArity Vector_seq_977 = {FnArityType, -1, 1, (List *)0, 0, Vector_seq_969};

// --------- anon -------------
Value *fn979;
Value *anon_980(List *closures, Value *len_0, Value *s_1) {
while (1) {
incRef(len_0, 1);
incRef(s_1, 1);
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_1, "core", 1016);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 1016\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1016\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}

// static-fixed
// #line 1016 "/home/jim/toccata/core.toc"
Value *rslt3 = _PLUS__649(empty_list, len_0, rslt2);
return(rslt3);

};};
Value *anon_982(List *closures, Value *len_0, Value *s_1) {
switch (len_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 1016\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, len_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1016\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 108 \n");
#endif
abort();
}
return(anon_980(closures, len_0, s_1));
};
FnArity anon_981 = {FnArityType, -1, 2, (List *)0, 0, anon_982};
Function anon_983 = {FunctionType, -1, "anon", 1, {&anon_981}};
Value *fn979 = (Value *)&anon_983;

Value *anon_986(List *closures, Value *s_0) {

while (1) {
incRef(s_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest'\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'StringBuffer' From:        \n$TOCCATA_DIR/core.toc:: 1019\n$TOCCATA_DIR/core.toc:: 782 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1019 "/home/jim/toccata/core.toc"
Value *rslt2 = str_append_745(empty_list, val1, s_0);
return(rslt2);

};};
Value *Vector_to_str_970(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", coll_0, "core", 1015);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1015\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, string_list_795);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 660\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt4 = list_concat_99(empty_list, rslt3);
switch (rslt4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1015\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1015\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1015 "/home/jim/toccata/core.toc"
Value *rslt5 = cons_282(empty_list, strPtr0, rslt4);
Value *ss_list_6 = rslt5;
switch (ss_list_6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1015\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_list_6)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1016\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}
incRef(ss_list_6, 2);
switch (ss_list_6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1015\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_list_6)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1016\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1016 "/home/jim/toccata/core.toc"
Value *rslt7 = List_reduce_635(empty_list, ss_list_6, numPtr0, fn979);
Value *new_len_8 = rslt7;
switch (new_len_8->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 1016\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, new_len_8)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1017\n$TOCCATA_DIR/core.toc:: 117 \n");
#endif
abort();
}
incRef(new_len_8, 1);
switch (new_len_8->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 1016\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, new_len_8)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1017\n$TOCCATA_DIR/core.toc:: 117 \n");
#endif
abort();
}

// static-fixed
// #line 1017 "/home/jim/toccata/core.toc"
Value *rslt9 = str_malloc_111(empty_list, new_len_8);
Value *new_str_10 = rslt9;
switch (new_str_10->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest' at $TOCCATA_DIR/core.toc, line 1017\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, new_str_10)));
fprintf(stderr, "'StringBuffer' From:        \n$TOCCATA_DIR/core.toc:: 1019\n$TOCCATA_DIR/core.toc:: 782 \n");
#endif
abort();
}
incRef(new_str_10, 2);
switch (new_str_10->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'dest' at $TOCCATA_DIR/core.toc, line 1017\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, new_str_10)));
fprintf(stderr, "'StringBuffer' From:        \n$TOCCATA_DIR/core.toc:: 1019\n$TOCCATA_DIR/core.toc:: 782 \n");
#endif
abort();
}
Value *l_11 = ss_list_6;
incRef(l_11, 1);
switch (l_11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_12 = malloc_fnArity();
anon_12->count = 1;
anon_12->variadic = 0;
anon_12->fn = anon_986;
anon_12->closures = empty_list;
anon_12->closures = listCons((Value *)new_str_10, (List *)anon_12->closures);
Function *anon_989 = malloc_function(1);
anon_989->name = "anon";
anon_989->arityCount = 1;
anon_989->arities[0] = anon_12;
Value *fn985 = (Value *)anon_989;

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt13 = list_map_93(empty_list, l_11, fn985);

dec_and_free(rslt13, 1);
return(new_str_10);

};};
FnArity Vector_to_str_990 = {FnArityType, -1, 1, (List *)0, 0, Vector_to_str_970};
Value *Vector_get_971(List *closures, Value *v_0, Value *n_1) {
while (1) {

// (assert (<= 0 n))

// inline
// #line 986 "/home/jim/toccata/core.toc"
return(vectorGet(v_0, n_1));
#

};};
Value *Vector_get_993(List *closures, Value *v_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 984\n");
#endif
abort();
}
return(Vector_get_971(closures, v_0, n_1));
};
FnArity Vector_get_992 = {FnArityType, -1, 2, (List *)0, 0, Vector_get_993};
Value *Vector_empty_QM__972(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", v_0, "core", 990);

// static-fixed
// #line 990 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",990);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(empty_vector_1, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 991 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, empty_vector_1);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 991\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity Vector_empty_QM__994 = {FnArityType, -1, 1, (List *)0, 0, Vector_empty_QM__972};
Value *Vector_empty_973(List *closures, Value *coll_0) {
while (1) {

dec_and_free(coll_0, 1);
return(empty_vector_1);

};};
FnArity Vector_empty_996 = {FnArityType, -1, 1, (List *)0, 0, Vector_empty_973};
Value *Vector_count_974(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);

// static-fixed
// #line 996 "/home/jim/toccata/core.toc"
Value *rslt1 = vect_count_147(empty_list, l_0);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 996\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 381\n");
#endif
abort();
}
return(rslt1);

};};
Value *Vector_count_999(List *closures, Value *l_0) {
switch (l_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, l_0)));
fprintf(stderr, "'Vector' From:             \n$TOCCATA_DIR/core.toc:: 996\n$TOCCATA_DIR/core.toc:: 163\n");
#endif
abort();
}
return(Vector_count_974(closures, l_0));
};
FnArity Vector_count_998 = {FnArityType, -1, 1, (List *)0, 0, Vector_count_999};
Value *Vector_conj_975(List *closures, Value *vect_0, Value *v_1) {
while (1) {

// inline
// #line 999 "/home/jim/toccata/core.toc"

  Value *result = (Value *)vectConj((Vector *)vect_0, v_1);
  dec_and_free(vect_0, 1);
  return(result);
#

};};
FnArity Vector_conj_1000 = {FnArityType, -1, 2, (List *)0, 0, Vector_conj_975};
Value *Vector_conj_976(List *closures, Value *vect_0, Value *v_1) {
while (1) {

// inline
// #line 1005 "/home/jim/toccata/core.toc"

  Value *result = (Value *)vectConj((Vector *)vect_0, v_1);
  dec_and_free(vect_0, 1);
  return(result);
#

};};
FnArity Vector_conj_1002 = {FnArityType, -1, 2, (List *)0, 0, Vector_conj_976};
Value *String_string_list_1028(List *closures, Value *);
Value *String_show_STAR__1029(List *closures, Value *, Value *);
Value *String__EQ__STAR__1030(List *closures, Value *, Value *);
Value *String_to_str_1031(List *closures, Value *);
Value *String_seq_1032(List *closures, Value *);
Value *String_vec_1033(List *closures, Value *);
Value *String_first_1034(List *closures, Value *);
Value *String_rest_1035(List *closures, Value *);
Value *String_last_1036(List *closures, Value *);
Value *String_butlast_1037(List *closures, Value *);
Value *String_reduce_1038(List *closures, Value *, Value *, Value *);
Value *String_reverse_1039(List *closures, Value *);
Value *String_split_with_1040(List *closures, Value *, Value *, Value *);
Value *String_split_with_1041(List *closures, Value *, Value *);
Value *String_type_name_1042(List *closures, Value *);
Value *String_type_args_1043(List *closures, Value *);
Value *String__LT__STAR__1044(List *closures, Value *, Value *);
Value *String_zero_1045(List *closures, Value *);
Value *String_comp_STAR__1046(List *closures, Value *, Value *);
Value *String_sha1_update_1047(List *closures, Value *, Value *);
Value *String_sha1_1048(List *closures, Value *);
Value *String_nth_1049(List *closures, Value *, Value *);
Value *String_empty_QM__1050(List *closures, Value *);
Value *String_empty_1051(List *closures, Value *);
Value *String_string_list_1028(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-list
// #line 1028 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)s_0, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1028\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt2);

};};
FnArity String_string_list_1052 = {FnArityType, -1, 1, (List *)0, 0, String_string_list_1028};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str8 = {StringBufferType, -1, 1, 0, "\""};
Value *strPtr8 = (Value *)&str8;
Value *String_show_STAR__1029(List *closures, Value *s_0, Value *indent_1) {
while (1) {
incRef(s_0, 1);

dec_and_free(indent_1, 1);
incRef(strPtr8, 1);
switch (strPtr8->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr8)));
fprintf(stderr, "'String' From: \n");
#endif
abort();
}

// call-list
// #line 1031 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr8, newList2);
Value *rslt3 = (Value *)newList2;
incRef(strPtr8, 1);
switch (strPtr8->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr8)));
fprintf(stderr, "'String' From: \n");
#endif
abort();
}

// call-list
// #line 1031 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)rslt3, newList4);
newList4 = listCons((Value *)s_0, newList4);
newList4 = listCons((Value *)strPtr8, newList4);
Value *rslt5 = (Value *)newList4;

// static-variadic
// #line 1031 "/home/jim/toccata/core.toc"
Value *rslt6 = list_STAR__617(empty_list, (Value *)rslt5);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt6);

};};
Value *String_show_STAR__1055(List *closures, Value *s_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1030\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(String_show_STAR__1029(closures, s_0, indent_1));
};
FnArity String_show_STAR__1054 = {FnArityType, -1, 2, (List *)0, 0, String_show_STAR__1055};
Value *String__EQ__STAR__1030(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1095 "/home/jim/toccata/core.toc"
return(strEQ(x_0, y_1));
#

};};
FnArity String__EQ__STAR__1056 = {FnArityType, -1, 2, (List *)0, 0, String__EQ__STAR__1030};
Value *String_to_str_1031(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-list
// #line 1049 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)s_0, newList1);
Value *rslt2 = (Value *)newList1;

// static-variadic
// #line 1049 "/home/jim/toccata/core.toc"
Value *rslt3 = str_893(empty_list, (Value *)rslt2);
switch (rslt3->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1049\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 457\n");
#endif
abort();
}
return(rslt3);

};};
FnArity String_to_str_1058 = {FnArityType, -1, 1, (List *)0, 0, String_to_str_1031};
Value *String_seq_1032(List *closures, Value *coll_0) {
while (1) {

// inline
// #line 1052 "/home/jim/toccata/core.toc"
return(strSeq(coll_0));
#

};};
FnArity String_seq_1060 = {FnArityType, -1, 1, (List *)0, 0, String_seq_1032};
Value *String_vec_1033(List *closures, Value *coll_0) {
while (1) {

// inline
// #line 1055 "/home/jim/toccata/core.toc"
return(strVec(coll_0));
#

};};
FnArity String_vec_1062 = {FnArityType, -1, 1, (List *)0, 0, String_vec_1033};
Value *anon_1065(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1060\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1060 "/home/jim/toccata/core.toc"
Value *rslt2 = subs_781(empty_list, val1, numPtr0, numPtr3);
return(rslt2);

};};
Value *String_first_1034(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 2);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1058);

// static-fixed
// #line 1058 "/home/jim/toccata/core.toc"
Value *rslt2 = _LT__661(empty_list, numPtr0, rslt1);
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 1;
anon_3->variadic = 0;
anon_3->fn = anon_1065;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)s_0, (List *)anon_3->closures);
Function *anon_1068 = malloc_function(1);
anon_1068->name = "anon";
anon_1068->arityCount = 1;
anon_1068->arities[0] = anon_3;
Value *fn1064 = (Value *)anon_1068;
Value *rslt4 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt2, fn1064, "core", 1058);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1058\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 424\n");
#endif
abort();
}
return(rslt4);

};};
Value *String_first_1070(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1060\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
return(String_first_1034(closures, s_0));
};
FnArity String_first_1069 = {FnArityType, -1, 1, (List *)0, 0, String_first_1070};
Value *String_rest_1035(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// static-fixed
// #line 1063 "/home/jim/toccata/core.toc"
Value *rslt1 = subs_782(empty_list, s_0, numPtr3);
return(rslt1);

};};
Value *String_rest_1072(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1063\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}
return(String_rest_1035(closures, s_0));
};
FnArity String_rest_1071 = {FnArityType, -1, 1, (List *)0, 0, String_rest_1072};
Value *anon_1074(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs5);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1069 "/home/jim/toccata/core.toc"
Value *rslt3 = dec_917(empty_list, val2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index' at $TOCCATA_DIR/core.toc, line 1069\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 841 \n");
#endif
abort();
}

// static-fixed
// #line 1069 "/home/jim/toccata/core.toc"
Value *rslt4 = subs_782(empty_list, val1, rslt3);
return(rslt4);

};};
Value *String_last_1036(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 2);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1066);
Value *n_2 = rslt1;
switch (n_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1066\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}
incRef(n_2, 2);
switch (n_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1066\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1067 "/home/jim/toccata/core.toc"
Value *rslt3 = _LT__661(empty_list, numPtr0, n_2);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_1074;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)s_0, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)n_2, (List *)anon_4->closures);
Function *anon_1077 = malloc_function(1);
anon_1077->name = "anon";
anon_1077->arityCount = 1;
anon_1077->arities[0] = anon_4;
Value *fn1073 = (Value *)anon_1077;
Value *rslt5 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, fn1073, "core", 1067);
switch (rslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1067\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 434\n");
#endif
abort();
}
return(rslt5);

};};
Value *String_last_1079(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}
return(String_last_1036(closures, s_0));
};
FnArity String_last_1078 = {FnArityType, -1, 1, (List *)0, 0, String_last_1079};
Value *String_butlast_1037(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 3);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1072);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1072\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1072 "/home/jim/toccata/core.toc"
Value *rslt2 = dec_917(empty_list, rslt1);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'length' at $TOCCATA_DIR/core.toc, line 1072\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 846 \n");
#endif
abort();
}

// static-fixed
// #line 1072 "/home/jim/toccata/core.toc"
Value *rslt3 = subs_781(empty_list, s_0, numPtr0, rslt2);
return(rslt3);

};};
Value *String_butlast_1081(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
return(String_butlast_1037(closures, s_0));
};
FnArity String_butlast_1080 = {FnArityType, -1, 1, (List *)0, 0, String_butlast_1081};
Value *String_reduce_1038(List *closures, Value *s_0, Value *x_1, Value *f_2) {
while (1) {
incRef(s_0, 1);
incRef(x_1, 1);
incRef(f_2, 1);
Value *rslt3 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", s_0, "core", 1077);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1077\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1077\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1077 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, rslt3, x_1, f_2);
return(rslt4);

};};
FnArity String_reduce_1082 = {FnArityType, -1, 3, (List *)0, 0, String_reduce_1038};
Value *String_reverse_1039(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", s_0, "core", 1080);

// type-known for reverse
// #line 1080 "/home/jim/toccata/core.toc"
Value *rslt2 = List_reverse_562(empty_list, rslt1);

// type-known for to-str
// #line 1080 "/home/jim/toccata/core.toc"
Value *rslt3 = List_to_str_809(empty_list, rslt2);
return(rslt3);

};};
FnArity String_reverse_1084 = {FnArityType, -1, 1, (List *)0, 0, String_reverse_1039};
Value *String_split_with_1040(List *closures, Value *s_0, Value *pred_1, Value *prefix_2) {
while (1) {
incRef(s_0, 5);
incRef(pred_1, 3);
incRef(prefix_2, 3);
Value *orRslt3;
Value *rslt4 = proto1Arg(&first_Implementations_336, "<nothing>/first", s_0, "core", 1084);
Value *mv_5 = rslt4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_5, 2);
dec_and_free(pred_1, 4);
dec_and_free(s_0, 2);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *head_8 = rslt7;
incRef(head_8, 3);
Value *andRslt9;

// dynamic unknown type
// #line 1085 "/home/jim/toccata/core.toc"
Value *rslt13;
if((pred_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(pred_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1085\n",
extractStr(type_name(empty_list, pred_1)), pred_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, pred_1, head_8);
} else {
FnArity *arity10 = findFnArity(pred_1, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, head_8);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(head_8, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)pred_1)->name);
  abort();
}
dec_and_free(pred_1, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1085);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt9 = rslt13;
if (isNothing(andRslt9,"",0)) {
dec_and_free(head_8, 2);
dec_and_free(prefix_2, 2);
dec_and_free(pred_1, 2);
dec_and_free(s_0, 2);
} else {
dec_and_free(andRslt9, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", s_0, "core", 1087);
Value *rslt15 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", prefix_2, head_8, "core", 1087);
Value *rslt16 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", rslt14, pred_1, rslt15, "core", 1087);
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1087);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt9 = rslt16;
}
andRslt6 = andRslt9;
}
orRslt3 = andRslt6;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(s_0, 2);
dec_and_free(maybe_3, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt17 = proto1Arg(&to_str_Implementations_328, "<nothing>/to-str", prefix_2, "core", 1088);

// call-vector
// #line 1088 "/home/jim/toccata/core.toc"
Vector *newVect18 = empty_vect;
newVect18 = mutateVectConj(newVect18, rslt17);
newVect18 = mutateVectConj(newVect18, s_0);
Value *rslt19 = (Value *)newVect18;
switch (rslt19->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1088\n$TOCCATA_DIR/core.toc:: 1088\n$TOCCATA_DIR/core.toc:: 1088\n");
#endif
abort();
}
switch (rslt19->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1088\n$TOCCATA_DIR/core.toc: 1088\ncore: 1088                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt19, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt19))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1088\n$TOCCATA_DIR/core.toc: 1088\ncore: 1088                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt19, 1);
Value *rslt19_0;
Value *rslt19_1;
Value *rslt19_2;
Value **rslt19_args[3] = {&rslt19_0, &rslt19_1, &rslt19_2};
destructValue("$TOCCATA_DIR/core.toc", "1088", (Value *)rslt19, 3, rslt19_args);
dec_and_free(rslt19_0, 1);
dec_and_free(rslt19_1, 1);
dec_and_free(rslt19_2, 1);
}

// static-fixed
// #line 1088 "/home/jim/toccata/core.toc"
Value *rslt20 = maybe_4(empty_list, rslt19);
return(rslt20);
}

};};
Value *String_split_with_1088(List *closures, Value *s_0, Value *pred_1, Value *prefix_2) {
switch (prefix_2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1083\n");
#endif
abort();
}
return(String_split_with_1040(closures, s_0, pred_1, prefix_2));
};
FnArity String_split_with_1087 = {FnArityType, -1, 3, (List *)0, 0, String_split_with_1088};
Value *String_split_with_1041(List *closures, Value *s_0, Value *pred_1) {
while (1) {
incRef(s_0, 3);
incRef(pred_1, 1);

// call-vector
// #line 1091 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1091\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1091\n$TOCCATA_DIR/core.toc:: 1091\n$TOCCATA_DIR/core.toc:: 1091\n");
#endif
abort();
}
Value *rslt4 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", s_0, pred_1, rslt3, "core", 1091);
if (!isNothing(rslt4,"",0)) {
Value *rslt7 = maybeExtract(rslt4);
return(rslt7);
} else {
dec_and_free(rslt4, 1);

// call-vector
// #line 1092 "/home/jim/toccata/core.toc"
Vector *newVect5 = empty_vect;
newVect5 = mutateVectConj(newVect5, strPtr0);
newVect5 = mutateVectConj(newVect5, s_0);
Value *rslt6 = (Value *)newVect5;
return(rslt6);
}

};};
FnArity String_split_with_1089 = {FnArityType, -1, 2, (List *)0, 0, String_split_with_1041};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[7];
} str9 = {StringBufferType, -1, 6, 0, "String"};
Value *strPtr9 = (Value *)&str9;
Value *String_type_name_1042(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr9);

};};
FnArity String_type_name_1091 = {FnArityType, -1, 1, (List *)0, 0, String_type_name_1042};
Value *String_type_args_1043(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-vector
// #line 1025 "/home/jim/toccata/core.toc"
Vector *newVect1 = empty_vect;
newVect1 = mutateVectConj(newVect1, s_0);
Value *rslt2 = (Value *)newVect1;
switch (rslt2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1025\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt2);

};};
FnArity String_type_args_1093 = {FnArityType, -1, 1, (List *)0, 0, String_type_args_1043};
Value *String__LT__STAR__1044(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1104 "/home/jim/toccata/core.toc"
return(strLT(x_0, y_1));
#

};};
FnArity String__LT__STAR__1095 = {FnArityType, -1, 2, (List *)0, 0, String__LT__STAR__1044};
Value *String_zero_1045(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr0);

};};
FnArity String_zero_1097 = {FnArityType, -1, 1, (List *)0, 0, String_zero_1045};
Value *String_comp_STAR__1046(List *closures, Value *s_0, Value *ss_1) {
while (1) {
incRef(s_0, 1);
incRef(ss_1, 1);

// static-fixed
// #line 1037 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, s_0, ss_1);

// type-known for to-str
// #line 1037 "/home/jim/toccata/core.toc"
Value *rslt3 = List_to_str_809(empty_list, rslt2);
return(rslt3);

};};
Value *String_comp_STAR__1100(List *closures, Value *s_0, Value *ss_1) {
switch (ss_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'ss'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1037\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
return(String_comp_STAR__1046(closures, s_0, ss_1));
};
FnArity String_comp_STAR__1099 = {FnArityType, -1, 2, (List *)0, 0, String_comp_STAR__1100};
Value *String_sha1_update_1047(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {

// inline
// #line 1108 "/home/jim/toccata/core.toc"

  strSha1Update(((Opaque *)ctxt_1)->ptr, x_0);
  dec_and_free(x_0, 1);
  return(ctxt_1);

#

};};
FnArity String_sha1_update_1101 = {FnArityType, -1, 2, (List *)0, 0, String_sha1_update_1047};
Value *String_sha1_1048(List *closures, Value *s_0) {
while (1) {

// inline
// #line 1115 "/home/jim/toccata/core.toc"
return(strSha1(s_0));
#

};};
FnArity String_sha1_1103 = {FnArityType, -1, 1, (List *)0, 0, String_sha1_1048};
Value *anon_1106(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs4);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 845 \n");
#endif
abort();
}
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1101 "/home/jim/toccata/core.toc"
Value *rslt3 = subs_781(empty_list, val1, val2, numPtr3);
return(rslt3);

};};
Value *String_nth_1049(List *closures, Value *s_0, Value *n_1) {
while (1) {
incRef(s_0, 2);
incRef(n_1, 2);
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1099);

// static-fixed
// #line 1099 "/home/jim/toccata/core.toc"
Value *rslt3 = _LT__661(empty_list, n_1, rslt2);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_1106;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)s_0, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)n_1, (List *)anon_4->closures);
Function *anon_1109 = malloc_function(1);
anon_1109->name = "anon";
anon_1109->arityCount = 1;
anon_1109->arities[0] = anon_4;
Value *fn1105 = (Value *)anon_1109;
Value *rslt5 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, fn1105, "core", 1099);
switch (rslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1099\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
return(rslt5);

};};
Value *String_nth_1111(List *closures, Value *s_0, Value *n_1) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1098\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
return(String_nth_1049(closures, s_0, n_1));
};
FnArity String_nth_1110 = {FnArityType, -1, 2, (List *)0, 0, String_nth_1111};
Value *String_empty_QM__1050(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", coll_0, "core", 1041);

// static-fixed
// #line 1041 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1041);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(strPtr0, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 1042 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, strPtr0);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1042\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity String_empty_QM__1112 = {FnArityType, -1, 1, (List *)0, 0, String_empty_QM__1050};
Value *String_empty_1051(List *closures, Value *coll_0) {
while (1) {

dec_and_free(coll_0, 1);
return(strPtr0);

};};
FnArity String_empty_1114 = {FnArityType, -1, 1, (List *)0, 0, String_empty_1051};
Value *String_string_list_1140(List *closures, Value *);
Value *String_show_STAR__1141(List *closures, Value *, Value *);
Value *String__EQ__STAR__1142(List *closures, Value *, Value *);
Value *String_to_str_1143(List *closures, Value *);
Value *String_seq_1144(List *closures, Value *);
Value *String_vec_1145(List *closures, Value *);
Value *String_first_1146(List *closures, Value *);
Value *String_rest_1147(List *closures, Value *);
Value *String_last_1148(List *closures, Value *);
Value *String_butlast_1149(List *closures, Value *);
Value *String_reduce_1150(List *closures, Value *, Value *, Value *);
Value *String_reverse_1151(List *closures, Value *);
Value *String_split_with_1152(List *closures, Value *, Value *, Value *);
Value *String_split_with_1153(List *closures, Value *, Value *);
Value *String_type_name_1154(List *closures, Value *);
Value *String_type_args_1155(List *closures, Value *);
Value *String__LT__STAR__1156(List *closures, Value *, Value *);
Value *String_zero_1157(List *closures, Value *);
Value *String_comp_STAR__1158(List *closures, Value *, Value *);
Value *String_sha1_update_1159(List *closures, Value *, Value *);
Value *String_sha1_1160(List *closures, Value *);
Value *String_nth_1161(List *closures, Value *, Value *);
Value *String_empty_QM__1162(List *closures, Value *);
Value *String_empty_1163(List *closures, Value *);
Value *String_string_list_1140(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-list
// #line 1028 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)s_0, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1028\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt2);

};};
FnArity String_string_list_1164 = {FnArityType, -1, 1, (List *)0, 0, String_string_list_1140};
Value *String_show_STAR__1141(List *closures, Value *s_0, Value *indent_1) {
while (1) {
incRef(s_0, 1);

dec_and_free(indent_1, 1);

// call-list
// #line 1031 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr8, newList2);
Value *rslt3 = (Value *)newList2;

// call-list
// #line 1031 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)rslt3, newList4);
newList4 = listCons((Value *)s_0, newList4);
newList4 = listCons((Value *)strPtr8, newList4);
Value *rslt5 = (Value *)newList4;

// static-variadic
// #line 1031 "/home/jim/toccata/core.toc"
Value *rslt6 = list_STAR__617(empty_list, (Value *)rslt5);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1031\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt6);

};};
Value *String_show_STAR__1167(List *closures, Value *s_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1030\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(String_show_STAR__1141(closures, s_0, indent_1));
};
FnArity String_show_STAR__1166 = {FnArityType, -1, 2, (List *)0, 0, String_show_STAR__1167};
Value *String__EQ__STAR__1142(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1095 "/home/jim/toccata/core.toc"
return(strEQ(x_0, y_1));
#

};};
FnArity String__EQ__STAR__1168 = {FnArityType, -1, 2, (List *)0, 0, String__EQ__STAR__1142};
Value *String_to_str_1143(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-list
// #line 1049 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)s_0, newList1);
Value *rslt2 = (Value *)newList1;

// static-variadic
// #line 1049 "/home/jim/toccata/core.toc"
Value *rslt3 = str_893(empty_list, (Value *)rslt2);
switch (rslt3->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1049\n");
fprintf(stderr, "Needed StringBuffer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'StringBuffer' From:       \n$TOCCATA_DIR/core.toc:: 457\n");
#endif
abort();
}
return(rslt3);

};};
FnArity String_to_str_1170 = {FnArityType, -1, 1, (List *)0, 0, String_to_str_1143};
Value *String_seq_1144(List *closures, Value *coll_0) {
while (1) {

// inline
// #line 1052 "/home/jim/toccata/core.toc"
return(strSeq(coll_0));
#

};};
FnArity String_seq_1172 = {FnArityType, -1, 1, (List *)0, 0, String_seq_1144};
Value *String_vec_1145(List *closures, Value *coll_0) {
while (1) {

// inline
// #line 1055 "/home/jim/toccata/core.toc"
return(strVec(coll_0));
#

};};
FnArity String_vec_1174 = {FnArityType, -1, 1, (List *)0, 0, String_vec_1145};
Value *anon_1177(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1060\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1060 "/home/jim/toccata/core.toc"
Value *rslt2 = subs_781(empty_list, val1, numPtr0, numPtr3);
return(rslt2);

};};
Value *String_first_1146(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 2);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1058);

// static-fixed
// #line 1058 "/home/jim/toccata/core.toc"
Value *rslt2 = _LT__661(empty_list, numPtr0, rslt1);
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 1;
anon_3->variadic = 0;
anon_3->fn = anon_1177;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)s_0, (List *)anon_3->closures);
Function *anon_1180 = malloc_function(1);
anon_1180->name = "anon";
anon_1180->arityCount = 1;
anon_1180->arities[0] = anon_3;
Value *fn1176 = (Value *)anon_1180;
Value *rslt4 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt2, fn1176, "core", 1058);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1058\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 424\n");
#endif
abort();
}
return(rslt4);

};};
Value *String_first_1182(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1060\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
return(String_first_1146(closures, s_0));
};
FnArity String_first_1181 = {FnArityType, -1, 1, (List *)0, 0, String_first_1182};
Value *String_rest_1147(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// static-fixed
// #line 1063 "/home/jim/toccata/core.toc"
Value *rslt1 = subs_782(empty_list, s_0, numPtr3);
return(rslt1);

};};
Value *String_rest_1184(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1063\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}
return(String_rest_1147(closures, s_0));
};
FnArity String_rest_1183 = {FnArityType, -1, 1, (List *)0, 0, String_rest_1184};
Value *anon_1186(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs5);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1069 "/home/jim/toccata/core.toc"
Value *rslt3 = dec_917(empty_list, val2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index' at $TOCCATA_DIR/core.toc, line 1069\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 841 \n");
#endif
abort();
}

// static-fixed
// #line 1069 "/home/jim/toccata/core.toc"
Value *rslt4 = subs_782(empty_list, val1, rslt3);
return(rslt4);

};};
Value *String_last_1148(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 2);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1066);
Value *n_2 = rslt1;
switch (n_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1066\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}
incRef(n_2, 2);
switch (n_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1066\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1067 "/home/jim/toccata/core.toc"
Value *rslt3 = _LT__661(empty_list, numPtr0, n_2);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_1186;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)s_0, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)n_2, (List *)anon_4->closures);
Function *anon_1189 = malloc_function(1);
anon_1189->name = "anon";
anon_1189->arityCount = 1;
anon_1189->arities[0] = anon_4;
Value *fn1185 = (Value *)anon_1189;
Value *rslt5 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, fn1185, "core", 1067);
switch (rslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1067\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 434\n");
#endif
abort();
}
return(rslt5);

};};
Value *String_last_1191(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1069\n$TOCCATA_DIR/core.toc:: 840 \n");
#endif
abort();
}
return(String_last_1148(closures, s_0));
};
FnArity String_last_1190 = {FnArityType, -1, 1, (List *)0, 0, String_last_1191};
Value *String_butlast_1149(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 3);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1072);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1072\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1072 "/home/jim/toccata/core.toc"
Value *rslt2 = dec_917(empty_list, rslt1);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'length' at $TOCCATA_DIR/core.toc, line 1072\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 846 \n");
#endif
abort();
}

// static-fixed
// #line 1072 "/home/jim/toccata/core.toc"
Value *rslt3 = subs_781(empty_list, s_0, numPtr0, rslt2);
return(rslt3);

};};
Value *String_butlast_1193(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1072\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
return(String_butlast_1149(closures, s_0));
};
FnArity String_butlast_1192 = {FnArityType, -1, 1, (List *)0, 0, String_butlast_1193};
Value *String_reduce_1150(List *closures, Value *s_0, Value *x_1, Value *f_2) {
while (1) {
incRef(s_0, 1);
incRef(x_1, 1);
incRef(f_2, 1);
Value *rslt3 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", s_0, "core", 1077);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1077\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1077\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1077 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, rslt3, x_1, f_2);
return(rslt4);

};};
FnArity String_reduce_1194 = {FnArityType, -1, 3, (List *)0, 0, String_reduce_1150};
Value *String_reverse_1151(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", s_0, "core", 1080);

// type-known for reverse
// #line 1080 "/home/jim/toccata/core.toc"
Value *rslt2 = List_reverse_562(empty_list, rslt1);

// type-known for to-str
// #line 1080 "/home/jim/toccata/core.toc"
Value *rslt3 = List_to_str_809(empty_list, rslt2);
return(rslt3);

};};
FnArity String_reverse_1196 = {FnArityType, -1, 1, (List *)0, 0, String_reverse_1151};
Value *String_split_with_1152(List *closures, Value *s_0, Value *pred_1, Value *prefix_2) {
while (1) {
incRef(s_0, 5);
incRef(pred_1, 3);
incRef(prefix_2, 3);
Value *orRslt3;
Value *rslt4 = proto1Arg(&first_Implementations_336, "<nothing>/first", s_0, "core", 1084);
Value *mv_5 = rslt4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_5, 2);
dec_and_free(pred_1, 4);
dec_and_free(s_0, 2);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *head_8 = rslt7;
incRef(head_8, 3);
Value *andRslt9;

// dynamic unknown type
// #line 1085 "/home/jim/toccata/core.toc"
Value *rslt13;
if((pred_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(pred_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1085\n",
extractStr(type_name(empty_list, pred_1)), pred_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, pred_1, head_8);
} else {
FnArity *arity10 = findFnArity(pred_1, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, head_8);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(head_8, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)pred_1)->name);
  abort();
}
dec_and_free(pred_1, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1085);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt9 = rslt13;
if (isNothing(andRslt9,"",0)) {
dec_and_free(head_8, 2);
dec_and_free(prefix_2, 2);
dec_and_free(pred_1, 2);
dec_and_free(s_0, 2);
} else {
dec_and_free(andRslt9, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", s_0, "core", 1087);
Value *rslt15 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", prefix_2, head_8, "core", 1087);
Value *rslt16 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", rslt14, pred_1, rslt15, "core", 1087);
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1087);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt9 = rslt16;
}
andRslt6 = andRslt9;
}
orRslt3 = andRslt6;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(s_0, 2);
dec_and_free(maybe_3, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt17 = proto1Arg(&to_str_Implementations_328, "<nothing>/to-str", prefix_2, "core", 1088);

// call-vector
// #line 1088 "/home/jim/toccata/core.toc"
Vector *newVect18 = empty_vect;
newVect18 = mutateVectConj(newVect18, rslt17);
newVect18 = mutateVectConj(newVect18, s_0);
Value *rslt19 = (Value *)newVect18;
switch (rslt19->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1088\n$TOCCATA_DIR/core.toc:: 1088\n$TOCCATA_DIR/core.toc:: 1088\n");
#endif
abort();
}
switch (rslt19->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1088\n$TOCCATA_DIR/core.toc: 1088\ncore: 1088                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt19, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1088\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt19))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1088\n$TOCCATA_DIR/core.toc: 1088\ncore: 1088                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt19, 1);
Value *rslt19_0;
Value *rslt19_1;
Value *rslt19_2;
Value **rslt19_args[3] = {&rslt19_0, &rslt19_1, &rslt19_2};
destructValue("$TOCCATA_DIR/core.toc", "1088", (Value *)rslt19, 3, rslt19_args);
dec_and_free(rslt19_0, 1);
dec_and_free(rslt19_1, 1);
dec_and_free(rslt19_2, 1);
}

// static-fixed
// #line 1088 "/home/jim/toccata/core.toc"
Value *rslt20 = maybe_4(empty_list, rslt19);
return(rslt20);
}

};};
Value *String_split_with_1200(List *closures, Value *s_0, Value *pred_1, Value *prefix_2) {
switch (prefix_2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1083\n");
#endif
abort();
}
return(String_split_with_1152(closures, s_0, pred_1, prefix_2));
};
FnArity String_split_with_1199 = {FnArityType, -1, 3, (List *)0, 0, String_split_with_1200};
Value *String_split_with_1153(List *closures, Value *s_0, Value *pred_1) {
while (1) {
incRef(s_0, 3);
incRef(pred_1, 1);

// call-vector
// #line 1091 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1091\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1091\n$TOCCATA_DIR/core.toc:: 1091\n$TOCCATA_DIR/core.toc:: 1091\n");
#endif
abort();
}
Value *rslt4 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", s_0, pred_1, rslt3, "core", 1091);
if (!isNothing(rslt4,"",0)) {
Value *rslt7 = maybeExtract(rslt4);
return(rslt7);
} else {
dec_and_free(rslt4, 1);

// call-vector
// #line 1092 "/home/jim/toccata/core.toc"
Vector *newVect5 = empty_vect;
newVect5 = mutateVectConj(newVect5, strPtr0);
newVect5 = mutateVectConj(newVect5, s_0);
Value *rslt6 = (Value *)newVect5;
return(rslt6);
}

};};
FnArity String_split_with_1201 = {FnArityType, -1, 2, (List *)0, 0, String_split_with_1153};
Value *String_type_name_1154(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr9);

};};
FnArity String_type_name_1203 = {FnArityType, -1, 1, (List *)0, 0, String_type_name_1154};
Value *String_type_args_1155(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-vector
// #line 1025 "/home/jim/toccata/core.toc"
Vector *newVect1 = empty_vect;
newVect1 = mutateVectConj(newVect1, s_0);
Value *rslt2 = (Value *)newVect1;
switch (rslt2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1025\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt2);

};};
FnArity String_type_args_1205 = {FnArityType, -1, 1, (List *)0, 0, String_type_args_1155};
Value *String__LT__STAR__1156(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1104 "/home/jim/toccata/core.toc"
return(strLT(x_0, y_1));
#

};};
FnArity String__LT__STAR__1207 = {FnArityType, -1, 2, (List *)0, 0, String__LT__STAR__1156};
Value *String_zero_1157(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr0);

};};
FnArity String_zero_1209 = {FnArityType, -1, 1, (List *)0, 0, String_zero_1157};
Value *String_comp_STAR__1158(List *closures, Value *s_0, Value *ss_1) {
while (1) {
incRef(s_0, 1);
incRef(ss_1, 1);

// static-fixed
// #line 1037 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, s_0, ss_1);

// type-known for to-str
// #line 1037 "/home/jim/toccata/core.toc"
Value *rslt3 = List_to_str_809(empty_list, rslt2);
return(rslt3);

};};
Value *String_comp_STAR__1212(List *closures, Value *s_0, Value *ss_1) {
switch (ss_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'ss'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ss_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1037\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
return(String_comp_STAR__1158(closures, s_0, ss_1));
};
FnArity String_comp_STAR__1211 = {FnArityType, -1, 2, (List *)0, 0, String_comp_STAR__1212};
Value *String_sha1_update_1159(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {

// inline
// #line 1108 "/home/jim/toccata/core.toc"

  strSha1Update(((Opaque *)ctxt_1)->ptr, x_0);
  dec_and_free(x_0, 1);
  return(ctxt_1);

#

};};
FnArity String_sha1_update_1213 = {FnArityType, -1, 2, (List *)0, 0, String_sha1_update_1159};
Value *String_sha1_1160(List *closures, Value *s_0) {
while (1) {

// inline
// #line 1115 "/home/jim/toccata/core.toc"
return(strSha1(s_0));
#

};};
FnArity String_sha1_1215 = {FnArityType, -1, 1, (List *)0, 0, String_sha1_1160};
Value *anon_1218(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs4);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'index'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 845 \n");
#endif
abort();
}
incRef(val1, 1);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'src'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1101 "/home/jim/toccata/core.toc"
Value *rslt3 = subs_781(empty_list, val1, val2, numPtr3);
return(rslt3);

};};
Value *String_nth_1161(List *closures, Value *s_0, Value *n_1) {
while (1) {
incRef(s_0, 2);
incRef(n_1, 2);
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", s_0, "core", 1099);

// static-fixed
// #line 1099 "/home/jim/toccata/core.toc"
Value *rslt3 = _LT__661(empty_list, n_1, rslt2);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_1218;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)s_0, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)n_1, (List *)anon_4->closures);
Function *anon_1221 = malloc_function(1);
anon_1221->name = "anon";
anon_1221->arityCount = 1;
anon_1221->arities[0] = anon_4;
Value *fn1217 = (Value *)anon_1221;
Value *rslt5 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt3, fn1217, "core", 1099);
switch (rslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1099\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
return(rslt5);

};};
Value *String_nth_1223(List *closures, Value *s_0, Value *n_1) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1101\n$TOCCATA_DIR/core.toc:: 844 \n");
#endif
abort();
}
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1098\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
return(String_nth_1161(closures, s_0, n_1));
};
FnArity String_nth_1222 = {FnArityType, -1, 2, (List *)0, 0, String_nth_1223};
Value *String_empty_QM__1162(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", coll_0, "core", 1041);

// static-fixed
// #line 1041 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1041);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(strPtr0, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 1042 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, strPtr0);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1042\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity String_empty_QM__1224 = {FnArityType, -1, 1, (List *)0, 0, String_empty_QM__1162};
Value *String_empty_1163(List *closures, Value *coll_0) {
while (1) {

dec_and_free(coll_0, 1);
return(strPtr0);

};};
FnArity String_empty_1226 = {FnArityType, -1, 1, (List *)0, 0, String_empty_1163};
Value *Symbol_string_list_1236(List *closures, Value *);
Value *Symbol_show_STAR__1237(List *closures, Value *, Value *);
Value *Symbol__EQ__STAR__1238(List *closures, Value *, Value *);
Value *Symbol_type_name_1239(List *closures, Value *);
Value *Symbol_type_args_1240(List *closures, Value *);
Value *Symbol__LT__STAR__1241(List *closures, Value *, Value *);
Value *Symbol_sha1_update_1242(List *closures, Value *, Value *);
Value *Symbol_sha1_1243(List *closures, Value *);
Value *Symbol_string_list_1236(List *closures, Value *v_0) {
while (1) {

// inline
// #line 1124 "/home/jim/toccata/core.toc"

  Value *strVal = stringValue(((SubString *)v_0)->buffer);
  dec_and_free(v_0, 1);
  return((Value *)listCons(strVal, empty_list));
#

};};
FnArity Symbol_string_list_1244 = {FnArityType, -1, 1, (List *)0, 0, Symbol_string_list_1236};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str10 = {StringBufferType, -1, 1, 0, "'"};
Value *strPtr10 = (Value *)&str10;
Value *Symbol_show_STAR__1237(List *closures, Value *x_0, Value *indent_1) {
while (1) {
incRef(x_0, 1);

dec_and_free(indent_1, 1);
switch (strPtr10->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr10)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1130\n$TOCCATA_DIR/core.toc:: 1130\n");
#endif
abort();
}
Value *rslt2 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", x_0, "core", 1130);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1130\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1130\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1130 "/home/jim/toccata/core.toc"
Value *rslt3 = cons_282(empty_list, strPtr10, rslt2);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt3);

};};
Value *Symbol_show_STAR__1247(List *closures, Value *x_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1129\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Symbol_show_STAR__1237(closures, x_0, indent_1));
};
FnArity Symbol_show_STAR__1246 = {FnArityType, -1, 2, (List *)0, 0, Symbol_show_STAR__1247};
Value *Symbol__EQ__STAR__1238(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1133 "/home/jim/toccata/core.toc"
return(symEQ(x_0, y_1));
#

};};
FnArity Symbol__EQ__STAR__1248 = {FnArityType, -1, 2, (List *)0, 0, Symbol__EQ__STAR__1238};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[7];
} str11 = {StringBufferType, -1, 6, 0, "Symbol"};
Value *strPtr11 = (Value *)&str11;
Value *Symbol_type_name_1239(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr11);

};};
FnArity Symbol_type_name_1250 = {FnArityType, -1, 1, (List *)0, 0, Symbol_type_name_1239};
Value *Symbol_type_args_1240(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 1);

// call-vector
// #line 1121 "/home/jim/toccata/core.toc"
Vector *newVect1 = empty_vect;
newVect1 = mutateVectConj(newVect1, s_0);
Value *rslt2 = (Value *)newVect1;
switch (rslt2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1121\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt2);

};};
FnArity Symbol_type_args_1252 = {FnArityType, -1, 1, (List *)0, 0, Symbol_type_args_1240};
Value *Symbol__LT__STAR__1241(List *closures, Value *x_0, Value *y_1) {
while (1) {

// inline
// #line 1136 "/home/jim/toccata/core.toc"
return(symLT(x_0, y_1));
#

};};
FnArity Symbol__LT__STAR__1254 = {FnArityType, -1, 2, (List *)0, 0, Symbol__LT__STAR__1241};
Value *Symbol_sha1_update_1242(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {

// inline
// #line 1140 "/home/jim/toccata/core.toc"

  SubString *subStrVal = (SubString *)x_0;
  Sha1Update(((Opaque *)ctxt_1)->ptr, (void *)&((Integer *)x_0)->type, 8);
  Sha1Update(((Opaque *)ctxt_1)->ptr, (void *)subStrVal->buffer, subStrVal->len);
  dec_and_free(x_0, 1);
  return(ctxt_1);

#

};};
FnArity Symbol_sha1_update_1256 = {FnArityType, -1, 2, (List *)0, 0, Symbol_sha1_update_1242};
Value *Symbol_sha1_1243(List *closures, Value *s_0) {
while (1) {

// inline
// #line 1149 "/home/jim/toccata/core.toc"
return(symbolSha1(s_0));
#

};};
FnArity Symbol_sha1_1258 = {FnArityType, -1, 1, (List *)0, 0, Symbol_sha1_1243};

// --------- sha1-update-type -------------
Value *sha1_update_type_1261;
Value *sha1_update_type_1262(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {

// inline
// #line 1152 "/home/jim/toccata/core.toc"

  Sha1Update(((Opaque *)ctxt_1)->ptr, (void *)&((Integer *)x_0)->type, 8);
  dec_and_free(x_0, 1);
  return(ctxt_1);

#

};};
FnArity sha1_update_type_1263 = {FnArityType, -1, 2, (List *)0, 0, sha1_update_type_1262};
Function sha1_update_type_1265 = {FunctionType, -1, "sha1-update-type", 1, {&sha1_update_type_1263}};
Value *sha1_update_type_1261 = (Value *)&sha1_update_type_1265;

Value *Maybe_string_list_1272(List *closures, Value *);
Value *Maybe_show_STAR__1273(List *closures, Value *, Value *);
Value *Maybe_type_args_1274(List *closures, Value *);
Value *Maybe_type_name_1275(List *closures, Value *);
Value *Maybe_sha1_update_1276(List *closures, Value *, Value *);
Value *Maybe_sha1_1277(List *closures, Value *);

// --------- anon -------------
Value *fn1278;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str12 = {StringBufferType, -1, 7, 0, "<maybe "};
Value *strPtr12 = (Value *)&str12;
Value *anon_1279(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);

// call-list
// #line 1181 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr12, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n");
#endif
abort();
}
switch (rslt2->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1181                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt2, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt2))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1181                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt2, 1);
Value *rslt2_0;
Value *rslt2_1;
Value **rslt2_args[2] = {&rslt2_0, &rslt2_1};
destructValue("", "0", (Value *)rslt2, 2, rslt2_args);
switch (rslt2_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt2_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n");
#endif
abort();
}
dec_and_free(rslt2_0, 1);
dec_and_free(rslt2_1, 1);
}
Value *rslt3 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", v_0, "core", 1182);

// call-list
// #line 1183 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)strPtr2, newList4);
Value *rslt5 = (Value *)newList4;

// call-list
// #line 1181 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)rslt5, newList6);
newList6 = listCons((Value *)rslt3, newList6);
Value *rslt7 = (Value *)newList6;
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n");
#endif
abort();
}
switch (rslt7->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1181                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt7, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt7))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1181                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt7, 1);
Value *rslt7_0;
Value *rslt7_1;
Value *rslt7_2;
Value **rslt7_args[3] = {&rslt7_0, &rslt7_1, &rslt7_2};
destructValue("$TOCCATA_DIR/core.toc", "1182", (Value *)rslt7, 3, rslt7_args);
switch (rslt7_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1183\n");
#endif
abort();
}
switch (rslt7_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt7_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1183                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt7_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt7_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1181\n$TOCCATA_DIR/core.toc: 1181\ncore: 1183                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt7_1, 1);
Value *rslt7_1_0;
Value *rslt7_1_1;
Value **rslt7_1_args[2] = {&rslt7_1_0, &rslt7_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1182", (Value *)rslt7_1, 2, rslt7_1_args);
switch (rslt7_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1182\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt7_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1181\n$TOCCATA_DIR/core.toc:: 1181\n");
#endif
abort();
}
dec_and_free(rslt7_1_0, 1);
dec_and_free(rslt7_1_1, 1);
}
dec_and_free(rslt7_0, 1);
dec_and_free(rslt7_1, 1);
dec_and_free(rslt7_2, 1);
}

// type-known for comp*
// #line 1181 "/home/jim/toccata/core.toc"
Value *rslt8 = List_comp_STAR__566(empty_list, rslt2, rslt7);
return(rslt8);

};};
FnArity anon_1280 = {FnArityType, -1, 1, (List *)0, 0, anon_1279};
Function anon_1282 = {FunctionType, -1, "anon", 1, {&anon_1280}};
Value *fn1278 = (Value *)&anon_1282;

struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str13 = {StringBufferType, -1, 9, 0, "<nothing>"};
Value *strPtr13 = (Value *)&str13;
Value *Maybe_string_list_1272(List *closures, Value *mv_0) {
while (1) {
incRef(mv_0, 1);
Value *rslt1 = proto2Arg(&map_Implementations_267, "<nothing>/map", mv_0, fn1278, "core", 1180);
if (!isNothing(rslt1,"",0)) {
Value *rslt4 = maybeExtract(rslt1);
return(rslt4);
} else {
dec_and_free(rslt1, 1);

// call-list
// #line 1184 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr13, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt3);
}

};};
FnArity Maybe_string_list_1283 = {FnArityType, -1, 1, (List *)0, 0, Maybe_string_list_1272};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str14 = {StringBufferType, -1, 7, 0, "       "};
Value *strPtr14 = (Value *)&str14;
Value *anon_1286(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val3;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs13[2] = {&val3, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs13);
incRef(val3, 1);

dec_and_free(closuresTail, 1);

// call-list
// #line 1188 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr12, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1188\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n");
#endif
abort();
}
switch (rslt2->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1188\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1188                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt2, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1188\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt2))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1188                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt2, 1);
Value *rslt2_0;
Value *rslt2_1;
Value **rslt2_args[2] = {&rslt2_0, &rslt2_1};
destructValue("$TOCCATA_DIR/core.toc", "1188", (Value *)rslt2, 2, rslt2_args);
switch (rslt2_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1188\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt2_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n");
#endif
abort();
}
dec_and_free(rslt2_0, 1);
dec_and_free(rslt2_1, 1);
}

// call-list
// #line 1189 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)strPtr14, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1189\n$TOCCATA_DIR/core.toc:: 1189\n$TOCCATA_DIR/core.toc:: 1189\n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1189\n$TOCCATA_DIR/core.toc: 1189\ncore: 1189                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1189\n$TOCCATA_DIR/core.toc: 1189\ncore: 1189                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value **rslt5_args[2] = {&rslt5_0, &rslt5_1};
destructValue("", "0", (Value *)rslt5, 2, rslt5_args);
switch (rslt5_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt5_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1189\n$TOCCATA_DIR/core.toc:: 1189\n");
#endif
abort();
}
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
}
Value *rslt6 = proto2Arg(&comp_STAR__Implementations_241, "comp*", val3, rslt5, "core", 1189);
switch (rslt6->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1189\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt7 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", v_0, rslt6, "core", 1189);

// call-list
// #line 1190 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr2, newList8);
Value *rslt9 = (Value *)newList8;

// call-list
// #line 1188 "/home/jim/toccata/core.toc"
List *newList10 = empty_list;
newList10 = listCons((Value *)rslt9, newList10);
newList10 = listCons((Value *)rslt7, newList10);
Value *rslt11 = (Value *)newList10;
switch (rslt11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n");
#endif
abort();
}
switch (rslt11->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1188                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt11, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt11))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1188                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt11, 1);
Value *rslt11_0;
Value *rslt11_1;
Value *rslt11_2;
Value **rslt11_args[3] = {&rslt11_0, &rslt11_1, &rslt11_2};
destructValue("", "0", (Value *)rslt11, 3, rslt11_args);
switch (rslt11_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt11_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1190\n");
#endif
abort();
}
switch (rslt11_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt11_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1190                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt11_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt11_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1188\n$TOCCATA_DIR/core.toc: 1188\ncore: 1190                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt11_1, 1);
Value *rslt11_1_0;
Value *rslt11_1_1;
Value **rslt11_1_args[2] = {&rslt11_1_0, &rslt11_1_1};
destructValue("", "0", (Value *)rslt11_1, 2, rslt11_1_args);
switch (rslt11_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt11_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1188\n$TOCCATA_DIR/core.toc:: 1188\n");
#endif
abort();
}
dec_and_free(rslt11_1_0, 1);
dec_and_free(rslt11_1_1, 1);
}
dec_and_free(rslt11_0, 1);
dec_and_free(rslt11_1, 1);
dec_and_free(rslt11_2, 1);
}

// type-known for comp*
// #line 1188 "/home/jim/toccata/core.toc"
Value *rslt12 = List_comp_STAR__566(empty_list, rslt2, rslt11);
return(rslt12);

};};
Value *Maybe_show_STAR__1273(List *closures, Value *x_0, Value *indent_1) {
while (1) {
incRef(x_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_1286;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)indent_1, (List *)anon_2->closures);
Function *anon_1289 = malloc_function(1);
anon_1289->name = "anon";
anon_1289->arityCount = 1;
anon_1289->arities[0] = anon_2;
Value *fn1285 = (Value *)anon_1289;
Value *rslt3 = proto2Arg(&map_Implementations_267, "<nothing>/map", x_0, fn1285, "core", 1187);
if (!isNothing(rslt3,"",0)) {
Value *rslt6 = maybeExtract(rslt3);
return(rslt6);
} else {
dec_and_free(rslt3, 1);

// call-list
// #line 1191 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)strPtr13, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1191\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt5);
}

};};
Value *Maybe_show_STAR__1291(List *closures, Value *x_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1186\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Maybe_show_STAR__1273(closures, x_0, indent_1));
};
FnArity Maybe_show_STAR__1290 = {FnArityType, -1, 2, (List *)0, 0, Maybe_show_STAR__1291};
Value *Maybe_type_args_1274(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
Value *rslt1 = proto2Arg(&map_Implementations_267, "<nothing>/map", v_0, vector_641, "core", 1161);
if (!isNothing(rslt1,"",0)) {
Value *rslt2 = maybeExtract(rslt1);
return(rslt2);
} else {
dec_and_free(rslt1, 1);
return(empty_vector_1);
}

};};
FnArity Maybe_type_args_1292 = {FnArityType, -1, 1, (List *)0, 0, Maybe_type_args_1274};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[6];
} str15 = {StringBufferType, -1, 5, 0, "Maybe"};
Value *strPtr15 = (Value *)&str15;
Value *Maybe_type_name_1275(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr15);

};};
FnArity Maybe_type_name_1294 = {FnArityType, -1, 1, (List *)0, 0, Maybe_type_name_1275};
Value *anon_1297(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", v_0, val1, "core", 1170);
return(rslt2);

};};
Value *Maybe_sha1_update_1276(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 4);

// static-fixed
// #line 1168 "/home/jim/toccata/core.toc"
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 1;
anon_3->variadic = 0;
anon_3->fn = anon_1297;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)ctxt_1, (List *)anon_3->closures);
Function *anon_1300 = malloc_function(1);
anon_1300->name = "anon";
anon_1300->arityCount = 1;
anon_1300->arities[0] = anon_3;
Value *fn1296 = (Value *)anon_1300;
Value *rslt4 = proto2Arg(&map_Implementations_267, "<nothing>/map", x_0, fn1296, "core", 1169);
if (!isNothing(rslt4,"",0)) {
Value *rslt5 = maybeExtract(rslt4);
return(rslt5);
} else {
dec_and_free(rslt4, 1);
return(ctxt_1);
}

};};
FnArity Maybe_sha1_update_1301 = {FnArityType, -1, 2, (List *)0, 0, Maybe_sha1_update_1276};
Value *Maybe_sha1_1277(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 1174 "/home/jim/toccata/core.toc"
Value *rslt1 = sha1_init_446(empty_list);
Value *ctxt_2 = rslt1;
incRef(ctxt_2, 3);
Value *rslt3 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_0, ctxt_2, "core", 1175);

dec_and_free(rslt3, 1);

// static-fixed
// #line 1176 "/home/jim/toccata/core.toc"
Value *rslt4 = sha1_finalize_452(empty_list, ctxt_2);
switch (rslt4->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1176\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt4);

};};
FnArity Maybe_sha1_1303 = {FnArityType, -1, 1, (List *)0, 0, Maybe_sha1_1277};

// --------- range* -------------
Value *range_STAR__1306;
Value *range_STAR__1307(List *closures, Value *n_0, Value *l_1) {
while (1) {
incRef(n_0, 7);
incRef(l_1, 5);
Value *orRslt2;
Value *andRslt3;

// static-fixed
// #line 1197 "/home/jim/toccata/core.toc"
Value *rslt4 = _EQ__703(empty_list, n_0, numPtr0);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1197);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(numPtr0, 1);
dec_and_free(l_1, 2);
dec_and_free(maybe_3, 1);
dec_and_free(cons_281, 1);
} else {
dec_and_free(andRslt3, 1);

// static-fixed
// #line 1197 "/home/jim/toccata/core.toc"
Value *rslt5 = cons_282(empty_list, numPtr0, l_1);

// static-fixed
// #line 1197 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_4(empty_list, rslt5);
andRslt3 = rslt6;
}
orRslt2 = andRslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(_LT__659, 1);
dec_and_free(n_0, 2);
dec_and_free(numPtr0, 1);
dec_and_free(l_1, 2);
dec_and_free(maybe_3, 1);

} else {
dec_and_free(orRslt2, 1);
Value *andRslt7;

// static-fixed
// #line 1198 "/home/jim/toccata/core.toc"
Value *rslt8 = _LT__661(empty_list, n_0, numPtr0);
if (rslt8->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1198);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
abort();
}
andRslt7 = rslt8;
if (isNothing(andRslt7,"",0)) {
dec_and_free(l_1, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt7, 1);

// static-fixed
// #line 1198 "/home/jim/toccata/core.toc"
Value *rslt9 = maybe_4(empty_list, l_1);
andRslt7 = rslt9;
}
orRslt2 = andRslt7;
}
if (!isNothing(orRslt2,"",0)) {
Value *rslt16 = maybeExtract(orRslt2);
return(rslt16);
} else {
dec_and_free(orRslt2, 1);

// static-fixed
// #line 1199 "/home/jim/toccata/core.toc"
Value *rslt10 = dec_917(empty_list, n_0);

// static-fixed
// #line 1199 "/home/jim/toccata/core.toc"
Value *rslt11 = cons_282(empty_list, n_0, l_1);
Value *rslt15;
FnArity *arity12 = findFnArity(range_STAR__1306, 2);
if(arity12 != (FnArity *)0 && !arity12->variadic) { FnType2 *fn14 = (FnType2 *)arity12->fn;


// dynamic fn type
// #line 1199 "/home/jim/toccata/core.toc"
rslt15 = fn14(arity12->closures, rslt10, rslt11);
} else if(arity12 != (FnArity *)0 && arity12->variadic) { FnType1 *fn14 = (FnType1 *)arity12->fn;
List *dynArgs13 = empty_list;
dynArgs13 = (List *)listCons(rslt11, dynArgs13);
dynArgs13 = (List *)listCons(rslt10, dynArgs13);

// dynamic fn type
// #line 1199 "/home/jim/toccata/core.toc"
rslt15 = fn14(arity12->closures, (Value *)dynArgs13);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)range_STAR__1306)->name, "core", 1199);
  abort();
}
dec_and_free(range_STAR__1306, 1);
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1199\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1196\n");
#endif
abort();
}
return(rslt15);
}

};};
Value *range_STAR__1309(List *closures, Value *n_0, Value *l_1) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1193\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1194\n");
#endif
abort();
}
switch (l_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1193\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1195\n");
#endif
abort();
}
return(range_STAR__1307(closures, n_0, l_1));
};
FnArity range_STAR__1308 = {FnArityType, -1, 2, (List *)0, 0, range_STAR__1309};
Function range_STAR__1310 = {FunctionType, -1, "range*", 1, {&range_STAR__1308}};
Value *range_STAR__1306 = (Value *)&range_STAR__1310;


// --------- range -------------
Value *range_1312;
Value *range_1313(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);

// static-fixed
// #line 1202 "/home/jim/toccata/core.toc"
Value *rslt1 = dec_917(empty_list, n_0);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1202\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1202\n$TOCCATA_DIR/core.toc:: 1194\n");
#endif
abort();
}

// static-fixed
// #line 1202 "/home/jim/toccata/core.toc"
Value *rslt2 = range_STAR__1307(empty_list, rslt1, empty_list_0);
return(rslt2);

};};
Value *range_1315(List *closures, Value *n_0) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1201\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1202\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}
return(range_1313(closures, n_0));
};
FnArity range_1314 = {FnArityType, -1, 1, (List *)0, 0, range_1315};
Function range_1316 = {FunctionType, -1, "range", 1, {&range_1314}};
Value *range_1312 = (Value *)&range_1316;


// --------- apply-to-vectors -------------
Value *apply_to_vectors_1318;
Value *anon_1325(List *closures, Value *new_args_0, Value *arg_vect_1) {

while (1) {
incRef(new_args_0, 1);
incRef(arg_vect_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs5);
incRef(val2, 1);

dec_and_free(closuresTail, 1);
Value *rslt3 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", arg_vect_1, val2, "core", 1210);
Value *rslt4 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", new_args_0, rslt3, "core", 1210);
return(rslt4);

};};
Value *anon_1323(List *closures, Value *new_args_0, Value *v_1) {

while (1) {
incRef(new_args_0, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs5);
incRef(val2, 1);

dec_and_free(closuresTail, 1);
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 2;
anon_3->variadic = 0;
anon_3->fn = anon_1325;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)v_1, (List *)anon_3->closures);
Function *anon_1328 = malloc_function(1);
anon_1328->name = "anon";
anon_1328->arityCount = 1;
anon_1328->arities[0] = anon_3;
Value *fn1324 = (Value *)anon_1328;
Value *rslt4 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", val2, new_args_0, fn1324, "core", 1208);
return(rslt4);

};};
Value *anon_1333(List *closures, Value *args_0) {

while (1) {
incRef(args_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", args_0, "core", 1212);

// call-list
// #line 1212 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)rslt2, newList3);
Value *rslt4 = (Value *)newList3;
switch (rslt4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1212\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1212\n$TOCCATA_DIR/core.toc:: 1212\n$TOCCATA_DIR/core.toc:: 1212\n");
#endif
abort();
}
switch (rslt4->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1212\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1212\n$TOCCATA_DIR/core.toc: 1212\ncore: 1212                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt4, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1212\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt4))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1212\n$TOCCATA_DIR/core.toc: 1212\ncore: 1212                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt4, 1);
Value *rslt4_0;
Value *rslt4_1;
Value **rslt4_args[2] = {&rslt4_0, &rslt4_1};
destructValue("$TOCCATA_DIR/core.toc", "1212", (Value *)rslt4, 2, rslt4_args);
dec_and_free(rslt4_0, 1);
dec_and_free(rslt4_1, 1);
}
Value *rslt5 = proto2Arg(&apply_STAR__Implementations_275, "apply*", val1, rslt4, "core", 1212);
return(rslt5);

};};
Value *apply_to_vectors_1319(List *closures, Value *f_0, Value *vects_1, Value *arg_vects_2) {
while (1) {
incRef(f_0, 2);
incRef(vects_1, 3);
incRef(arg_vects_2, 2);
Value *rslt3 = proto1Arg(&first_Implementations_336, "<nothing>/first", vects_1, "core", 1205);
Value *wrapper_4 = rslt3;
incRef(wrapper_4, 1);
Value *mv_5 = wrapper_4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(vects_1, 2);
dec_and_free(mv_5, 2);
dec_and_free(arg_vects_2, 1);
dec_and_free(wrapper_4, 1);
dec_and_free(apply_to_vectors_1318, 1);
dec_and_free(f_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *vect_8 = rslt7;
incRef(vect_8, 1);
Value *__9 = wrapper_4;

dec_and_free(__9, 1);
Value *rslt10 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", vects_1, "core", 1206);

// call-vector
// #line 1207 "/home/jim/toccata/core.toc"
Vector *newVect11 = empty_vect;
Value *rslt12 = (Value *)newVect11;
switch (rslt12->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1207\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt12)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1207\n$TOCCATA_DIR/core.toc:: 1207\n$TOCCATA_DIR/core.toc:: 1207\n");
#endif
abort();
}
FnArity *anon_13 = malloc_fnArity();
anon_13->count = 2;
anon_13->variadic = 0;
anon_13->fn = anon_1323;
anon_13->closures = empty_list;
anon_13->closures = listCons((Value *)arg_vects_2, (List *)anon_13->closures);
Function *anon_1331 = malloc_function(1);
anon_1331->name = "anon";
anon_1331->arityCount = 1;
anon_1331->arities[0] = anon_13;
Value *fn1322 = (Value *)anon_1331;
Value *rslt14 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", vect_8, rslt12, fn1322, "core", 1207);
Value *rslt18;
FnArity *arity15 = findFnArity(apply_to_vectors_1318, 3);
if(arity15 != (FnArity *)0 && !arity15->variadic) { FnType3 *fn17 = (FnType3 *)arity15->fn;


// dynamic fn type
// #line 1206 "/home/jim/toccata/core.toc"
rslt18 = fn17(arity15->closures, f_0, rslt10, rslt14);
} else if(arity15 != (FnArity *)0 && arity15->variadic) { FnType1 *fn17 = (FnType1 *)arity15->fn;
List *dynArgs16 = empty_list;
dynArgs16 = (List *)listCons(rslt14, dynArgs16);
dynArgs16 = (List *)listCons(rslt10, dynArgs16);
dynArgs16 = (List *)listCons(f_0, dynArgs16);

// dynamic fn type
// #line 1206 "/home/jim/toccata/core.toc"
rslt18 = fn17(arity15->closures, (Value *)dynArgs16);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)apply_to_vectors_1318)->name, "core", 1206);
  abort();
}
dec_and_free(apply_to_vectors_1318, 1);
Value *mv_19 = rslt18;
incRef(mv_19, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt20 = maybe_4(empty_list, mv_19);
andRslt6 = rslt20;
}
if (!isNothing(andRslt6,"",0)) {
Value *rslt23 = maybeExtract(andRslt6);
return(rslt23);
} else {
dec_and_free(andRslt6, 1);
FnArity *anon_21 = malloc_fnArity();
anon_21->count = 1;
anon_21->variadic = 0;
anon_21->fn = anon_1333;
anon_21->closures = empty_list;
anon_21->closures = listCons((Value *)f_0, (List *)anon_21->closures);
Function *anon_1336 = malloc_function(1);
anon_1336->name = "anon";
anon_1336->arityCount = 1;
anon_1336->arities[0] = anon_21;
Value *fn1332 = (Value *)anon_1336;
Value *rslt22 = proto2Arg(&map_Implementations_267, "<nothing>/map", arg_vects_2, fn1332, "core", 1211);
return(rslt22);
}

};};
FnArity apply_to_vectors_1337 = {FnArityType, -1, 3, (List *)0, 0, apply_to_vectors_1319};
Function apply_to_vectors_1339 = {FunctionType, -1, "apply-to-vectors", 1, {&apply_to_vectors_1337}};
Value *apply_to_vectors_1318 = (Value *)&apply_to_vectors_1339;

Value *List_string_list_1354(List *closures, Value *);
Value *List_show_STAR__1355(List *closures, Value *, Value *);
Value *List_last_1356(List *closures, Value *);
Value *List_butlast_1357(List *closures, Value *);
Value *List_split_1358(List *closures, Value *, Value *, Value *);
Value *List_split_1359(List *closures, Value *, Value *);
Value *List_split_with_1360(List *closures, Value *, Value *, Value *);
Value *List_split_with_1361(List *closures, Value *, Value *);
Value *List_type_name_1362(List *closures, Value *);
Value *List_type_args_1363(List *closures, Value *);
Value *List_sha1_update_1364(List *closures, Value *, Value *);
Value *List_sha1_1365(List *closures, Value *);
Value *List_nth_1366(List *closures, Value *, Value *);
Value *List_apply_STAR__1367(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str16 = {StringBufferType, -1, 1, 0, "("};
Value *strPtr16 = (Value *)&str16;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[3];
} str17 = {StringBufferType, -1, 2, 0, ", "};
Value *strPtr17 = (Value *)&str17;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str18 = {StringBufferType, -1, 1, 0, ")"};
Value *strPtr18 = (Value *)&str18;
Value *List_string_list_1354(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);

// call-list
// #line 1221 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr16, newList1);
Value *rslt2 = (Value *)newList1;
switch (strPtr17->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr17)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1222\n$TOCCATA_DIR/core.toc:: 1222\n");
#endif
abort();
}

// static-fixed
// #line 1222 "/home/jim/toccata/core.toc"
Value *rslt3 = interpose_863(empty_list, l_0, strPtr17);
Value *rslt4 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", rslt3, string_list_795, "core", 1222);

// call-list
// #line 1223 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
newList5 = listCons((Value *)strPtr18, newList5);
Value *rslt6 = (Value *)newList5;

// call-list
// #line 1221 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)rslt6, newList7);
newList7 = listCons((Value *)rslt4, newList7);
newList7 = listCons((Value *)rslt2, newList7);
Value *rslt8 = (Value *)newList7;
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n");
#endif
abort();
}
switch (rslt8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1221                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8, 1)) < 3) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 3, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1221                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8, 1);
Value *rslt8_0;
Value *rslt8_1;
Value *rslt8_2;
Value *rslt8_3;
Value **rslt8_args[4] = {&rslt8_0, &rslt8_1, &rslt8_2, &rslt8_3};
destructValue("", "0", (Value *)rslt8, 4, rslt8_args);
switch (rslt8_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n");
#endif
abort();
}
switch (rslt8_0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8_0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1221                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8_0, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8_0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1221                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8_0, 1);
Value *rslt8_0_0;
Value *rslt8_0_1;
Value **rslt8_0_args[2] = {&rslt8_0_0, &rslt8_0_1};
destructValue("", "0", (Value *)rslt8_0, 2, rslt8_0_args);
switch (rslt8_0_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt8_0_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n");
#endif
abort();
}
dec_and_free(rslt8_0_0, 1);
dec_and_free(rslt8_0_1, 1);
}
switch (rslt8_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8_2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1223\n");
#endif
abort();
}
switch (rslt8_2->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8_2)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1223                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8_2, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8_2))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1221\n$TOCCATA_DIR/core.toc: 1221\ncore: 1223                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8_2, 1);
Value *rslt8_2_0;
Value *rslt8_2_1;
Value **rslt8_2_args[2] = {&rslt8_2_0, &rslt8_2_1};
destructValue("", "0", (Value *)rslt8_2, 2, rslt8_2_args);
switch (rslt8_2_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt8_2_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1221\n$TOCCATA_DIR/core.toc:: 1221\n");
#endif
abort();
}
dec_and_free(rslt8_2_0, 1);
dec_and_free(rslt8_2_1, 1);
}
dec_and_free(rslt8_0, 1);
dec_and_free(rslt8_1, 1);
dec_and_free(rslt8_2, 1);
dec_and_free(rslt8_3, 1);
}

// static-fixed
// #line 1221 "/home/jim/toccata/core.toc"
Value *rslt9 = list_concat_99(empty_list, rslt8);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt9);

};};
FnArity List_string_list_1368 = {FnArityType, -1, 1, (List *)0, 0, List_string_list_1354};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[3];
} str19 = {StringBufferType, -1, 2, 0, ",\n"};
Value *strPtr19 = (Value *)&str19;
Value *anon_1372(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val1, 3);

dec_and_free(closuresTail, 1);
switch (strPtr19->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr19)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1231\n$TOCCATA_DIR/core.toc:: 1231\n");
#endif
abort();
}

// call-list
// #line 1232 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr4, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1232\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1232\n$TOCCATA_DIR/core.toc:: 1232\n$TOCCATA_DIR/core.toc:: 1232\n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1232\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1232\n$TOCCATA_DIR/core.toc: 1232\ncore: 1232                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1232\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1232\n$TOCCATA_DIR/core.toc: 1232\ncore: 1232                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value **rslt3_args[2] = {&rslt3_0, &rslt3_1};
destructValue("$TOCCATA_DIR/core.toc", "1232", (Value *)rslt3, 2, rslt3_args);
switch (rslt3_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1232\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1232\n$TOCCATA_DIR/core.toc:: 1232\n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
}
Value *rslt4 = proto2Arg(&comp_STAR__Implementations_241, "comp*", val1, rslt3, "core", 1232);
switch (rslt4->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1232\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1232\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt5 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", x_0, rslt4, "core", 1232);

// call-list
// #line 1231 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)rslt5, newList6);
newList6 = listCons((Value *)strPtr4, newList6);
newList6 = listCons((Value *)val1, newList6);
newList6 = listCons((Value *)strPtr19, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1231 "/home/jim/toccata/core.toc"
Value *rslt8 = list_STAR__617(empty_list, (Value *)rslt7);
return(rslt8);

};};
Value *List_show_STAR__1355(List *closures, Value *x_0, Value *indent_1) {
while (1) {
incRef(x_0, 3);
incRef(indent_1, 2);
Value *rslt2 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", x_0, "core", 1226);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1226\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_3, string_list_795);
if (!isNothing(rslt4,"",0)) {
Value *rslt22 = maybeExtract(rslt4);
return(rslt22);
} else {
dec_and_free(rslt4, 1);
Value *h_7;
Value *tail_5;
Value **destArgs6[2] = {&h_7, &tail_5};
destructValue("core", "1227", (Value *)x_0, 2, destArgs6);
incRef(h_7, 1);

// (assert (instance? List tail))

// call-list
// #line 1229 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr4, newList8);
Value *rslt9 = (Value *)newList8;
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n");
#endif
abort();
}
switch (rslt9->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1229                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt9, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt9))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1229                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt9, 1);
Value *rslt9_0;
Value *rslt9_1;
Value **rslt9_args[2] = {&rslt9_0, &rslt9_1};
destructValue("$TOCCATA_DIR/core.toc", "1229", (Value *)rslt9, 2, rslt9_args);
switch (rslt9_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt9_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n");
#endif
abort();
}
dec_and_free(rslt9_0, 1);
dec_and_free(rslt9_1, 1);
}
Value *rslt10 = proto2Arg(&comp_STAR__Implementations_241, "comp*", indent_1, rslt9, "core", 1229);
switch (rslt10->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt11 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", h_7, rslt10, "core", 1229);
switch (rslt11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1229\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1229 "/home/jim/toccata/core.toc"
Value *rslt12 = cons_282(empty_list, strPtr16, rslt11);
Value *l_13 = tail_5;
incRef(l_13, 1);
switch (l_13->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_13)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_14 = malloc_fnArity();
anon_14->count = 1;
anon_14->variadic = 0;
anon_14->fn = anon_1372;
anon_14->closures = empty_list;
anon_14->closures = listCons((Value *)indent_1, (List *)anon_14->closures);
Function *anon_1375 = malloc_function(1);
anon_1375->name = "anon";
anon_1375->arityCount = 1;
anon_1375->arities[0] = anon_14;
Value *fn1371 = (Value *)anon_1375;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt15 = list_map_93(empty_list, l_13, fn1371);
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt16 = list_concat_99(empty_list, rslt15);

// call-list
// #line 1233 "/home/jim/toccata/core.toc"
List *newList17 = empty_list;
newList17 = listCons((Value *)strPtr18, newList17);
Value *rslt18 = (Value *)newList17;

// call-list
// #line 1229 "/home/jim/toccata/core.toc"
List *newList19 = empty_list;
newList19 = listCons((Value *)rslt18, newList19);
newList19 = listCons((Value *)rslt16, newList19);
Value *rslt20 = (Value *)newList19;
switch (rslt20->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt20)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n");
#endif
abort();
}
switch (rslt20->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt20)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1229                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt20, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt20))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1229                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt20, 1);
Value *rslt20_0;
Value *rslt20_1;
Value *rslt20_2;
Value **rslt20_args[3] = {&rslt20_0, &rslt20_1, &rslt20_2};
destructValue("$TOCCATA_DIR/core.toc", "1230", (Value *)rslt20, 3, rslt20_args);
switch (rslt20_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt20_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1233\n");
#endif
abort();
}
switch (rslt20_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt20_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1233                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt20_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt20_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1229\n$TOCCATA_DIR/core.toc: 1229\ncore: 1233                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt20_1, 1);
Value *rslt20_1_0;
Value *rslt20_1_1;
Value **rslt20_1_args[2] = {&rslt20_1_0, &rslt20_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1230", (Value *)rslt20_1, 2, rslt20_1_args);
switch (rslt20_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1230\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt20_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1229\n$TOCCATA_DIR/core.toc:: 1229\n");
#endif
abort();
}
dec_and_free(rslt20_1_0, 1);
dec_and_free(rslt20_1_1, 1);
}
dec_and_free(rslt20_0, 1);
dec_and_free(rslt20_1, 1);
dec_and_free(rslt20_2, 1);
}

// type-known for comp*
// #line 1229 "/home/jim/toccata/core.toc"
Value *rslt21 = List_comp_STAR__566(empty_list, rslt12, rslt20);
switch (rslt21->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1228\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt21)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt21);
}

};};
Value *List_show_STAR__1377(List *closures, Value *x_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1225\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(List_show_STAR__1355(closures, x_0, indent_1));
};
FnArity List_show_STAR__1376 = {FnArityType, -1, 2, (List *)0, 0, List_show_STAR__1377};
Value *List_last_1356(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 3);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", coll_0, "core", 1260);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1260\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1260\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1260 "/home/jim/toccata/core.toc"
Value *rslt2 = dec_917(empty_list, rslt1);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1260\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1260\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
Value *rslt3 = proto2Arg(&nth_Implementations_385, "<nothing>/nth", coll_0, rslt2, "core", 1260);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1260\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 434\n");
#endif
abort();
}
return(rslt3);

};};
FnArity List_last_1378 = {FnArityType, -1, 1, (List *)0, 0, List_last_1356};
Value *List_butlast_1357(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 3);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", coll_0, "core", 1263);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1263\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1263\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1263 "/home/jim/toccata/core.toc"
Value *rslt2 = dec_917(empty_list, rslt1);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1263\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1263\n$TOCCATA_DIR/core.toc:: 442 \n");
#endif
abort();
}
Value *rslt3 = proto2Arg(&split_Implementations_323, "<nothing>/split", coll_0, rslt2, "core", 1263);
Value *r_6;
Value *arg7;
Value *tail_4;
Value **destArgs5[3] = {&r_6, &arg7, &tail_4};
destructValue("core", "1263", (Value *)rslt3, 3, destArgs5);
incRef(r_6, 1);

dec_and_free(arg7, 1);

dec_and_free(tail_4, 1);
return(r_6);

};};
FnArity List_butlast_1380 = {FnArityType, -1, 1, (List *)0, 0, List_butlast_1357};
Value *List_split_1358(List *closures, Value *l_0, Value *n_1, Value *prefix_2) {
while (1) {
incRef(l_0, 5);
incRef(n_1, 3);
incRef(prefix_2, 3);
Value *andRslt3;

// static-fixed
// #line 1268 "/home/jim/toccata/core.toc"
Value *rslt4 = _LT__661(empty_list, numPtr0, n_1);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1268);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(l_0, 2);
} else {
dec_and_free(andRslt3, 1);
Value *rslt5 = proto1Arg(&first_Implementations_336, "<nothing>/first", l_0, "core", 1269);
andRslt3 = rslt5;
}
Value *wrapper_6 = andRslt3;
incRef(wrapper_6, 1);
Value *mv_7 = wrapper_6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_7, 2);
dec_and_free(l_0, 2);
dec_and_free(wrapper_6, 1);
dec_and_free(maybe_3, 1);
dec_and_free(cons_281, 1);
dec_and_free(n_1, 2);
dec_and_free(dec_916, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);
Value *head_10 = rslt9;
incRef(head_10, 1);
Value *__11 = wrapper_6;

dec_and_free(__11, 1);
Value *rslt12 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", l_0, "core", 1270);

// static-fixed
// #line 1270 "/home/jim/toccata/core.toc"
Value *rslt13 = dec_917(empty_list, n_1);

// static-fixed
// #line 1270 "/home/jim/toccata/core.toc"
Value *rslt14 = cons_282(empty_list, head_10, prefix_2);
Value *rslt15 = proto3Arg(&split_Implementations_325, "<nothing>/split", rslt12, rslt13, rslt14, "core", 1270);
Value *mv_16 = rslt15;
incRef(mv_16, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt17 = maybe_4(empty_list, mv_16);
andRslt8 = rslt17;
}
if (!isNothing(andRslt8,"",0)) {
Value *rslt21 = maybeExtract(andRslt8);
return(rslt21);
} else {
dec_and_free(andRslt8, 1);
Value *rslt18 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", prefix_2, "core", 1271);

// call-vector
// #line 1271 "/home/jim/toccata/core.toc"
Vector *newVect19 = empty_vect;
newVect19 = mutateVectConj(newVect19, rslt18);
newVect19 = mutateVectConj(newVect19, l_0);
Value *rslt20 = (Value *)newVect19;
return(rslt20);
}

};};
Value *List_split_1384(List *closures, Value *l_0, Value *n_1, Value *prefix_2) {
switch (prefix_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1267\n");
#endif
abort();
}
return(List_split_1358(closures, l_0, n_1, prefix_2));
};
FnArity List_split_1383 = {FnArityType, -1, 3, (List *)0, 0, List_split_1384};
Value *List_split_1359(List *closures, Value *l_0, Value *n_1) {
while (1) {
incRef(l_0, 1);
incRef(n_1, 1);
Value *rslt2 = proto3Arg(&split_Implementations_325, "<nothing>/split", l_0, n_1, empty_list_0, "core", 1274);
return(rslt2);

};};
Value *List_split_1386(List *closures, Value *l_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1273\n$TOCCATA_DIR/core.toc:: 442 \n");
#endif
abort();
}
return(List_split_1359(closures, l_0, n_1));
};
FnArity List_split_1385 = {FnArityType, -1, 2, (List *)0, 0, List_split_1386};
Value *List_split_with_1360(List *closures, Value *l_0, Value *pred_1, Value *prefix_2) {
while (1) {
incRef(l_0, 5);
incRef(pred_1, 3);
incRef(prefix_2, 3);
Value *orRslt3;
Value *rslt4 = proto1Arg(&first_Implementations_336, "<nothing>/first", l_0, "core", 1278);
Value *mv_5 = rslt4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_5, 2);
dec_and_free(pred_1, 4);
dec_and_free(l_0, 2);
dec_and_free(cons_281, 1);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *head_8 = rslt7;
incRef(head_8, 3);
Value *andRslt9;

// dynamic unknown type
// #line 1279 "/home/jim/toccata/core.toc"
Value *rslt13;
if((pred_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(pred_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1279\n",
extractStr(type_name(empty_list, pred_1)), pred_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, pred_1, head_8);
} else {
FnArity *arity10 = findFnArity(pred_1, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, head_8);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(head_8, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)pred_1)->name);
  abort();
}
dec_and_free(pred_1, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1279);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt9 = rslt13;
if (isNothing(andRslt9,"",0)) {
dec_and_free(head_8, 2);
dec_and_free(prefix_2, 2);
dec_and_free(pred_1, 2);
dec_and_free(l_0, 2);
dec_and_free(cons_281, 1);
} else {
dec_and_free(andRslt9, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", l_0, "core", 1280);

// static-fixed
// #line 1280 "/home/jim/toccata/core.toc"
Value *rslt15 = cons_282(empty_list, head_8, prefix_2);
Value *rslt16 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", rslt14, pred_1, rslt15, "core", 1280);
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1280);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt9 = rslt16;
}
andRslt6 = andRslt9;
}
orRslt3 = andRslt6;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(l_0, 2);
dec_and_free(maybe_3, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt17 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", prefix_2, "core", 1281);

// call-vector
// #line 1281 "/home/jim/toccata/core.toc"
Vector *newVect18 = empty_vect;
newVect18 = mutateVectConj(newVect18, rslt17);
newVect18 = mutateVectConj(newVect18, l_0);
Value *rslt19 = (Value *)newVect18;
switch (rslt19->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1281\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1281\n$TOCCATA_DIR/core.toc:: 1281\n$TOCCATA_DIR/core.toc:: 1281\n");
#endif
abort();
}
switch (rslt19->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1281\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1281\n$TOCCATA_DIR/core.toc: 1281\ncore: 1281                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt19, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1281\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt19))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1281\n$TOCCATA_DIR/core.toc: 1281\ncore: 1281                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt19, 1);
Value *rslt19_0;
Value *rslt19_1;
Value *rslt19_2;
Value **rslt19_args[3] = {&rslt19_0, &rslt19_1, &rslt19_2};
destructValue("$TOCCATA_DIR/core.toc", "1281", (Value *)rslt19, 3, rslt19_args);
dec_and_free(rslt19_0, 1);
dec_and_free(rslt19_1, 1);
dec_and_free(rslt19_2, 1);
}

// static-fixed
// #line 1281 "/home/jim/toccata/core.toc"
Value *rslt20 = maybe_4(empty_list, rslt19);
return(rslt20);
}

};};
Value *List_split_with_1389(List *closures, Value *l_0, Value *pred_1, Value *prefix_2) {
switch (prefix_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1277\n");
#endif
abort();
}
return(List_split_with_1360(closures, l_0, pred_1, prefix_2));
};
FnArity List_split_with_1388 = {FnArityType, -1, 3, (List *)0, 0, List_split_with_1389};
Value *List_split_with_1361(List *closures, Value *l_0, Value *pred_1) {
while (1) {
incRef(l_0, 3);
incRef(pred_1, 1);
Value *rslt2 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", l_0, pred_1, empty_list_0, "core", 1284);
if (!isNothing(rslt2,"",0)) {
Value *rslt5 = maybeExtract(rslt2);
return(rslt5);
} else {
dec_and_free(rslt2, 1);

// call-vector
// #line 1285 "/home/jim/toccata/core.toc"
Vector *newVect3 = empty_vect;
newVect3 = mutateVectConj(newVect3, empty_list_0);
newVect3 = mutateVectConj(newVect3, l_0);
Value *rslt4 = (Value *)newVect3;
return(rslt4);
}

};};
FnArity List_split_with_1390 = {FnArityType, -1, 2, (List *)0, 0, List_split_with_1361};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[5];
} str20 = {StringBufferType, -1, 4, 0, "List"};
Value *strPtr20 = (Value *)&str20;
Value *List_type_name_1362(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr20);

};};
FnArity List_type_name_1392 = {FnArityType, -1, 1, (List *)0, 0, List_type_name_1362};
Value *List_type_args_1363(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 1);
Value *rslt1 = proto1Arg(&vec_Implementations_341, "<nothing>/vec", l_0, "core", 1217);
switch (rslt1->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1217\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(rslt1);

};};
FnArity List_type_args_1394 = {FnArityType, -1, 1, (List *)0, 0, List_type_args_1363};

// --------- anon -------------
Value *fn1396;
Value *anon_1397(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1239);
return(rslt2);

};};
FnArity anon_1398 = {FnArityType, -1, 2, (List *)0, 0, anon_1397};
Function anon_1400 = {FunctionType, -1, "anon", 1, {&anon_1398}};
Value *fn1396 = (Value *)&anon_1400;

Value *List_sha1_update_1364(List *closures, Value *l_0, Value *ctxt_1) {
while (1) {
incRef(l_0, 3);
incRef(ctxt_1, 3);

// static-fixed
// #line 1237 "/home/jim/toccata/core.toc"
Value *rslt2 = sha1_update_type_1262(empty_list, l_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", l_0, ctxt_1, fn1396, "core", 1238);
return(rslt3);

};};
FnArity List_sha1_update_1401 = {FnArityType, -1, 2, (List *)0, 0, List_sha1_update_1364};

// --------- anon -------------
Value *fn1403;
Value *anon_1404(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1246);
return(rslt2);

};};
FnArity anon_1405 = {FnArityType, -1, 2, (List *)0, 0, anon_1404};
Function anon_1407 = {FunctionType, -1, "anon", 1, {&anon_1405}};
Value *fn1403 = (Value *)&anon_1407;

Value *List_sha1_1365(List *closures, Value *l_0) {
while (1) {
incRef(l_0, 3);

// static-fixed
// #line 1243 "/home/jim/toccata/core.toc"
Value *rslt1 = sha1_init_446(empty_list);
Value *ctxt_2 = rslt1;
incRef(ctxt_2, 5);

// static-fixed
// #line 1244 "/home/jim/toccata/core.toc"
Value *rslt3 = sha1_update_type_1262(empty_list, l_0, ctxt_2);

dec_and_free(rslt3, 1);
Value *rslt4 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", l_0, ctxt_2, fn1403, "core", 1245);

dec_and_free(rslt4, 1);

// static-fixed
// #line 1247 "/home/jim/toccata/core.toc"
Value *rslt5 = sha1_finalize_452(empty_list, ctxt_2);
switch (rslt5->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1247\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt5);

};};
FnArity List_sha1_1408 = {FnArityType, -1, 1, (List *)0, 0, List_sha1_1365};
Value *List_nth_1366(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 3);
incRef(n_1, 5);
Value *orRslt2;
Value *andRslt3;

// static-fixed
// #line 1289 "/home/jim/toccata/core.toc"
Value *rslt4 = _EQ__703(empty_list, n_1, numPtr0);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1289);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(coll_0, 2);
} else {
dec_and_free(andRslt3, 1);
Value *rslt5 = proto1Arg(&first_Implementations_336, "<nothing>/first", coll_0, "core", 1289);
andRslt3 = rslt5;
}
orRslt2 = andRslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(_LT__659, 1);
dec_and_free(numPtr0, 1);
dec_and_free(n_1, 4);
dec_and_free(dec_916, 1);
dec_and_free(coll_0, 2);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *andRslt6;

// static-fixed
// #line 1290 "/home/jim/toccata/core.toc"
Value *rslt7 = _LT__661(empty_list, numPtr0, n_1);
if (rslt7->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1290);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
abort();
}
andRslt6 = rslt7;
if (isNothing(andRslt6,"",0)) {
dec_and_free(n_1, 2);
dec_and_free(dec_916, 1);
dec_and_free(coll_0, 2);
return(nothing);
} else {
dec_and_free(andRslt6, 1);
Value *rslt8 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", coll_0, "core", 1290);

// static-fixed
// #line 1290 "/home/jim/toccata/core.toc"
Value *rslt9 = dec_917(empty_list, n_1);
switch (rslt9->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1290\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1290\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
Value *rslt10 = proto2Arg(&nth_Implementations_385, "<nothing>/nth", rslt8, rslt9, "core", 1290);
switch (rslt10->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1290\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
return(rslt10);
}
orRslt2 = andRslt6;
}

};};
Value *List_nth_1411(List *closures, Value *coll_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1288\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
return(List_nth_1366(closures, coll_0, n_1));
};
FnArity List_nth_1410 = {FnArityType, -1, 2, (List *)0, 0, List_nth_1411};
Value *List_apply_STAR__1367(List *closures, Value *mf_0, Value *vects_1) {
while (1) {
incRef(mf_0, 1);
incRef(vects_1, 3);
Value *rslt2 = proto1Arg(&first_Implementations_336, "<nothing>/first", mf_0, "core", 1251);
Value *wrapper_3 = rslt2;
incRef(wrapper_3, 1);
Value *mv_4 = wrapper_3;
incRef(mv_4, 2);
Value *andRslt5;
andRslt5 = mv_4;
if (isNothing(andRslt5,"",0)) {
dec_and_free(vector_641, 1);
dec_and_free(vects_1, 4);
dec_and_free(apply_to_vectors_1318, 1);
dec_and_free(maybe_3, 1);
dec_and_free(mv_4, 2);
dec_and_free(wrapper_3, 1);
} else {
dec_and_free(andRslt5, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt6 = Maybe_extract_510(empty_list, mv_4);
Value *f_7 = rslt6;
incRef(f_7, 1);
Value *rslt8 = proto1Arg(&first_Implementations_336, "<nothing>/first", vects_1, "core", 1252);
Value *mv_9 = rslt8;
incRef(mv_9, 2);
Value *andRslt10;
andRslt10 = mv_9;
if (isNothing(andRslt10,"",0)) {
dec_and_free(vector_641, 1);
dec_and_free(f_7, 2);
dec_and_free(vects_1, 2);
dec_and_free(apply_to_vectors_1318, 1);
dec_and_free(mv_9, 2);
dec_and_free(maybe_3, 1);
dec_and_free(wrapper_3, 1);
} else {
dec_and_free(andRslt10, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt11 = Maybe_extract_510(empty_list, mv_9);
Value *vect_12 = rslt11;
incRef(vect_12, 1);
Value *__13 = wrapper_3;

dec_and_free(__13, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", vects_1, "core", 1254);
Value *rslt15 = proto2Arg(&map_Implementations_267, "<nothing>/map", vect_12, vector_641, "core", 1255);

// static-fixed
// #line 1253 "/home/jim/toccata/core.toc"
Value *rslt16 = apply_to_vectors_1319(empty_list, f_7, rslt14, rslt15);
Value *rslt17 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", rslt16, "core", 1253);
Value *mv_18 = rslt17;
incRef(mv_18, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt19 = maybe_4(empty_list, mv_18);
andRslt10 = rslt19;
}
andRslt5 = andRslt10;
}
if (!isNothing(andRslt5,"",0)) {
Value *rslt20 = maybeExtract(andRslt5);
return(rslt20);
} else {
dec_and_free(andRslt5, 1);
return(empty_list_0);
}

};};
FnArity List_apply_STAR__1414 = {FnArityType, -1, 2, (List *)0, 0, List_apply_STAR__1367};

// --------- vec= -------------
Value *vec_EQ__1417;
Value *vec_EQ__1418(List *closures, Value *x_0, Value *y_1, Value *n_2) {
while (1) {
incRef(x_0, 3);
incRef(y_1, 3);
incRef(n_2, 3);
Value *orRslt3;

// static-fixed
// #line 1295 "/home/jim/toccata/core.toc"
Value *rslt4 = _EQ__703(empty_list, numPtr0, n_2);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1295);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
orRslt3 = rslt4;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(n_2, 2);
dec_and_free(y_1, 4);
dec_and_free(x_0, 4);
dec_and_free(_EQ__701, 1);
dec_and_free(dec_916, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);

// static-fixed
// #line 1296 "/home/jim/toccata/core.toc"
Value *rslt5 = dec_917(empty_list, n_2);
Value *n_6 = rslt5;
incRef(n_6, 5);
Value *andRslt7;
Value *rslt8 = proto2Arg(&get_Implementations_413, "<nothing>/get", x_0, n_6, "core", 1297);
Value *rslt9 = proto2Arg(&get_Implementations_413, "<nothing>/get", y_1, n_6, "core", 1297);

// static-fixed
// #line 1297 "/home/jim/toccata/core.toc"
Value *rslt10 = _EQ__703(empty_list, rslt8, rslt9);
if (rslt10->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1297);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt10)));
abort();
}
andRslt7 = rslt10;
if (isNothing(andRslt7,"",0)) {
dec_and_free(n_6, 2);
dec_and_free(y_1, 2);
dec_and_free(x_0, 2);
return(nothing);
} else {
dec_and_free(andRslt7, 1);

// recursive-fixed
// #line 1298 "/home/jim/toccata/core.toc"
x_0 = x_0;
y_1 = y_1;
n_2 = n_6;
}
orRslt3 = andRslt7;
}

};};
Value *vec_EQ__1420(List *closures, Value *x_0, Value *y_1, Value *n_2) {
switch (x_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1292\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1293\n");
#endif
abort();
}
switch (n_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1292\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1294\n");
#endif
abort();
}
return(vec_EQ__1418(closures, x_0, y_1, n_2));
};
FnArity vec_EQ__1419 = {FnArityType, -1, 3, (List *)0, 0, vec_EQ__1420};
Function vec_EQ__1421 = {FunctionType, -1, "vec=", 1, {&vec_EQ__1419}};
Value *vec_EQ__1417 = (Value *)&vec_EQ__1421;


// --------- subvec* -------------
Value *subvec_STAR__1423;
Value *anon_1427(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val7;
Value *val5;
Value *val4;
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs12[6] = {&val7, &val5, &val4, &val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 6, destArgs12);
incRef(val7, 1);
incRef(val5, 1);
switch (val5->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, val5)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1308\n$TOCCATA_DIR/core.toc:: 96  \n");
#endif
abort();
}
incRef(val4, 1);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1308\n$TOCCATA_DIR/core.toc:: 936 \n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1308 "/home/jim/toccata/core.toc"
Value *rslt3 = inc_899(empty_list, val2);

// static-fixed
// #line 1308 "/home/jim/toccata/core.toc"
Value *rslt6 = mutate_vect_conj_87(empty_list, val5, x_0);
Value *rslt11;
FnArity *arity8 = findFnArity(val7, 4);
if(arity8 != (FnArity *)0 && !arity8->variadic) { FnType4 *fn10 = (FnType4 *)arity8->fn;


// dynamic fn type
// #line 1308 "/home/jim/toccata/core.toc"
rslt11 = fn10(arity8->closures, val1, rslt3, val4, rslt6);
} else if(arity8 != (FnArity *)0 && arity8->variadic) { FnType1 *fn10 = (FnType1 *)arity8->fn;
List *dynArgs9 = empty_list;
dynArgs9 = (List *)listCons(rslt6, dynArgs9);
dynArgs9 = (List *)listCons(val4, dynArgs9);
dynArgs9 = (List *)listCons(rslt3, dynArgs9);
dynArgs9 = (List *)listCons(val1, dynArgs9);

// dynamic fn type
// #line 1308 "/home/jim/toccata/core.toc"
rslt11 = fn10(arity8->closures, (Value *)dynArgs9);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)val7)->name, "core", 1308);
  abort();
}
dec_and_free(val7, 1);
return(rslt11);

};};
Value *subvec_STAR__1424(List *closures, Value *v_0, Value *curr_index_1, Value *max_index_2, Value *result_3) {
while (1) {
incRef(v_0, 2);
incRef(curr_index_1, 4);
incRef(max_index_2, 2);
incRef(result_3, 2);
Value *andRslt4;

// static-fixed
// #line 1305 "/home/jim/toccata/core.toc"
Value *rslt5 = _LT__EQ__691(empty_list, curr_index_1, max_index_2);
andRslt4 = rslt5;
if (isNothing(andRslt4,"",0)) {
dec_and_free(subvec_STAR__1423, 1);
dec_and_free(maybe_map_479, 1);
dec_and_free(curr_index_1, 3);
dec_and_free(result_3, 1);
dec_and_free(max_index_2, 1);
dec_and_free(v_0, 3);
} else {
dec_and_free(andRslt4, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", v_0, curr_index_1, "core", 1306);
Value *mv_7 = rslt6;
switch (mv_7->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1306\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_7)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_7, 1);
switch (mv_7->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_7)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_1427;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)v_0, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)curr_index_1, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)max_index_2, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)result_3, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)subvec_STAR__1423, (List *)anon_8->closures);
Function *anon_1430 = malloc_function(1);
anon_1430->name = "anon";
anon_1430->arityCount = 1;
anon_1430->arities[0] = anon_8;
Value *fn1426 = (Value *)anon_1430;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt9 = maybe_map_480(empty_list, mv_7, fn1426);
andRslt4 = rslt9;
}
if (!isNothing(andRslt4,"",0)) {
Value *rslt10 = maybeExtract(andRslt4);
return(rslt10);
} else {
dec_and_free(andRslt4, 1);
return(result_3);
}

};};
Value *subvec_STAR__1432(List *closures, Value *v_0, Value *curr_index_1, Value *max_index_2, Value *result_3) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 1300\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1301\n");
#endif
abort();
}
switch (curr_index_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'curr-index' at $TOCCATA_DIR/core.toc, line 1300\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, curr_index_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1302\n");
#endif
abort();
}
switch (max_index_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'max-index' at $TOCCATA_DIR/core.toc, line 1300\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, max_index_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1303\n");
#endif
abort();
}
switch (result_3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'result' at $TOCCATA_DIR/core.toc, line 1300\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, result_3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1304\n");
#endif
abort();
}
return(subvec_STAR__1424(closures, v_0, curr_index_1, max_index_2, result_3));
};
FnArity subvec_STAR__1431 = {FnArityType, -1, 4, (List *)0, 0, subvec_STAR__1432};
Function subvec_STAR__1433 = {FunctionType, -1, "subvec*", 1, {&subvec_STAR__1431}};
Value *subvec_STAR__1423 = (Value *)&subvec_STAR__1433;


// --------- subvec -------------
Value *subvec_1435;
Value *subvec_1437(List *closures, Value *v_0, Value *start_1) {
while (1) {
incRef(v_0, 3);
incRef(start_1, 1);
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", v_0, "core", 1314);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'max-index' at $TOCCATA_DIR/core.toc, line 1314\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1314\n$TOCCATA_DIR/core.toc:: 1303\n");
#endif
abort();
}

// static-fixed
// #line 1314 "/home/jim/toccata/core.toc"
Value *rslt3 = subvec_STAR__1424(empty_list, v_0, start_1, rslt2, empty_vector_1);
return(rslt3);

};};
Value *subvec_1439(List *closures, Value *v_0, Value *start_1) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 1311\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1314\n$TOCCATA_DIR/core.toc:: 1301\n");
#endif
abort();
}
switch (start_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'start' at $TOCCATA_DIR/core.toc, line 1311\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, start_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1314\n$TOCCATA_DIR/core.toc:: 1302\n");
#endif
abort();
}
return(subvec_1437(closures, v_0, start_1));
};
FnArity subvec_1438 = {FnArityType, -1, 2, (List *)0, 0, subvec_1439};
Value *subvec_1436(List *closures, Value *v_0, Value *start_1, Value *len_2) {
while (1) {
incRef(v_0, 1);
incRef(start_1, 3);
incRef(len_2, 1);

// static-fixed
// #line 1316 "/home/jim/toccata/core.toc"
Value *rslt3 = _PLUS__649(empty_list, start_1, len_2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1316\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1316 "/home/jim/toccata/core.toc"
Value *rslt4 = dec_917(empty_list, rslt3);
switch (rslt4->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'max-index' at $TOCCATA_DIR/core.toc, line 1316\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 1303\n");
#endif
abort();
}

// static-fixed
// #line 1316 "/home/jim/toccata/core.toc"
Value *rslt5 = subvec_STAR__1424(empty_list, v_0, start_1, rslt4, empty_vector_1);
return(rslt5);

};};
Value *subvec_1441(List *closures, Value *v_0, Value *start_1, Value *len_2) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 1311\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 1301\n");
#endif
abort();
}
switch (start_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'start' at $TOCCATA_DIR/core.toc, line 1311\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, start_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 108 \n");
#endif
abort();
}
switch (len_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 1311\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, len_2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}
return(subvec_1436(closures, v_0, start_1, len_2));
};
FnArity subvec_1440 = {FnArityType, -1, 3, (List *)0, 0, subvec_1441};
Function subvec_1442 = {FunctionType, -1, "subvec", 2, {&subvec_1438, &subvec_1440}};
Value *subvec_1435 = (Value *)&subvec_1442;


// --------- vect-reduce -------------
Value *vect_reduce_1444;
Value *anon_1448(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val10;
Value *val5;
Value *val4;
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs15[6] = {&val10, &val5, &val4, &val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 6, destArgs15);
incRef(val10, 1);
incRef(val5, 3);
incRef(val4, 1);
incRef(val2, 1);
switch (val2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, val2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1322\n$TOCCATA_DIR/core.toc:: 936 \n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1322 "/home/jim/toccata/core.toc"
Value *rslt3 = inc_899(empty_list, val2);

// dynamic unknown type
// #line 1322 "/home/jim/toccata/core.toc"
Value *rslt9;
if((val5)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val5->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at core: 1322\n",
extractStr(type_name(empty_list, val5)), val5->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt9 = _fn(_arity->closures, val5, val4, x_0);
} else {
FnArity *arity6 = findFnArity(val5, 2);
if(arity6 != (FnArity *)0 && !arity6->variadic) {
FnType2 *fn8 = (FnType2 *)arity6->fn;
rslt9 = fn8(arity6->closures, val4, x_0);
} else if(arity6 != (FnArity *)0 && arity6->variadic) {
FnType1 *fn8 = (FnType1 *)arity6->fn;
List *dynArgs7 = empty_list;
dynArgs7 = (List *)listCons(x_0, dynArgs7);
dynArgs7 = (List *)listCons(val4, dynArgs7);
rslt9 = fn8(arity6->closures, (Value *)dynArgs7);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val5)->name);
  abort();
}
dec_and_free(val5, 1);
}
Value *rslt14;
FnArity *arity11 = findFnArity(val10, 4);
if(arity11 != (FnArity *)0 && !arity11->variadic) { FnType4 *fn13 = (FnType4 *)arity11->fn;


// dynamic fn type
// #line 1322 "/home/jim/toccata/core.toc"
rslt14 = fn13(arity11->closures, val1, rslt3, rslt9, val5);
} else if(arity11 != (FnArity *)0 && arity11->variadic) { FnType1 *fn13 = (FnType1 *)arity11->fn;
List *dynArgs12 = empty_list;
dynArgs12 = (List *)listCons(val5, dynArgs12);
dynArgs12 = (List *)listCons(rslt9, dynArgs12);
dynArgs12 = (List *)listCons(rslt3, dynArgs12);
dynArgs12 = (List *)listCons(val1, dynArgs12);

// dynamic fn type
// #line 1322 "/home/jim/toccata/core.toc"
rslt14 = fn13(arity11->closures, (Value *)dynArgs12);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)val10)->name, "core", 1322);
  abort();
}
dec_and_free(val10, 1);
return(rslt14);

};};
Value *vect_reduce_1445(List *closures, Value *v_0, Value *n_1, Value *result_2, Value *f_3) {
while (1) {
incRef(v_0, 2);
incRef(n_1, 2);
incRef(result_2, 2);
Value *rslt4 = proto2Arg(&get_Implementations_413, "<nothing>/get", v_0, n_1, "core", 1320);
Value *mv_5 = rslt4;
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1320\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_5, 1);
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 1;
anon_6->variadic = 0;
anon_6->fn = anon_1448;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)v_0, (List *)anon_6->closures);
anon_6->closures = listCons((Value *)n_1, (List *)anon_6->closures);
anon_6->closures = listCons((Value *)result_2, (List *)anon_6->closures);
anon_6->closures = listCons((Value *)f_3, (List *)anon_6->closures);
anon_6->closures = listCons((Value *)vect_reduce_1444, (List *)anon_6->closures);
Function *anon_1451 = malloc_function(1);
anon_1451->name = "anon";
anon_1451->arityCount = 1;
anon_1451->arities[0] = anon_6;
Value *fn1447 = (Value *)anon_1451;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_map_480(empty_list, mv_5, fn1447);
if (!isNothing(rslt7,"",0)) {
Value *rslt8 = maybeExtract(rslt7);
return(rslt8);
} else {
dec_and_free(rslt7, 1);
return(result_2);
}

};};
Value *vect_reduce_1453(List *closures, Value *v_0, Value *n_1, Value *result_2, Value *f_3) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v' at $TOCCATA_DIR/core.toc, line 1318\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1319\n");
#endif
abort();
}
return(vect_reduce_1445(closures, v_0, n_1, result_2, f_3));
};
FnArity vect_reduce_1452 = {FnArityType, -1, 4, (List *)0, 0, vect_reduce_1453};
Function vect_reduce_1454 = {FunctionType, -1, "vect-reduce", 1, {&vect_reduce_1452}};
Value *vect_reduce_1444 = (Value *)&vect_reduce_1454;

Value *Vector_string_list_1483(List *closures, Value *);
Value *Vector_show_STAR__1484(List *closures, Value *, Value *);
Value *Vector__EQ__STAR__1485(List *closures, Value *, Value *);
Value *Vector_vec_1486(List *closures, Value *);
Value *Vector_first_1487(List *closures, Value *);
Value *Vector_rest_1488(List *closures, Value *);
Value *Vector_last_1489(List *closures, Value *);
Value *Vector_butlast_1490(List *closures, Value *);
Value *Vector_reverse_1491(List *closures, Value *);
Value *Vector_reduce_1492(List *closures, Value *, Value *, Value *);
Value *Vector_split_1493(List *closures, Value *, Value *, Value *);
Value *Vector_split_1494(List *closures, Value *, Value *);
Value *Vector_split_with_1495(List *closures, Value *, Value *, Value *);
Value *Vector_split_with_1496(List *closures, Value *, Value *);
Value *Vector_type_name_1497(List *closures, Value *);
Value *Vector_type_args_1498(List *closures, Value *);
Value *Vector_zero_1499(List *closures, Value *);
Value *Vector_comp_STAR__1500(List *closures, Value *, Value *);
Value *Vector_sha1_update_1501(List *closures, Value *, Value *);
Value *Vector_sha1_1502(List *closures, Value *);
Value *Vector_nth_1503(List *closures, Value *, Value *);
Value *Vector_store_1504(List *closures, Value *, Value *, Value *);
Value *Vector_map_1505(List *closures, Value *, Value *);
Value *Vector_wrap_1506(List *closures, Value *, Value *);
Value *Vector_apply_STAR__1507(List *closures, Value *, Value *);
Value *Vector_flat_map_1508(List *closures, Value *, Value *);
Value *Vector_flatten_1509(List *closures, Value *);
Value *Vector_filter_1510(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str21 = {StringBufferType, -1, 1, 0, "["};
Value *strPtr21 = (Value *)&str21;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str22 = {StringBufferType, -1, 1, 0, "]"};
Value *strPtr22 = (Value *)&str22;
Value *Vector_string_list_1483(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);

// call-list
// #line 1332 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr21, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n");
#endif
abort();
}
switch (rslt2->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1332                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt2, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt2))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1332                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt2, 1);
Value *rslt2_0;
Value *rslt2_1;
Value **rslt2_args[2] = {&rslt2_0, &rslt2_1};
destructValue("", "0", (Value *)rslt2, 2, rslt2_args);
switch (rslt2_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt2_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n");
#endif
abort();
}
dec_and_free(rslt2_0, 1);
dec_and_free(rslt2_1, 1);
}
Value *rslt3 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", v_0, "core", 1333);
Value *l_4 = rslt3;
switch (l_4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_4)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_4, 1);
switch (l_4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_4)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt5 = list_map_93(empty_list, l_4, str_892);

// static-fixed
// #line 1333 "/home/jim/toccata/core.toc"
Value *rslt6 = interpose_863(empty_list, rslt5, strPtr17);

// call-list
// #line 1334 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)strPtr22, newList7);
Value *rslt8 = (Value *)newList7;

// call-list
// #line 1332 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)rslt8, newList9);
newList9 = listCons((Value *)rslt6, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1332                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1332                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value *rslt10_2;
Value **rslt10_args[3] = {&rslt10_0, &rslt10_1, &rslt10_2};
destructValue("$TOCCATA_DIR/core.toc", "1333", (Value *)rslt10, 3, rslt10_args);
switch (rslt10_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1334\n");
#endif
abort();
}
switch (rslt10_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1334                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1332\n$TOCCATA_DIR/core.toc: 1332\ncore: 1334                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10_1, 1);
Value *rslt10_1_0;
Value *rslt10_1_1;
Value **rslt10_1_args[2] = {&rslt10_1_0, &rslt10_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1333", (Value *)rslt10_1, 2, rslt10_1_args);
switch (rslt10_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1333\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1332\n$TOCCATA_DIR/core.toc:: 1332\n");
#endif
abort();
}
dec_and_free(rslt10_1_0, 1);
dec_and_free(rslt10_1_1, 1);
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
dec_and_free(rslt10_2, 1);
}

// type-known for comp*
// #line 1332 "/home/jim/toccata/core.toc"
Value *rslt11 = List_comp_STAR__566(empty_list, rslt2, rslt10);
switch (rslt11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt11);

};};
FnArity Vector_string_list_1511 = {FnArityType, -1, 1, (List *)0, 0, Vector_string_list_1483};
Value *anon_1515(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val1, 3);

dec_and_free(closuresTail, 1);

// call-list
// #line 1342 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)strPtr4, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1342\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1342\n$TOCCATA_DIR/core.toc:: 1342\n$TOCCATA_DIR/core.toc:: 1342\n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1342\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1342\n$TOCCATA_DIR/core.toc: 1342\ncore: 1342                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1342\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1342\n$TOCCATA_DIR/core.toc: 1342\ncore: 1342                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value **rslt3_args[2] = {&rslt3_0, &rslt3_1};
destructValue("$TOCCATA_DIR/core.toc", "1342", (Value *)rslt3, 2, rslt3_args);
switch (rslt3_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1342\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1342\n$TOCCATA_DIR/core.toc:: 1342\n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
}
Value *rslt4 = proto2Arg(&comp_STAR__Implementations_241, "comp*", val1, rslt3, "core", 1342);
switch (rslt4->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1342\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1342\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt5 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", x_0, rslt4, "core", 1342);

// call-list
// #line 1341 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)rslt5, newList6);
newList6 = listCons((Value *)strPtr4, newList6);
newList6 = listCons((Value *)val1, newList6);
newList6 = listCons((Value *)strPtr19, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1341 "/home/jim/toccata/core.toc"
Value *rslt8 = list_STAR__617(empty_list, (Value *)rslt7);
return(rslt8);

};};
Value *Vector_show_STAR__1484(List *closures, Value *x_0, Value *indent_1) {
while (1) {
incRef(x_0, 3);
incRef(indent_1, 2);
Value *rslt2 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", x_0, "core", 1337);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1337\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_3, string_list_795);
if (!isNothing(rslt4,"",0)) {
Value *rslt23 = maybeExtract(rslt4);
return(rslt23);
} else {
dec_and_free(rslt4, 1);
Value *rslt5 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", x_0, "core", 1338);
Value *h_8;
Value *tail_6;
Value **destArgs7[2] = {&h_8, &tail_6};
destructValue("core", "1338", (Value *)rslt5, 2, destArgs7);
incRef(h_8, 1);

// call-list
// #line 1339 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)strPtr4, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1339                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1339                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value **rslt10_args[2] = {&rslt10_0, &rslt10_1};
destructValue("$TOCCATA_DIR/core.toc", "1339", (Value *)rslt10, 2, rslt10_args);
switch (rslt10_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n");
#endif
abort();
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
}
Value *rslt11 = proto2Arg(&comp_STAR__Implementations_241, "comp*", indent_1, rslt10, "core", 1339);
switch (rslt11->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt12 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", h_8, rslt11, "core", 1339);
switch (rslt12->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt12)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1339 "/home/jim/toccata/core.toc"
Value *rslt13 = cons_282(empty_list, strPtr21, rslt12);
Value *l_14 = tail_6;
incRef(l_14, 1);
switch (l_14->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_14)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_15 = malloc_fnArity();
anon_15->count = 1;
anon_15->variadic = 0;
anon_15->fn = anon_1515;
anon_15->closures = empty_list;
anon_15->closures = listCons((Value *)indent_1, (List *)anon_15->closures);
Function *anon_1518 = malloc_function(1);
anon_1518->name = "anon";
anon_1518->arityCount = 1;
anon_1518->arities[0] = anon_15;
Value *fn1514 = (Value *)anon_1518;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt16 = list_map_93(empty_list, l_14, fn1514);
switch (rslt16->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt17 = list_concat_99(empty_list, rslt16);

// call-list
// #line 1343 "/home/jim/toccata/core.toc"
List *newList18 = empty_list;
newList18 = listCons((Value *)strPtr22, newList18);
Value *rslt19 = (Value *)newList18;

// call-list
// #line 1339 "/home/jim/toccata/core.toc"
List *newList20 = empty_list;
newList20 = listCons((Value *)rslt19, newList20);
newList20 = listCons((Value *)rslt17, newList20);
Value *rslt21 = (Value *)newList20;
switch (rslt21->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt21)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n");
#endif
abort();
}
switch (rslt21->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt21)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1339                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt21, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt21))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1339                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt21, 1);
Value *rslt21_0;
Value *rslt21_1;
Value *rslt21_2;
Value **rslt21_args[3] = {&rslt21_0, &rslt21_1, &rslt21_2};
destructValue("$TOCCATA_DIR/core.toc", "1340", (Value *)rslt21, 3, rslt21_args);
switch (rslt21_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt21_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1343\n");
#endif
abort();
}
switch (rslt21_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt21_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1343                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt21_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt21_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1339\n$TOCCATA_DIR/core.toc: 1339\ncore: 1343                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt21_1, 1);
Value *rslt21_1_0;
Value *rslt21_1_1;
Value **rslt21_1_args[2] = {&rslt21_1_0, &rslt21_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1340", (Value *)rslt21_1, 2, rslt21_1_args);
switch (rslt21_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1340\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt21_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1339\n$TOCCATA_DIR/core.toc:: 1339\n");
#endif
abort();
}
dec_and_free(rslt21_1_0, 1);
dec_and_free(rslt21_1_1, 1);
}
dec_and_free(rslt21_0, 1);
dec_and_free(rslt21_1, 1);
dec_and_free(rslt21_2, 1);
}

// type-known for comp*
// #line 1339 "/home/jim/toccata/core.toc"
Value *rslt22 = List_comp_STAR__566(empty_list, rslt13, rslt21);
switch (rslt22->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1339\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt22)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt22);
}

};};
Value *Vector_show_STAR__1520(List *closures, Value *x_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1336\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Vector_show_STAR__1484(closures, x_0, indent_1));
};
FnArity Vector_show_STAR__1519 = {FnArityType, -1, 2, (List *)0, 0, Vector_show_STAR__1520};
Value *Vector__EQ__STAR__1485(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 7);
incRef(y_1, 5);
Value *andRslt2;

// type-known for instance?
// #line 1452 "/home/jim/toccata/core.toc"
Value *rslt3 = arityImpl183(empty_list, reifiedPtr187, y_1);
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(vec_EQ__1417, 1);
dec_and_free(y_1, 4);
dec_and_free(x_0, 8);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt4 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1453);
Value *rslt5 = proto1Arg(&count_Implementations_310, "<nothing>/count", y_1, "core", 1453);

// static-fixed
// #line 1453 "/home/jim/toccata/core.toc"
Value *rslt6 = _EQ__703(empty_list, rslt4, rslt5);
if (rslt6->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1453);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
abort();
}
andRslt2 = rslt6;
if (isNothing(andRslt2,"",0)) {
dec_and_free(vec_EQ__1417, 1);
dec_and_free(y_1, 2);
dec_and_free(x_0, 6);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1454);
switch (rslt7->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1454\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1454\n$TOCCATA_DIR/core.toc:: 1294\n");
#endif
abort();
}

// static-fixed
// #line 1454 "/home/jim/toccata/core.toc"
Value *rslt8 = vec_EQ__1418(empty_list, x_0, y_1, rslt7);
andRslt2 = rslt8;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 1455 "/home/jim/toccata/core.toc"
Value *rslt9 = maybe_4(empty_list, x_0);
switch (rslt9->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1455\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt9);
}
}
}

};};
FnArity Vector__EQ__STAR__1521 = {FnArityType, -1, 2, (List *)0, 0, Vector__EQ__STAR__1485};
Value *Vector_vec_1486(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
return(v_0);

};};
Value *Vector_vec_1524(List *closures, Value *v_0) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:             \n$TOCCATA_DIR/core.toc:: 419\n");
#endif
abort();
}
return(Vector_vec_1486(closures, v_0));
};
FnArity Vector_vec_1523 = {FnArityType, -1, 1, (List *)0, 0, Vector_vec_1524};
Value *Vector_first_1487(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
Value *rslt1 = proto2Arg(&get_Implementations_413, "<nothing>/get", v_0, numPtr0, "core", 1400);
switch (rslt1->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1400\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 424\n");
#endif
abort();
}
return(rslt1);

};};
FnArity Vector_first_1525 = {FnArityType, -1, 1, (List *)0, 0, Vector_first_1487};
Value *Vector_rest_1488(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);

// static-fixed
// #line 1403 "/home/jim/toccata/core.toc"
Value *rslt1 = subvec_1437(empty_list, v_0, numPtr3);
return(rslt1);

};};
Value *Vector_rest_1528(List *closures, Value *v_0) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1403\n$TOCCATA_DIR/core.toc:: 1314\n$TOCCATA_DIR/core.toc:: 1301\n");
#endif
abort();
}
return(Vector_rest_1488(closures, v_0));
};
FnArity Vector_rest_1527 = {FnArityType, -1, 1, (List *)0, 0, Vector_rest_1528};
Value *Vector_last_1489(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 5);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", v_0, "core", 1406);

// static-fixed
// #line 1406 "/home/jim/toccata/core.toc"
Value *rslt3 = _LT__661(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1406);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(dec_916, 1);
dec_and_free(v_0, 4);
return(nothing);
} else {
dec_and_free(andRslt1, 1);
Value *rslt4 = proto1Arg(&count_Implementations_310, "<nothing>/count", v_0, "core", 1407);
switch (rslt4->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1407\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1407\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1407 "/home/jim/toccata/core.toc"
Value *rslt5 = dec_917(empty_list, rslt4);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", v_0, rslt5, "core", 1407);
switch (rslt6->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1407\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 434\n");
#endif
abort();
}
return(rslt6);
}

};};
FnArity Vector_last_1529 = {FnArityType, -1, 1, (List *)0, 0, Vector_last_1489};
Value *Vector_butlast_1490(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 3);
Value *rslt1 = proto1Arg(&count_Implementations_310, "<nothing>/count", v_0, "core", 1410);
switch (rslt1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1410\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1410\n$TOCCATA_DIR/core.toc:: 946 \n");
#endif
abort();
}

// static-fixed
// #line 1410 "/home/jim/toccata/core.toc"
Value *rslt2 = dec_917(empty_list, rslt1);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'len' at $TOCCATA_DIR/core.toc, line 1410\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1410\n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}

// static-fixed
// #line 1410 "/home/jim/toccata/core.toc"
Value *rslt3 = subvec_1436(empty_list, v_0, numPtr0, rslt2);
return(rslt3);

};};
Value *Vector_butlast_1532(List *closures, Value *v_0) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1410\n$TOCCATA_DIR/core.toc:: 1316\n$TOCCATA_DIR/core.toc:: 1301\n");
#endif
abort();
}
return(Vector_butlast_1490(closures, v_0));
};
FnArity Vector_butlast_1531 = {FnArityType, -1, 1, (List *)0, 0, Vector_butlast_1532};
Value *Vector_reverse_1491(List *closures, Value *v_0) {
while (1) {

// inline
// #line 1413 "/home/jim/toccata/core.toc"
return(vectorReverse(v_0));
#

};};
FnArity Vector_reverse_1533 = {FnArityType, -1, 1, (List *)0, 0, Vector_reverse_1491};
Value *Vector_reduce_1492(List *closures, Value *v_0, Value *result_1, Value *f_2) {
while (1) {
incRef(v_0, 1);
incRef(result_1, 1);
incRef(f_2, 1);

// static-fixed
// #line 1416 "/home/jim/toccata/core.toc"
Value *rslt3 = vect_reduce_1445(empty_list, v_0, numPtr0, result_1, f_2);
return(rslt3);

};};
Value *Vector_reduce_1536(List *closures, Value *v_0, Value *result_1, Value *f_2) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1416\n$TOCCATA_DIR/core.toc:: 1319\n");
#endif
abort();
}
return(Vector_reduce_1492(closures, v_0, result_1, f_2));
};
FnArity Vector_reduce_1535 = {FnArityType, -1, 3, (List *)0, 0, Vector_reduce_1536};
Value *Vector_split_1493(List *closures, Value *l_0, Value *n_1, Value *prefix_2) {
while (1) {
incRef(l_0, 5);
incRef(n_1, 3);
incRef(prefix_2, 3);
Value *andRslt3;

// static-fixed
// #line 1420 "/home/jim/toccata/core.toc"
Value *rslt4 = _LT__661(empty_list, numPtr0, n_1);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1420);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(l_0, 2);
} else {
dec_and_free(andRslt3, 1);
Value *rslt5 = proto1Arg(&first_Implementations_336, "<nothing>/first", l_0, "core", 1421);
andRslt3 = rslt5;
}
Value *wrapper_6 = andRslt3;
incRef(wrapper_6, 1);
Value *mv_7 = wrapper_6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_7, 2);
dec_and_free(l_0, 2);
dec_and_free(wrapper_6, 1);
dec_and_free(maybe_3, 1);
dec_and_free(n_1, 2);
dec_and_free(dec_916, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);
Value *head_10 = rslt9;
incRef(head_10, 1);
Value *__11 = wrapper_6;

dec_and_free(__11, 1);
Value *rslt12 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", l_0, "core", 1422);

// static-fixed
// #line 1422 "/home/jim/toccata/core.toc"
Value *rslt13 = dec_917(empty_list, n_1);
Value *rslt14 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", prefix_2, head_10, "core", 1422);
Value *rslt15 = proto3Arg(&split_Implementations_325, "<nothing>/split", rslt12, rslt13, rslt14, "core", 1422);
Value *mv_16 = rslt15;
incRef(mv_16, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt17 = maybe_4(empty_list, mv_16);
andRslt8 = rslt17;
}
if (!isNothing(andRslt8,"",0)) {
Value *rslt20 = maybeExtract(andRslt8);
return(rslt20);
} else {
dec_and_free(andRslt8, 1);

// call-vector
// #line 1423 "/home/jim/toccata/core.toc"
Vector *newVect18 = empty_vect;
newVect18 = mutateVectConj(newVect18, prefix_2);
newVect18 = mutateVectConj(newVect18, l_0);
Value *rslt19 = (Value *)newVect18;
return(rslt19);
}

};};
Value *Vector_split_1539(List *closures, Value *l_0, Value *n_1, Value *prefix_2) {
switch (prefix_2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1419\n");
#endif
abort();
}
return(Vector_split_1493(closures, l_0, n_1, prefix_2));
};
FnArity Vector_split_1538 = {FnArityType, -1, 3, (List *)0, 0, Vector_split_1539};
Value *Vector_split_1494(List *closures, Value *l_0, Value *n_1) {
while (1) {
incRef(l_0, 1);
incRef(n_1, 1);

// call-vector
// #line 1426 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1426\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1426\n$TOCCATA_DIR/core.toc:: 1426\n$TOCCATA_DIR/core.toc:: 1426\n");
#endif
abort();
}
Value *rslt4 = proto3Arg(&split_Implementations_325, "<nothing>/split", l_0, n_1, rslt3, "core", 1426);
return(rslt4);

};};
Value *Vector_split_1541(List *closures, Value *l_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1425\n$TOCCATA_DIR/core.toc:: 442 \n");
#endif
abort();
}
return(Vector_split_1494(closures, l_0, n_1));
};
FnArity Vector_split_1540 = {FnArityType, -1, 2, (List *)0, 0, Vector_split_1541};
Value *Vector_split_with_1495(List *closures, Value *v_0, Value *pred_1, Value *prefix_2) {
while (1) {
incRef(v_0, 5);
incRef(pred_1, 3);
incRef(prefix_2, 3);
Value *orRslt3;
Value *rslt4 = proto1Arg(&first_Implementations_336, "<nothing>/first", v_0, "core", 1430);
Value *mv_5 = rslt4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(mv_5, 2);
dec_and_free(pred_1, 4);
dec_and_free(v_0, 2);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *head_8 = rslt7;
incRef(head_8, 3);
Value *andRslt9;

// dynamic unknown type
// #line 1431 "/home/jim/toccata/core.toc"
Value *rslt13;
if((pred_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(pred_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1431\n",
extractStr(type_name(empty_list, pred_1)), pred_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, pred_1, head_8);
} else {
FnArity *arity10 = findFnArity(pred_1, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, head_8);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(head_8, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)pred_1)->name);
  abort();
}
dec_and_free(pred_1, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1431);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt9 = rslt13;
if (isNothing(andRslt9,"",0)) {
dec_and_free(head_8, 2);
dec_and_free(prefix_2, 2);
dec_and_free(pred_1, 2);
dec_and_free(v_0, 2);
} else {
dec_and_free(andRslt9, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", v_0, "core", 1432);
Value *rslt15 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", prefix_2, head_8, "core", 1432);
Value *rslt16 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", rslt14, pred_1, rslt15, "core", 1432);
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1432);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt9 = rslt16;
}
andRslt6 = andRslt9;
}
orRslt3 = andRslt6;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(prefix_2, 2);
dec_and_free(maybe_3, 1);
dec_and_free(v_0, 2);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);

// call-vector
// #line 1433 "/home/jim/toccata/core.toc"
Vector *newVect17 = empty_vect;
newVect17 = mutateVectConj(newVect17, prefix_2);
newVect17 = mutateVectConj(newVect17, v_0);
Value *rslt18 = (Value *)newVect17;
switch (rslt18->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1433\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1433\n$TOCCATA_DIR/core.toc:: 1433\n$TOCCATA_DIR/core.toc:: 1433\n");
#endif
abort();
}
switch (rslt18->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1433\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1433\n$TOCCATA_DIR/core.toc: 1433\ncore: 1433                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1433\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1433\n$TOCCATA_DIR/core.toc: 1433\ncore: 1433                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18, 1);
Value *rslt18_0;
Value *rslt18_1;
Value *rslt18_2;
Value **rslt18_args[3] = {&rslt18_0, &rslt18_1, &rslt18_2};
destructValue("$TOCCATA_DIR/core.toc", "1433", (Value *)rslt18, 3, rslt18_args);
dec_and_free(rslt18_0, 1);
dec_and_free(rslt18_1, 1);
dec_and_free(rslt18_2, 1);
}

// static-fixed
// #line 1433 "/home/jim/toccata/core.toc"
Value *rslt19 = maybe_4(empty_list, rslt18);
return(rslt19);
}

};};
Value *Vector_split_with_1544(List *closures, Value *v_0, Value *pred_1, Value *prefix_2) {
switch (prefix_2->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, prefix_2)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1429\n");
#endif
abort();
}
return(Vector_split_with_1495(closures, v_0, pred_1, prefix_2));
};
FnArity Vector_split_with_1543 = {FnArityType, -1, 3, (List *)0, 0, Vector_split_with_1544};
Value *Vector_split_with_1496(List *closures, Value *v_0, Value *pred_1) {
while (1) {
incRef(v_0, 3);
incRef(pred_1, 1);

// call-vector
// #line 1436 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1436\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1436\n$TOCCATA_DIR/core.toc:: 1436\n$TOCCATA_DIR/core.toc:: 1436\n");
#endif
abort();
}
Value *rslt4 = proto3Arg(&split_with_Implementations_348, "<nothing>/split-with", v_0, pred_1, rslt3, "core", 1436);
if (!isNothing(rslt4,"",0)) {
Value *rslt9 = maybeExtract(rslt4);
return(rslt9);
} else {
dec_and_free(rslt4, 1);

// call-vector
// #line 1437 "/home/jim/toccata/core.toc"
Vector *newVect5 = empty_vect;
Value *rslt6 = (Value *)newVect5;

// call-vector
// #line 1437 "/home/jim/toccata/core.toc"
Vector *newVect7 = empty_vect;
newVect7 = mutateVectConj(newVect7, rslt6);
newVect7 = mutateVectConj(newVect7, v_0);
Value *rslt8 = (Value *)newVect7;
return(rslt8);
}

};};
FnArity Vector_split_with_1545 = {FnArityType, -1, 2, (List *)0, 0, Vector_split_with_1496};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[7];
} str23 = {StringBufferType, -1, 6, 0, "Vector"};
Value *strPtr23 = (Value *)&str23;
Value *Vector_type_name_1497(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr23);

};};
FnArity Vector_type_name_1547 = {FnArityType, -1, 1, (List *)0, 0, Vector_type_name_1497};
Value *Vector_type_args_1498(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
return(v_0);

};};
Value *Vector_type_args_1550(List *closures, Value *v_0) {
switch (v_0->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'Vector' From:            \n$TOCCATA_DIR/core.toc:: 53\n");
#endif
abort();
}
return(Vector_type_args_1498(closures, v_0));
};
FnArity Vector_type_args_1549 = {FnArityType, -1, 1, (List *)0, 0, Vector_type_args_1550};
Value *Vector_zero_1499(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(empty_vector_1);

};};
FnArity Vector_zero_1551 = {FnArityType, -1, 1, (List *)0, 0, Vector_zero_1499};

// --------- anon -------------
Value *fn1553;
Value *anon_1554(List *closures, Value *v_0, Value *next_v_1) {
while (1) {
incRef(v_0, 1);
incRef(next_v_1, 1);
Value *rslt2 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", next_v_1, v_0, mutate_vect_conj_86, "core", 1364);
return(rslt2);

};};
FnArity anon_1555 = {FnArityType, -1, 2, (List *)0, 0, anon_1554};
Function anon_1557 = {FunctionType, -1, "anon", 1, {&anon_1555}};
Value *fn1553 = (Value *)&anon_1557;

Value *Vector_comp_STAR__1500(List *closures, Value *v_0, Value *vs_1) {
while (1) {
incRef(v_0, 1);
incRef(vs_1, 1);

// static-fixed
// #line 1362 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, v_0, vs_1);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1362\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1362\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1362 "/home/jim/toccata/core.toc"
Value *rslt3 = List_reduce_635(empty_list, rslt2, empty_vector_1, fn1553);
return(rslt3);

};};
Value *Vector_comp_STAR__1559(List *closures, Value *v_0, Value *vs_1) {
switch (vs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'vs'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, vs_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1362\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
return(Vector_comp_STAR__1500(closures, v_0, vs_1));
};
FnArity Vector_comp_STAR__1558 = {FnArityType, -1, 2, (List *)0, 0, Vector_comp_STAR__1559};

// --------- anon -------------
Value *fn1560;
Value *anon_1561(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1349);
return(rslt2);

};};
FnArity anon_1562 = {FnArityType, -1, 2, (List *)0, 0, anon_1561};
Function anon_1564 = {FunctionType, -1, "anon", 1, {&anon_1562}};
Value *fn1560 = (Value *)&anon_1564;

Value *Vector_sha1_update_1501(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 3);

// static-fixed
// #line 1347 "/home/jim/toccata/core.toc"
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", x_0, ctxt_1, fn1560, "core", 1348);
return(rslt3);

};};
FnArity Vector_sha1_update_1565 = {FnArityType, -1, 2, (List *)0, 0, Vector_sha1_update_1501};

// --------- anon -------------
Value *fn1567;
Value *anon_1568(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1356);
return(rslt2);

};};
FnArity anon_1569 = {FnArityType, -1, 2, (List *)0, 0, anon_1568};
Function anon_1571 = {FunctionType, -1, "anon", 1, {&anon_1569}};
Value *fn1567 = (Value *)&anon_1571;

Value *Vector_sha1_1502(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 3);

// static-fixed
// #line 1353 "/home/jim/toccata/core.toc"
Value *rslt1 = sha1_init_446(empty_list);
Value *ctxt_2 = rslt1;
incRef(ctxt_2, 5);

// static-fixed
// #line 1354 "/home/jim/toccata/core.toc"
Value *rslt3 = sha1_update_type_1262(empty_list, v_0, ctxt_2);

dec_and_free(rslt3, 1);
Value *rslt4 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", v_0, ctxt_2, fn1567, "core", 1355);

dec_and_free(rslt4, 1);

// static-fixed
// #line 1357 "/home/jim/toccata/core.toc"
Value *rslt5 = sha1_finalize_452(empty_list, ctxt_2);
switch (rslt5->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1357\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt5);

};};
FnArity Vector_sha1_1572 = {FnArityType, -1, 1, (List *)0, 0, Vector_sha1_1502};
Value *Vector_nth_1503(List *closures, Value *v_0, Value *n_1) {
while (1) {
incRef(v_0, 1);
incRef(n_1, 1);
Value *rslt2 = proto2Arg(&get_Implementations_413, "<nothing>/get", v_0, n_1, "core", 1441);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1441\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
return(rslt2);

};};
Value *Vector_nth_1575(List *closures, Value *v_0, Value *n_1) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1440\n$TOCCATA_DIR/core.toc:: 485 \n");
#endif
abort();
}
return(Vector_nth_1503(closures, v_0, n_1));
};
FnArity Vector_nth_1574 = {FnArityType, -1, 2, (List *)0, 0, Vector_nth_1575};
Value *Vector_store_1504(List *closures, Value *v_0, Value *n_1, Value *x_2) {
while (1) {

// inline
// #line 1444 "/home/jim/toccata/core.toc"

  Value *result = vectStore((Vector *)v_0, ((Integer *)n_1)->numVal, (Value *)x_2);
  dec_and_free(v_0, 1);
  dec_and_free(n_1, 1);
  return(result);
#

};};
Value *Vector_store_1577(List *closures, Value *v_0, Value *n_1, Value *x_2) {
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1443\n$TOCCATA_DIR/core.toc:: 491 \n");
#endif
abort();
}
return(Vector_store_1504(closures, v_0, n_1, x_2));
};
FnArity Vector_store_1576 = {FnArityType, -1, 3, (List *)0, 0, Vector_store_1577};
Value *anon_1579(List *closures, Value *v_0, Value *x_1) {

while (1) {
incRef(v_0, 1);
incRef(x_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs8);
incRef(val2, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1369 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1369\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, x_1);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, x_1);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(x_1, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}

// static-fixed
// #line 1369 "/home/jim/toccata/core.toc"
Value *rslt7 = mutate_vect_conj_87(empty_list, v_0, rslt6);
return(rslt7);

};};
Value *Vector_map_1505(List *closures, Value *v_0, Value *f_1) {
while (1) {
incRef(v_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 2;
anon_2->variadic = 0;
anon_2->fn = anon_1579;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)f_1, (List *)anon_2->closures);
Function *anon_1582 = malloc_function(1);
anon_1582->name = "anon";
anon_1582->arityCount = 1;
anon_1582->arities[0] = anon_2;
Value *fn1578 = (Value *)anon_1582;
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", v_0, empty_vector_1, fn1578, "core", 1368);
return(rslt3);

};};
FnArity Vector_map_1583 = {FnArityType, -1, 2, (List *)0, 0, Vector_map_1505};
Value *Vector_wrap_1506(List *closures, Value *v_0, Value *x_1) {
while (1) {

dec_and_free(v_0, 1);
incRef(x_1, 1);

// call-vector
// #line 1371 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
newVect2 = mutateVectConj(newVect2, x_1);
Value *rslt3 = (Value *)newVect2;
return(rslt3);

};};
FnArity Vector_wrap_1585 = {FnArityType, -1, 2, (List *)0, 0, Vector_wrap_1506};
Value *Vector_apply_STAR__1507(List *closures, Value *mf_0, Value *vects_1) {
while (1) {
incRef(mf_0, 3);
incRef(vects_1, 3);
Value *orRslt2;
Value *rslt3 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", mf_0, "core", 1374);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(vects_1, 2);
dec_and_free(maybe_map_479, 1);
dec_and_free(vec_315, 1);

} else {
dec_and_free(orRslt2, 1);
Value *rslt4 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", vects_1, "core", 1375);
Value *mv_5 = rslt4;
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1375\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_5, 1);
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_map_480(empty_list, mv_5, vec_315);
orRslt2 = rslt6;
}
if (!isNothing(orRslt2,"",0)) {
Value *rslt15 = maybeExtract(orRslt2);
return(rslt15);
} else {
dec_and_free(orRslt2, 1);
Value *f_9;
Value *tail_7;
Value **destArgs8[2] = {&f_9, &tail_7};
destructValue("core", "1376", (Value *)mf_0, 2, destArgs8);
incRef(f_9, 1);

dec_and_free(tail_7, 1);
Value *vect_12;
Value *vects_10;
Value **destArgs11[2] = {&vect_12, &vects_10};
destructValue("core", "1377", (Value *)vects_1, 2, destArgs11);
incRef(vect_12, 1);
incRef(vects_10, 1);
Value *rslt13 = proto2Arg(&map_Implementations_267, "<nothing>/map", vect_12, vector_641, "core", 1378);

// static-fixed
// #line 1378 "/home/jim/toccata/core.toc"
Value *rslt14 = apply_to_vectors_1319(empty_list, f_9, vects_10, rslt13);
return(rslt14);
}

};};
FnArity Vector_apply_STAR__1587 = {FnArityType, -1, 2, (List *)0, 0, Vector_apply_STAR__1507};
Value *anon_1590(List *closures, Value *result_0, Value *x_1) {

while (1) {
incRef(result_0, 1);
incRef(x_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs8);
incRef(val2, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1383 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1383\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, x_1);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, x_1);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(x_1, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}
Value *rslt7 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt6, result_0, mutate_vect_conj_86, "core", 1383);
return(rslt7);

};};
Value *Vector_flat_map_1508(List *closures, Value *v_0, Value *mf_1) {
while (1) {
incRef(v_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 2;
anon_2->variadic = 0;
anon_2->fn = anon_1590;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)mf_1, (List *)anon_2->closures);
Function *anon_1593 = malloc_function(1);
anon_1593->name = "anon";
anon_1593->arityCount = 1;
anon_1593->arities[0] = anon_2;
Value *fn1589 = (Value *)anon_1593;
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", v_0, empty_vector_1, fn1589, "core", 1381);
return(rslt3);

};};
FnArity Vector_flat_map_1594 = {FnArityType, -1, 2, (List *)0, 0, Vector_flat_map_1508};
Value *Vector_flatten_1509(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 3);
Value *rslt1 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", v_0, "core", 1386);
if (!isNothing(rslt1,"",0)) {
Value *rslt10 = maybeExtract(rslt1);
return(rslt10);
} else {
dec_and_free(rslt1, 1);
Value *f_2 = comp_245;
incRef(f_2, 1);
switch (f_2->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_2)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}
Value *rslt3 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", v_0, "core", 1387);

// call-list
// #line 1387 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)rslt3, newList4);
Value *rslt5 = (Value *)newList4;
Value *args_6 = rslt5;
switch (args_6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 1387\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
incRef(args_6, 1);
switch (args_6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt7 = fn_apply_117(empty_list, list_STAR__616, args_6);
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt8 = fn_apply_117(empty_list, f_2, rslt7);
Value *rslt9 = proto1Arg(&vec_Implementations_341, "<nothing>/vec", rslt8, "core", 1387);
return(rslt9);
}

};};
FnArity Vector_flatten_1596 = {FnArityType, -1, 1, (List *)0, 0, Vector_flatten_1509};
Value *anon_1599(List *closures, Value *result_0, Value *x_1) {

while (1) {
incRef(result_0, 3);
incRef(x_1, 3);
Value *val3;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs11[2] = {&val3, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs11);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *andRslt2;

// dynamic unknown type
// #line 1393 "/home/jim/toccata/core.toc"
Value *rslt7;
if((val3)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val3->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1393\n",
extractStr(type_name(empty_list, val3)), val3->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt7 = _fn(_arity->closures, val3, x_1);
} else {
FnArity *arity4 = findFnArity(val3, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
rslt7 = fn6(arity4->closures, x_1);
} else if(arity4 != (FnArity *)0 && arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(x_1, dynArgs5);
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val3)->name);
  abort();
}
dec_and_free(val3, 1);
}
if (rslt7->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1393);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
abort();
}
andRslt2 = rslt7;
if (isNothing(andRslt2,"",0)) {
dec_and_free(mutate_vect_conj_86, 1);
dec_and_free(x_1, 2);
dec_and_free(result_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 1393 "/home/jim/toccata/core.toc"
Value *rslt8 = mutate_vect_conj_87(empty_list, result_0, x_1);

// static-fixed
// #line 1393 "/home/jim/toccata/core.toc"
Value *rslt9 = maybe_4(empty_list, rslt8);
andRslt2 = rslt9;
}
if (!isNothing(andRslt2,"",0)) {
Value *rslt10 = maybeExtract(andRslt2);
return(rslt10);
} else {
dec_and_free(andRslt2, 1);
return(result_0);
}

};};
Value *Vector_filter_1510(List *closures, Value *v_0, Value *f_1) {
while (1) {
incRef(v_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 2;
anon_2->variadic = 0;
anon_2->fn = anon_1599;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)f_1, (List *)anon_2->closures);
Function *anon_1602 = malloc_function(1);
anon_1602->name = "anon";
anon_1602->arityCount = 1;
anon_1602->arities[0] = anon_2;
Value *fn1598 = (Value *)anon_1602;
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", v_0, empty_vector_1, fn1598, "core", 1391);
return(rslt3);

};};
FnArity Vector_filter_1603 = {FnArityType, -1, 2, (List *)0, 0, Vector_filter_1510};

// --------- partitioner -------------
Value *partitioner_1606;
Value *anon_1609(List *closures, Value *arg0, Value *x_5) {

while (1) {
incRef(x_5, 1);
Value *result_3;
Value *part_4;
Value *tail_1;
Value **destArgs2[3] = {&result_3, &part_4, &tail_1};
destructValue("core", "1461", (Value *)arg0, 3, destArgs2);
incRef(result_3, 3);
incRef(part_4, 1);
switch (part_4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1461\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, part_4)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1462\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

dec_and_free(tail_1, 1);
Value *val9;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs20[2] = {&val9, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs20);
incRef(val9, 1);

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1462 "/home/jim/toccata/core.toc"
Value *rslt6 = cons_282(empty_list, x_5, part_4);
Value *part_7 = rslt6;
incRef(part_7, 5);
Value *andRslt8;

// type-known for count
// #line 1463 "/home/jim/toccata/core.toc"
Value *rslt10 = List_count_571(empty_list, part_7);
switch (rslt10->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1463\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1463\n$TOCCATA_DIR/core.toc:: 1463\n$TOCCATA_DIR/core.toc:: 381 \n");
#endif
abort();
}

// static-fixed
// #line 1463 "/home/jim/toccata/core.toc"
Value *rslt11 = _EQ__703(empty_list, val9, rslt10);
if (rslt11->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1463);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt11)));
abort();
}
andRslt8 = rslt11;
if (isNothing(andRslt8,"",0)) {
dec_and_free(part_7, 2);
dec_and_free(result_3, 2);
dec_and_free(empty_list_0, 1);
dec_and_free(maybe_3, 1);
dec_and_free(cons_281, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for reverse
// #line 1464 "/home/jim/toccata/core.toc"
Value *rslt12 = List_reverse_562(empty_list, part_7);

// static-fixed
// #line 1464 "/home/jim/toccata/core.toc"
Value *rslt13 = cons_282(empty_list, rslt12, result_3);

// call-vector
// #line 1464 "/home/jim/toccata/core.toc"
Vector *newVect14 = empty_vect;
newVect14 = mutateVectConj(newVect14, rslt13);
newVect14 = mutateVectConj(newVect14, empty_list_0);
Value *rslt15 = (Value *)newVect14;
switch (rslt15->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1464\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1464\n$TOCCATA_DIR/core.toc:: 1464\n$TOCCATA_DIR/core.toc:: 1464\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1464\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1464\n$TOCCATA_DIR/core.toc: 1464\ncore: 1464                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1464\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1464\n$TOCCATA_DIR/core.toc: 1464\ncore: 1464                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1464", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1464\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1464\n$TOCCATA_DIR/core.toc:: 1464\n$TOCCATA_DIR/core.toc:: 2   \n");
#endif
abort();
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}

// static-fixed
// #line 1464 "/home/jim/toccata/core.toc"
Value *rslt16 = maybe_4(empty_list, rslt15);
andRslt8 = rslt16;
}
if (!isNothing(andRslt8,"",0)) {
Value *rslt19 = maybeExtract(andRslt8);
return(rslt19);
} else {
dec_and_free(andRslt8, 1);

// call-vector
// #line 1465 "/home/jim/toccata/core.toc"
Vector *newVect17 = empty_vect;
newVect17 = mutateVectConj(newVect17, result_3);
newVect17 = mutateVectConj(newVect17, part_7);
Value *rslt18 = (Value *)newVect17;
return(rslt18);
}

};};
Value *partitioner_1607(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 1);

// call-vector
// #line 1460 "/home/jim/toccata/core.toc"
Vector *newVect2 = empty_vect;
newVect2 = mutateVectConj(newVect2, empty_list_0);
newVect2 = mutateVectConj(newVect2, empty_list_0);
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1460\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 1460\n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1460\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1460\n$TOCCATA_DIR/core.toc: 1460\ncore: 1460                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1460\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1460\n$TOCCATA_DIR/core.toc: 1460\ncore: 1460                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value *rslt3_2;
Value **rslt3_args[3] = {&rslt3_0, &rslt3_1, &rslt3_2};
destructValue("$TOCCATA_DIR/core.toc", "1460", (Value *)rslt3, 3, rslt3_args);
switch (rslt3_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1460\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 2   \n");
#endif
abort();
}
switch (rslt3_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1460\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 1460\n$TOCCATA_DIR/core.toc:: 2   \n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
dec_and_free(rslt3_2, 1);
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 2;
anon_4->variadic = 0;
anon_4->fn = anon_1609;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)n_1, (List *)anon_4->closures);
Function *anon_1612 = malloc_function(1);
anon_1612->name = "anon";
anon_1612->arityCount = 1;
anon_1612->arities[0] = anon_4;
Value *fn1608 = (Value *)anon_1612;
Value *rslt5 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", coll_0, rslt3, fn1608, "core", 1460);
return(rslt5);

};};
Value *partitioner_1614(List *closures, Value *coll_0, Value *n_1) {
switch (coll_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll' at $TOCCATA_DIR/core.toc, line 1457\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1458\n");
#endif
abort();
}
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1457\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1459\n");
#endif
abort();
}
return(partitioner_1607(closures, coll_0, n_1));
};
FnArity partitioner_1613 = {FnArityType, -1, 2, (List *)0, 0, partitioner_1614};
Function partitioner_1615 = {FunctionType, -1, "partitioner", 1, {&partitioner_1613}};
Value *partitioner_1606 = (Value *)&partitioner_1615;


// --------- partition -------------
Value *partition_1617;
Value *partition_1618(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 1);
incRef(n_1, 1);

// static-fixed
// #line 1468 "/home/jim/toccata/core.toc"
Value *rslt2 = partitioner_1607(empty_list, coll_0, n_1);
Value *partitioned_5;
Value *tail_3;
Value **destArgs4[2] = {&partitioned_5, &tail_3};
destructValue("core", "1468", (Value *)rslt2, 2, destArgs4);
incRef(partitioned_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", partitioned_5, "core", 1469);
return(rslt6);

};};
Value *partition_1620(List *closures, Value *coll_0, Value *n_1) {
switch (coll_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll' at $TOCCATA_DIR/core.toc, line 1467\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1468\n$TOCCATA_DIR/core.toc:: 1458\n");
#endif
abort();
}
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1467\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1468\n$TOCCATA_DIR/core.toc:: 1459\n");
#endif
abort();
}
return(partition_1618(closures, coll_0, n_1));
};
FnArity partition_1619 = {FnArityType, -1, 2, (List *)0, 0, partition_1620};
Function partition_1621 = {FunctionType, -1, "partition", 1, {&partition_1619}};
Value *partition_1617 = (Value *)&partition_1621;


// --------- partition-all -------------
Value *partition_all_1623;
Value *partition_all_1624(List *closures, Value *coll_0, Value *n_1) {
while (1) {
incRef(coll_0, 1);
incRef(n_1, 1);

// static-fixed
// #line 1472 "/home/jim/toccata/core.toc"
Value *rslt2 = partitioner_1607(empty_list, coll_0, n_1);
Value *partitioned_5;
Value *remainder_6;
Value *tail_3;
Value **destArgs4[3] = {&partitioned_5, &remainder_6, &tail_3};
destructValue("core", "1472", (Value *)rslt2, 3, destArgs4);
incRef(partitioned_5, 1);
switch (partitioned_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1472\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, partitioned_5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1473\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
incRef(remainder_6, 1);

dec_and_free(tail_3, 1);

// static-fixed
// #line 1473 "/home/jim/toccata/core.toc"
Value *rslt7 = cons_282(empty_list, remainder_6, partitioned_5);

// type-known for reverse
// #line 1473 "/home/jim/toccata/core.toc"
Value *rslt8 = List_reverse_562(empty_list, rslt7);
return(rslt8);

};};
Value *partition_all_1626(List *closures, Value *coll_0, Value *n_1) {
switch (coll_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll' at $TOCCATA_DIR/core.toc, line 1471\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1472\n$TOCCATA_DIR/core.toc:: 1458\n");
#endif
abort();
}
switch (n_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1471\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_1)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1472\n$TOCCATA_DIR/core.toc:: 1459\n");
#endif
abort();
}
return(partition_all_1624(closures, coll_0, n_1));
};
FnArity partition_all_1625 = {FnArityType, -1, 2, (List *)0, 0, partition_all_1626};
Function partition_all_1627 = {FunctionType, -1, "partition-all", 1, {&partition_all_1625}};
Value *partition_all_1623 = (Value *)&partition_all_1627;


// --------- every -------------
Value *every_1629;
Value *anon_1633(List *closures, Value *tail_0) {

while (1) {
incRef(tail_0, 1);
Value *val3;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs7[3] = {&val3, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs7);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *__2 = val1;

dec_and_free(__2, 1);
Value *rslt4 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", tail_0, val3, "core", 1479);
Value *mv_5 = rslt4;
incRef(mv_5, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_4(empty_list, mv_5);
return(rslt6);

};};
Value *every_1630(List *closures, Value *coll_0, Value *f_1) {
while (1) {
incRef(coll_0, 5);
incRef(f_1, 3);
Value *orRslt2;
Value *rslt3 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", coll_0, "core", 1476);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(f_1, 4);
dec_and_free(coll_0, 4);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *rslt4 = proto1Arg(&first_Implementations_336, "<nothing>/first", coll_0, "core", 1477);
Value *mv_5 = rslt4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(mv_5, 2);
dec_and_free(f_1, 2);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);

// dynamic unknown type
// #line 1477 "/home/jim/toccata/core.toc"
Value *rslt11;
if((f_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1477\n",
extractStr(type_name(empty_list, f_1)), f_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt11 = _fn(_arity->closures, f_1, rslt7);
} else {
FnArity *arity8 = findFnArity(f_1, 1);
if(arity8 != (FnArity *)0 && !arity8->variadic) {
FnType1 *fn10 = (FnType1 *)arity8->fn;
rslt11 = fn10(arity8->closures, rslt7);
} else if(arity8 != (FnArity *)0 && arity8->variadic) {
FnType1 *fn10 = (FnType1 *)arity8->fn;
List *dynArgs9 = empty_list;
dynArgs9 = (List *)listCons(rslt7, dynArgs9);
rslt11 = fn10(arity8->closures, (Value *)dynArgs9);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_1)->name);
  abort();
}
dec_and_free(f_1, 1);
}
if (rslt11->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1477);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt11)));
abort();
}
andRslt6 = rslt11;
}
Value *wrapper_12 = andRslt6;
incRef(wrapper_12, 1);
Value *mv_13 = wrapper_12;
incRef(mv_13, 2);
Value *andRslt14;
andRslt14 = mv_13;
if (isNothing(andRslt14,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(wrapper_12, 1);
dec_and_free(mv_13, 2);
dec_and_free(f_1, 2);
dec_and_free(coll_0, 2);
} else {
dec_and_free(andRslt14, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt15 = Maybe_extract_510(empty_list, mv_13);
Value *head_16 = rslt15;
Value *rslt17 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", coll_0, "core", 1478);
Value *rslt21;
FnArity *arity18 = findFnArity(every_1629, 2);
if(arity18 != (FnArity *)0 && !arity18->variadic) { FnType2 *fn20 = (FnType2 *)arity18->fn;


// dynamic fn type
// #line 1478 "/home/jim/toccata/core.toc"
rslt21 = fn20(arity18->closures, rslt17, f_1);
} else if(arity18 != (FnArity *)0 && arity18->variadic) { FnType1 *fn20 = (FnType1 *)arity18->fn;
List *dynArgs19 = empty_list;
dynArgs19 = (List *)listCons(f_1, dynArgs19);
dynArgs19 = (List *)listCons(rslt17, dynArgs19);

// dynamic fn type
// #line 1478 "/home/jim/toccata/core.toc"
rslt21 = fn20(arity18->closures, (Value *)dynArgs19);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)every_1629)->name, "core", 1478);
  abort();
}
dec_and_free(every_1629, 1);
FnArity *anon_22 = malloc_fnArity();
anon_22->count = 1;
anon_22->variadic = 0;
anon_22->fn = anon_1633;
anon_22->closures = empty_list;
anon_22->closures = listCons((Value *)wrapper_12, (List *)anon_22->closures);
anon_22->closures = listCons((Value *)head_16, (List *)anon_22->closures);
Function *anon_1636 = malloc_function(1);
anon_1636->name = "anon";
anon_1636->arityCount = 1;
anon_1636->arities[0] = anon_22;
Value *fn1632 = (Value *)anon_1636;
Value *rslt23 = proto2Arg(&flat_map_Implementations_271, "flat-map", rslt21, fn1632, "core", 1478);
if (rslt23->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1478);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt23)));
abort();
}
andRslt14 = rslt23;
}
return(andRslt14);
}

};};
FnArity every_1637 = {FnArityType, -1, 2, (List *)0, 0, every_1630};
Function every_1639 = {FunctionType, -1, "every", 1, {&every_1637}};
Value *every_1629 = (Value *)&every_1639;

Value *BitmapIndexNode_type_name_1646(List *closures, Value *);
Value *BitmapIndexNode_count_1647(List *closures, Value *);
Value *BitmapIndexNode_hash_seq_1648(List *closures, Value *, Value *);
Value *BitmapIndexNode_assoc_STAR__1649(List *closures, Value *, Value *, Value *, Value *, Value *);
Value *BitmapIndexNode_dissoc_STAR__1650(List *closures, Value *, Value *, Value *, Value *);
Value *BitmapIndexNode_get_STAR__1651(List *closures, Value *, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[18];
} str24 = {StringBufferType, -1, 17, 0, "BitmapIndexedNode"};
Value *strPtr24 = (Value *)&str24;
Value *BitmapIndexNode_type_name_1646(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr24);

};};
FnArity BitmapIndexNode_type_name_1652 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_type_name_1646};
Value *BitmapIndexNode_count_1647(List *closures, Value *x_0) {
while (1) {

// inline
// #line 1501 "/home/jim/toccata/core.toc"
return(bmiCount(x_0));
#

};};
FnArity BitmapIndexNode_count_1654 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_count_1647};
Value *BitmapIndexNode_hash_seq_1648(List *closures, Value *m_0, Value *s_1) {
while (1) {

// inline
// #line 1488 "/home/jim/toccata/core.toc"
return(bmiHashSeq(m_0, s_1));
#

};};
FnArity BitmapIndexNode_hash_seq_1656 = {FnArityType, -1, 2, (List *)0, 0, BitmapIndexNode_hash_seq_1648};
Value *BitmapIndexNode_assoc_STAR__1649(List *closures, Value *m_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1491 "/home/jim/toccata/core.toc"
return(bmiAssoc(m_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity BitmapIndexNode_assoc_STAR__1658 = {FnArityType, -1, 5, (List *)0, 0, BitmapIndexNode_assoc_STAR__1649};
Value *BitmapIndexNode_dissoc_STAR__1650(List *closures, Value *node_0, Value *k_1, Value *hash_2, Value *shift_3) {
while (1) {

// inline
// #line 1494 "/home/jim/toccata/core.toc"
return(bmiDissoc(node_0, k_1, hash_2, shift_3));
#

};};
FnArity BitmapIndexNode_dissoc_STAR__1660 = {FnArityType, -1, 4, (List *)0, 0, BitmapIndexNode_dissoc_STAR__1650};
Value *BitmapIndexNode_get_STAR__1651(List *closures, Value *node_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1497 "/home/jim/toccata/core.toc"
return(bmiGet(node_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity BitmapIndexNode_get_STAR__1662 = {FnArityType, -1, 5, (List *)0, 0, BitmapIndexNode_get_STAR__1651};
Value *ArrayNode_type_name_1670(List *closures, Value *);
Value *ArrayNode_count_1671(List *closures, Value *);
Value *ArrayNode_assoc_STAR__1672(List *closures, Value *, Value *, Value *, Value *, Value *);
Value *ArrayNode_hash_seq_1673(List *closures, Value *, Value *);
Value *ArrayNode_get_STAR__1674(List *closures, Value *, Value *, Value *, Value *, Value *);
Value *ArrayNode_dissoc_STAR__1675(List *closures, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str25 = {StringBufferType, -1, 9, 0, "ArrayNode"};
Value *strPtr25 = (Value *)&str25;
Value *ArrayNode_type_name_1670(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr25);

};};
FnArity ArrayNode_type_name_1676 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_type_name_1670};
Value *ArrayNode_count_1671(List *closures, Value *x_0) {
while (1) {

// inline
// #line 1509 "/home/jim/toccata/core.toc"
return(arrayNodeCount(x_0));
#

};};
FnArity ArrayNode_count_1678 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_count_1671};
Value *ArrayNode_assoc_STAR__1672(List *closures, Value *m_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1513 "/home/jim/toccata/core.toc"
return(arrayNodeAssoc(m_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity ArrayNode_assoc_STAR__1680 = {FnArityType, -1, 5, (List *)0, 0, ArrayNode_assoc_STAR__1672};
Value *ArrayNode_hash_seq_1673(List *closures, Value *m_0, Value *s_1) {
while (1) {

// inline
// #line 1516 "/home/jim/toccata/core.toc"
return(arrayNodeSeq(m_0, s_1));
#

};};
FnArity ArrayNode_hash_seq_1682 = {FnArityType, -1, 2, (List *)0, 0, ArrayNode_hash_seq_1673};
Value *ArrayNode_get_STAR__1674(List *closures, Value *m_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1519 "/home/jim/toccata/core.toc"
return(arrayNodeGet(m_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity ArrayNode_get_STAR__1684 = {FnArityType, -1, 5, (List *)0, 0, ArrayNode_get_STAR__1674};
Value *ArrayNode_dissoc_STAR__1675(List *closures, Value *m_0, Value *k_1, Value *hash_2, Value *shift_3) {
while (1) {

// inline
// #line 1522 "/home/jim/toccata/core.toc"
return(arrayNodeDissoc(m_0, k_1, hash_2, shift_3));
#

};};
FnArity ArrayNode_dissoc_STAR__1686 = {FnArityType, -1, 4, (List *)0, 0, ArrayNode_dissoc_STAR__1675};
Value *HashCollisionNode_type_name_1694(List *closures, Value *);
Value *HashCollisionNode_count_1695(List *closures, Value *);
Value *HashCollisionNode_assoc_STAR__1696(List *closures, Value *, Value *, Value *, Value *, Value *);
Value *HashCollisionNode_dissoc_STAR__1697(List *closures, Value *, Value *, Value *, Value *);
Value *HashCollisionNode_hash_seq_1698(List *closures, Value *, Value *);
Value *HashCollisionNode_get_STAR__1699(List *closures, Value *, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[18];
} str26 = {StringBufferType, -1, 17, 0, "HashCollisionNode"};
Value *strPtr26 = (Value *)&str26;
Value *HashCollisionNode_type_name_1694(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr26);

};};
FnArity HashCollisionNode_type_name_1700 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_type_name_1694};
Value *HashCollisionNode_count_1695(List *closures, Value *x_0) {
while (1) {

// inline
// #line 1530 "/home/jim/toccata/core.toc"
return(collisionCount(x_0));
#

};};
FnArity HashCollisionNode_count_1702 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_count_1695};
Value *HashCollisionNode_assoc_STAR__1696(List *closures, Value *node_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1534 "/home/jim/toccata/core.toc"
return(collisionAssoc(node_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity HashCollisionNode_assoc_STAR__1704 = {FnArityType, -1, 5, (List *)0, 0, HashCollisionNode_assoc_STAR__1696};
Value *HashCollisionNode_dissoc_STAR__1697(List *closures, Value *node_0, Value *k_1, Value *hash_2, Value *shift_3) {
while (1) {

// inline
// #line 1537 "/home/jim/toccata/core.toc"
return(collisionDissoc(node_0, k_1, hash_2, shift_3));
#

};};
FnArity HashCollisionNode_dissoc_STAR__1706 = {FnArityType, -1, 4, (List *)0, 0, HashCollisionNode_dissoc_STAR__1697};
Value *HashCollisionNode_hash_seq_1698(List *closures, Value *m_0, Value *s_1) {
while (1) {

// inline
// #line 1540 "/home/jim/toccata/core.toc"
return(collisionSeq(m_0, s_1));
#

};};
FnArity HashCollisionNode_hash_seq_1708 = {FnArityType, -1, 2, (List *)0, 0, HashCollisionNode_hash_seq_1698};
Value *HashCollisionNode_get_STAR__1699(List *closures, Value *node_0, Value *k_1, Value *v_2, Value *hash_3, Value *shift_4) {
while (1) {

// inline
// #line 1543 "/home/jim/toccata/core.toc"
return(collisionGet(node_0, k_1, v_2, hash_3, shift_4));
#

};};
FnArity HashCollisionNode_get_STAR__1710 = {FnArityType, -1, 5, (List *)0, 0, HashCollisionNode_get_STAR__1699};

// --------- dissoc -------------
Value *dissoc_1713;

// --------- anon -------------
Value *fn1715;
Integer num4 = {IntegerType, -1, -1};
Value *numPtr4 = (Value *)&num4;
Value *anon_1716(List *closures, Value *m_0, Value *k_1) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 3);
Value *rslt2 = proto1Arg(&sha1_Implementations_395, "<nothing>/sha1", k_1, "core", 1548);
switch (numPtr4->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, numPtr4)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1548\n$TOCCATA_DIR/core.toc:: 936 \n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}

// static-fixed
// #line 1548 "/home/jim/toccata/core.toc"
Value *rslt3 = inc_899(empty_list, numPtr4);
Value *rslt4 = proto4Arg(&dissoc_STAR__Implementations_16, "<nothing>/dissoc*", m_0, k_1, rslt2, rslt3, "core", 1548);
return(rslt4);

};};
FnArity anon_1717 = {FnArityType, -1, 2, (List *)0, 0, anon_1716};
Function anon_1719 = {FunctionType, -1, "anon", 1, {&anon_1717}};
Value *fn1715 = (Value *)&anon_1719;

Value *dissoc_1714(List *closures, Value *arg0) {
while (1) {
Value *m_3;
Value *ks_1;
Value **destArgs2[2] = {&m_3, &ks_1};
destructValue("core", "1545", (Value *)arg0, 2, destArgs2);
incRef(m_3, 1);
incRef(ks_1, 1);
switch (ks_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1545\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ks_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1547\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1547 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, ks_1, m_3, fn1715);
return(rslt4);

};};
Value *dissoc_1721(List *closures, Value *args) {
Value *arg0;
Value **destArgs5[1] = {&arg0};
destructValue("core", "1545", (Value *)args, 1, destArgs5);
return(dissoc_1714(closures, args));
};
FnArity dissoc_1720 = {FnArityType, -1, 1, (List *)0, 1, dissoc_1721};
Function dissoc_1722 = {FunctionType, -1, "dissoc", 1, {&dissoc_1720}};
Value *dissoc_1713 = (Value *)&dissoc_1722;


// --------- assoc-all -------------
Value *assoc_all_1724;

// --------- anon -------------
Value *fn1726;
Value *anon_1727(List *closures, Value *m_0, Value *arg1) {
while (1) {
incRef(m_0, 1);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1553", (Value *)arg1, 3, destArgs3);
incRef(k_4, 3);
incRef(v_5, 1);

dec_and_free(tail_2, 1);
Value *rslt6 = proto1Arg(&sha1_Implementations_395, "<nothing>/sha1", k_4, "core", 1554);

// static-fixed
// #line 1554 "/home/jim/toccata/core.toc"
Value *rslt7 = inc_899(empty_list, numPtr4);
Value *rslt8 = proto5Arg(&assoc_STAR__Implementations_14, "<nothing>/assoc*", m_0, k_4, v_5, rslt6, rslt7, "core", 1554);
return(rslt8);

};};
Value *anon_1729(List *closures, Value *m_0, Value *arg1) {
switch (arg1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1553\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1553\n");
#endif
abort();
}
if (countSeq(incRef(arg1, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1553\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1553\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg1, 1);
Value *arg1_0;
Value *arg1_1;
Value *arg1_2;
Value **arg1_args[3] = {&arg1_0, &arg1_1, &arg1_2};
destructValue("$TOCCATA_DIR/core.toc", "1553", (Value *)arg1, 3, arg1_args);
dec_and_free(arg1_0, 1);
dec_and_free(arg1_1, 1);
dec_and_free(arg1_2, 1);
}
return(anon_1727(closures, m_0, arg1));
};
FnArity anon_1728 = {FnArityType, -1, 2, (List *)0, 0, anon_1729};
Function anon_1730 = {FunctionType, -1, "anon", 1, {&anon_1728}};
Value *fn1726 = (Value *)&anon_1730;

Value *assoc_all_1725(List *closures, Value *arg0) {
while (1) {
Value *m_3;
Value *kv_pairs_1;
Value **destArgs2[2] = {&m_3, &kv_pairs_1};
destructValue("core", "1550", (Value *)arg0, 2, destArgs2);
incRef(m_3, 1);
incRef(kv_pairs_1, 1);
switch (kv_pairs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll' at $TOCCATA_DIR/core.toc, line 1550\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, kv_pairs_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1553\n$TOCCATA_DIR/core.toc:: 1468\n$TOCCATA_DIR/core.toc:: 1458\n");
#endif
abort();
}

// static-fixed
// #line 1553 "/home/jim/toccata/core.toc"
Value *rslt4 = partition_1618(empty_list, kv_pairs_1, numPtr1);
Value *rslt5 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt4, m_3, fn1726, "core", 1553);
return(rslt5);

};};
Value *assoc_all_1732(List *closures, Value *args) {
Value *arg0;
Value **destArgs6[1] = {&arg0};
destructValue("core", "1550", (Value *)args, 1, destArgs6);
return(assoc_all_1725(closures, args));
};
FnArity assoc_all_1731 = {FnArityType, -1, 1, (List *)0, 1, assoc_all_1732};
Function assoc_all_1733 = {FunctionType, -1, "assoc-all", 1, {&assoc_all_1731}};
Value *assoc_all_1724 = (Value *)&assoc_all_1733;


// --------- spaces -------------
Value *spaces_1735;

// --------- anon -------------
Value *fn1737;
Value *anon_1738(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr4);

};};
FnArity anon_1739 = {FnArityType, -1, 1, (List *)0, 0, anon_1738};
Function anon_1741 = {FunctionType, -1, "anon", 1, {&anon_1739}};
Value *fn1737 = (Value *)&anon_1741;

Value *spaces_1736(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);

// static-fixed
// #line 1558 "/home/jim/toccata/core.toc"
Value *rslt1 = range_1313(empty_list, n_0);
Value *rslt2 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt1, fn1737, "core", 1558);
Value *rslt3 = proto1Arg(&to_str_Implementations_328, "<nothing>/to-str", rslt2, "core", 1558);
return(rslt3);

};};
Value *spaces_1743(List *closures, Value *n_0) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1556\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1557\n");
#endif
abort();
}
return(spaces_1736(closures, n_0));
};
FnArity spaces_1742 = {FnArityType, -1, 1, (List *)0, 0, spaces_1743};
Function spaces_1744 = {FunctionType, -1, "spaces", 1, {&spaces_1742}};
Value *spaces_1735 = (Value *)&spaces_1744;


// --------- show-kv -------------
Value *show_kv_1746;
Value *show_kv_1747(List *closures, Value *arg0, Value *indent_5) {
while (1) {
incRef(indent_5, 3);
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1560", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *f_6 = str_892;
incRef(f_6, 1);
switch (f_6->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_6)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}
Value *rslt7 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", k_3, indent_5, "core", 1561);

// call-list
// #line 1561 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)rslt7, newList8);
Value *rslt9 = (Value *)newList8;
Value *args_10 = rslt9;
switch (args_10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 1561\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
incRef(args_10, 1);
switch (args_10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt11 = fn_apply_117(empty_list, list_STAR__616, args_10);
switch (rslt11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt12 = fn_apply_117(empty_list, f_6, rslt11);
Value *k_str_13 = rslt12;
incRef(k_str_13, 3);

// call-list
// #line 1562 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)strPtr4, newList14);
newList14 = listCons((Value *)k_str_13, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1562\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1562\n$TOCCATA_DIR/core.toc:: 1562\n$TOCCATA_DIR/core.toc:: 1562\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1562\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1562\n$TOCCATA_DIR/core.toc: 1562\ncore: 1562                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1562\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1562\n$TOCCATA_DIR/core.toc: 1562\ncore: 1562                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1562", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1562\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1562\n$TOCCATA_DIR/core.toc:: 1562\n");
#endif
abort();
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}
Value *rslt16 = proto1Arg(&count_Implementations_310, "<nothing>/count", k_str_13, "core", 1563);
switch (rslt16->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1563\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}

// static-fixed
// #line 1563 "/home/jim/toccata/core.toc"
Value *rslt17 = _PLUS__649(empty_list, numPtr1, rslt16);
switch (rslt17->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt17)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1563\n$TOCCATA_DIR/core.toc:: 1557\n");
#endif
abort();
}

// static-fixed
// #line 1563 "/home/jim/toccata/core.toc"
Value *rslt18 = spaces_1736(empty_list, rslt17);

// call-list
// #line 1563 "/home/jim/toccata/core.toc"
List *newList19 = empty_list;
newList19 = listCons((Value *)rslt18, newList19);
Value *rslt20 = (Value *)newList19;
switch (rslt20->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt20)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1563\n$TOCCATA_DIR/core.toc:: 1563\n$TOCCATA_DIR/core.toc:: 1563\n");
#endif
abort();
}
switch (rslt20->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt20)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1563\n$TOCCATA_DIR/core.toc: 1563\ncore: 1563                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt20, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt20))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1563\n$TOCCATA_DIR/core.toc: 1563\ncore: 1563                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt20, 1);
Value *rslt20_0;
Value *rslt20_1;
Value **rslt20_args[2] = {&rslt20_0, &rslt20_1};
destructValue("$TOCCATA_DIR/core.toc", "1563", (Value *)rslt20, 2, rslt20_args);
dec_and_free(rslt20_0, 1);
dec_and_free(rslt20_1, 1);
}
Value *rslt21 = proto2Arg(&comp_STAR__Implementations_241, "comp*", indent_5, rslt20, "core", 1563);
switch (rslt21->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt21)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1563\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt22 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", v_4, rslt21, "core", 1563);

// call-list
// #line 1562 "/home/jim/toccata/core.toc"
List *newList23 = empty_list;
newList23 = listCons((Value *)rslt22, newList23);
Value *rslt24 = (Value *)newList23;
switch (rslt24->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt24)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1562\n$TOCCATA_DIR/core.toc:: 1562\n$TOCCATA_DIR/core.toc:: 1562\n");
#endif
abort();
}
switch (rslt24->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt24)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1562\n$TOCCATA_DIR/core.toc: 1562\ncore: 1562                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt24, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1563\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt24))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1562\n$TOCCATA_DIR/core.toc: 1562\ncore: 1562                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt24, 1);
Value *rslt24_0;
Value *rslt24_1;
Value **rslt24_args[2] = {&rslt24_0, &rslt24_1};
destructValue("$TOCCATA_DIR/core.toc", "1563", (Value *)rslt24, 2, rslt24_args);
dec_and_free(rslt24_0, 1);
dec_and_free(rslt24_1, 1);
}

// type-known for comp*
// #line 1562 "/home/jim/toccata/core.toc"
Value *rslt25 = List_comp_STAR__566(empty_list, rslt15, rslt24);
return(rslt25);

};};
Value *show_kv_1749(List *closures, Value *arg0, Value *indent_5) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1560\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1560\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1560", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
switch (indent_5->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent' at $TOCCATA_DIR/core.toc, line 1560\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_5)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1561\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(show_kv_1747(closures, arg0, indent_5));
};
FnArity show_kv_1748 = {FnArityType, -1, 2, (List *)0, 0, show_kv_1749};
Function show_kv_1750 = {FunctionType, -1, "show-kv", 1, {&show_kv_1748}};
Value *show_kv_1746 = (Value *)&show_kv_1750;

Value *arityImpl1752(List *closures, Value *, Value *);
Integer num5 = {IntegerType, -1, 12};
Value *numPtr5 = (Value *)&num5;
Integer num6 = {IntegerType, -1, 13};
Value *numPtr6 = (Value *)&num6;
Integer num7 = {IntegerType, -1, 11};
Value *numPtr7 = (Value *)&num7;
Value *arityImpl1752(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
List *newList2 = empty_list;
newList2 = listCons((Value *)numPtr7, newList2);
newList2 = listCons((Value *)numPtr6, newList2);
newList2 = listCons((Value *)numPtr5, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From: \n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 3) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 3, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value *rslt3_2;
Value *rslt3_3;
Value **rslt3_args[4] = {&rslt3_0, &rslt3_1, &rslt3_2, &rslt3_3};
destructValue("", "0", (Value *)rslt3, 4, rslt3_args);
switch (rslt3_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
switch (rslt3_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_1)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
switch (rslt3_2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_2)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
dec_and_free(rslt3_2, 1);
dec_and_free(rslt3_3, 1);
}
Value *rslt4 = reified_get_type_31(empty_list, y_1);
List *newList5 = empty_list;
newList5 = listCons((Value *)rslt4, newList5);
newList5 = listCons((Value *)_EQ__STAR__440, newList5);
Value *rslt6 = (Value *)newList5;
Value *rslt7 = partial_720(empty_list, (Value *)rslt6);
Value *rslt8 = some_714(empty_list, rslt3, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt8);

};};
FnArity staticArity1753 = {FnArityType, -1, 2, (List *)0, 0, arityImpl1752};
ReifiedVal reifiedStatic1755 = {29, -1, (Value *)0, 0, {}};
Value *reifiedPtr1756 = (Value *)&reifiedStatic1755;
Value *ArrayNode_string_list_1769(List *closures, Value *);
Value *ArrayNode_show_STAR__1770(List *closures, Value *, Value *);
Value *ArrayNode__EQ__STAR__1771(List *closures, Value *, Value *);
Value *ArrayNode_seq_1772(List *closures, Value *);
Value *ArrayNode_type_name_1773(List *closures, Value *);
Value *ArrayNode_keys_1774(List *closures, Value *);
Value *ArrayNode_vals_1775(List *closures, Value *);
Value *ArrayNode_get_1776(List *closures, Value *, Value *);
Value *ArrayNode_get_1777(List *closures, Value *, Value *, Value *);
Value *ArrayNode_zero_1778(List *closures, Value *);
Value *ArrayNode_comp_STAR__1779(List *closures, Value *, Value *);
Value *ArrayNode_empty_QM__1780(List *closures, Value *);

// --------- anon -------------
Value *fn1782;
Value *anon_1783(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1590", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *rslt5 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", k_3, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr4, newList6);
Value *rslt7 = (Value *)newList6;
Value *rslt8 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", v_4, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)rslt8, newList9);
newList9 = listCons((Value *)rslt7, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value *rslt10_2;
Value **rslt10_args[3] = {&rslt10_0, &rslt10_1, &rslt10_2};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10, 3, rslt10_args);
switch (rslt10_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10_0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10_0, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10_0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10_0, 1);
Value *rslt10_0_0;
Value *rslt10_0_1;
Value **rslt10_0_args[2] = {&rslt10_0_0, &rslt10_0_1};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10_0, 2, rslt10_0_args);
switch (rslt10_0_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_0_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
dec_and_free(rslt10_0_0, 1);
dec_and_free(rslt10_0_1, 1);
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
dec_and_free(rslt10_2, 1);
}

// type-known for comp*
// #line 1591 "/home/jim/toccata/core.toc"
Value *rslt11 = List_comp_STAR__566(empty_list, rslt5, rslt10);
return(rslt11);

};};
Value *anon_1785(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1590", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1783(closures, arg0));
};
FnArity anon_1784 = {FnArityType, -1, 1, (List *)0, 0, anon_1785};
Function anon_1786 = {FunctionType, -1, "anon", 1, {&anon_1784}};
Value *fn1782 = (Value *)&anon_1786;

struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str27 = {StringBufferType, -1, 1, 0, "{"};
Value *strPtr27 = (Value *)&str27;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str28 = {StringBufferType, -1, 1, 0, "}"};
Value *strPtr28 = (Value *)&str28;
Value *ArrayNode_string_list_1769(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", n_0, "core", 1589);
Value *a_list_2 = rslt1;
Value *l_3 = a_list_2;
incRef(l_3, 1);
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt4 = list_map_93(empty_list, l_3, fn1782);
Value *kv_strs_5 = rslt4;
incRef(kv_strs_5, 1);

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr27, newList6);
Value *rslt7 = (Value *)newList6;
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt7->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt7, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt7))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt7, 1);
Value *rslt7_0;
Value *rslt7_1;
Value **rslt7_args[2] = {&rslt7_0, &rslt7_1};
destructValue("", "0", (Value *)rslt7, 2, rslt7_args);
switch (rslt7_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt7_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt7_0, 1);
dec_and_free(rslt7_1, 1);
}

// call-list
// #line 1593 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr17, newList8);
Value *rslt9 = (Value *)newList8;
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
switch (rslt9->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt9, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt9))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt9, 1);
Value *rslt9_0;
Value *rslt9_1;
Value **rslt9_args[2] = {&rslt9_0, &rslt9_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt9, 2, rslt9_args);
switch (rslt9_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt9_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
dec_and_free(rslt9_0, 1);
dec_and_free(rslt9_1, 1);
}

// static-fixed
// #line 1593 "/home/jim/toccata/core.toc"
Value *rslt10 = interpose_863(empty_list, kv_strs_5, rslt9);
Value *rslt11 = proto1Arg(&flatten_Implementations_265, "<nothing>/flatten", rslt10, "core", 1593);

// call-list
// #line 1594 "/home/jim/toccata/core.toc"
List *newList12 = empty_list;
newList12 = listCons((Value *)strPtr28, newList12);
Value *rslt13 = (Value *)newList12;

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)rslt13, newList14);
newList14 = listCons((Value *)rslt11, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1594\n");
#endif
abort();
}
switch (rslt15_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15_1, 1);
Value *rslt15_1_0;
Value *rslt15_1_1;
Value **rslt15_1_args[2] = {&rslt15_1_0, &rslt15_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15_1, 2, rslt15_1_args);
switch (rslt15_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt15_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt15_1_0, 1);
dec_and_free(rslt15_1_1, 1);
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}

// type-known for comp*
// #line 1592 "/home/jim/toccata/core.toc"
Value *rslt16 = List_comp_STAR__566(empty_list, rslt7, rslt15);
switch (rslt16->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt16);

};};
FnArity ArrayNode_string_list_1787 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_string_list_1769};
Value *anon_1791(List *closures, Value *kv_0) {

while (1) {
incRef(kv_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);
incRef(val1, 3);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1602\n$TOCCATA_DIR/core.toc:: 1561\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1602 "/home/jim/toccata/core.toc"
Value *rslt2 = show_kv_1747(empty_list, kv_0, val1);

// call-list
// #line 1601 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)rslt2, newList3);
newList3 = listCons((Value *)strPtr4, newList3);
newList3 = listCons((Value *)val1, newList3);
newList3 = listCons((Value *)strPtr19, newList3);
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1601 "/home/jim/toccata/core.toc"
Value *rslt5 = list_STAR__617(empty_list, (Value *)rslt4);
return(rslt5);

};};
Value *ArrayNode_show_STAR__1770(List *closures, Value *m_0, Value *indent_1) {
while (1) {
incRef(m_0, 3);
incRef(indent_1, 2);
Value *rslt2 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", m_0, "core", 1597);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1597\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_3, string_list_795);
if (!isNothing(rslt4,"",0)) {
Value *rslt20 = maybeExtract(rslt4);
return(rslt20);
} else {
dec_and_free(rslt4, 1);
Value *rslt5 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1598);
Value *h_8;
Value *tail_6;
Value **destArgs7[2] = {&h_8, &tail_6};
destructValue("core", "1598", (Value *)rslt5, 2, destArgs7);
incRef(h_8, 1);
switch (h_8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, h_8)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (countSeq(incRef(h_8, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, h_8))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(h_8, 1);
Value *h_8_0;
Value *h_8_1;
Value *h_8_2;
Value **h_8_args[3] = {&h_8_0, &h_8_1, &h_8_2};
destructValue("$TOCCATA_DIR/core.toc", "1598", (Value *)h_8, 3, h_8_args);
dec_and_free(h_8_0, 1);
dec_and_free(h_8_1, 1);
dec_and_free(h_8_2, 1);
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt9 = show_kv_1747(empty_list, h_8, indent_1);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt10 = cons_282(empty_list, strPtr27, rslt9);
Value *l_11 = tail_6;
incRef(l_11, 1);
switch (l_11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_12 = malloc_fnArity();
anon_12->count = 1;
anon_12->variadic = 0;
anon_12->fn = anon_1791;
anon_12->closures = empty_list;
anon_12->closures = listCons((Value *)indent_1, (List *)anon_12->closures);
Function *anon_1794 = malloc_function(1);
anon_1794->name = "anon";
anon_1794->arityCount = 1;
anon_1794->arities[0] = anon_12;
Value *fn1790 = (Value *)anon_1794;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt13 = list_map_93(empty_list, l_11, fn1790);
switch (rslt13->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt14 = list_concat_99(empty_list, rslt13);

// call-list
// #line 1603 "/home/jim/toccata/core.toc"
List *newList15 = empty_list;
newList15 = listCons((Value *)strPtr28, newList15);
Value *rslt16 = (Value *)newList15;

// call-list
// #line 1599 "/home/jim/toccata/core.toc"
List *newList17 = empty_list;
newList17 = listCons((Value *)rslt16, newList17);
newList17 = listCons((Value *)rslt14, newList17);
Value *rslt18 = (Value *)newList17;
switch (rslt18->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
switch (rslt18->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18, 1);
Value *rslt18_0;
Value *rslt18_1;
Value *rslt18_2;
Value **rslt18_args[3] = {&rslt18_0, &rslt18_1, &rslt18_2};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18, 3, rslt18_args);
switch (rslt18_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1603\n");
#endif
abort();
}
switch (rslt18_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18_1, 1);
Value *rslt18_1_0;
Value *rslt18_1_1;
Value **rslt18_1_args[2] = {&rslt18_1_0, &rslt18_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18_1, 2, rslt18_1_args);
switch (rslt18_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt18_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
dec_and_free(rslt18_1_0, 1);
dec_and_free(rslt18_1_1, 1);
}
dec_and_free(rslt18_0, 1);
dec_and_free(rslt18_1, 1);
dec_and_free(rslt18_2, 1);
}

// type-known for comp*
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt19 = List_comp_STAR__566(empty_list, rslt10, rslt18);
switch (rslt19->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt19);
}

};};
Value *ArrayNode_show_STAR__1796(List *closures, Value *m_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1596\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(ArrayNode_show_STAR__1770(closures, m_0, indent_1));
};
FnArity ArrayNode_show_STAR__1795 = {FnArityType, -1, 2, (List *)0, 0, ArrayNode_show_STAR__1796};
Value *anon_1798(List *closures, Value *arg0) {

while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1616", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *val5;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs17[2] = {&val5, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs17);
incRef(val5, 1);

dec_and_free(closuresTail, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", val5, k_3, "core", 1617);
Value *mv_7 = rslt6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(mv_7, 2);
dec_and_free(partial_719, 1);
dec_and_free(v_4, 2);
dec_and_free(_EQ__701, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);

// call-list
// #line 1618 "/home/jim/toccata/core.toc"
List *newList10 = empty_list;
newList10 = listCons((Value *)v_4, newList10);
newList10 = listCons((Value *)_EQ__701, newList10);
Value *rslt11 = (Value *)newList10;

// static-variadic
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt12 = partial_720(empty_list, (Value *)rslt11);

// dynamic unknown type
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt16;
if((rslt12)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(rslt12->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1618\n",
extractStr(type_name(empty_list, rslt12)), rslt12->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt16 = _fn(_arity->closures, rslt12, rslt9);
} else {
FnArity *arity13 = findFnArity(rslt12, 1);
if(arity13 != (FnArity *)0 && !arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
rslt16 = fn15(arity13->closures, rslt9);
} else if(arity13 != (FnArity *)0 && arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
List *dynArgs14 = empty_list;
dynArgs14 = (List *)listCons(rslt9, dynArgs14);
rslt16 = fn15(arity13->closures, (Value *)dynArgs14);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)rslt12)->name);
  abort();
}
dec_and_free(rslt12, 1);
}
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1618);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt8 = rslt16;
}
return(andRslt8);

};};
Value *ArrayNode__EQ__STAR__1771(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 4);
Value *andRslt2;

// type-known for instance?
// #line 1614 "/home/jim/toccata/core.toc"
Value *rslt3 = arityImpl1752(empty_list, reifiedPtr1756, y_1);
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 3);
dec_and_free(x_0, 6);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt4 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1615);
Value *rslt5 = proto1Arg(&count_Implementations_310, "<nothing>/count", y_1, "core", 1615);

// static-fixed
// #line 1615 "/home/jim/toccata/core.toc"
Value *rslt6 = _EQ__703(empty_list, rslt4, rslt5);
if (rslt6->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1615);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
abort();
}
andRslt2 = rslt6;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 1);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", x_0, "core", 1616);
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_1798;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)y_1, (List *)anon_8->closures);
Function *anon_1801 = malloc_function(1);
anon_1801->name = "anon";
anon_1801->arityCount = 1;
anon_1801->arities[0] = anon_8;
Value *fn1797 = (Value *)anon_1801;

// static-fixed
// #line 1616 "/home/jim/toccata/core.toc"
Value *rslt9 = every_1630(empty_list, rslt7, fn1797);
andRslt2 = rslt9;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 1619 "/home/jim/toccata/core.toc"
Value *rslt10 = maybe_4(empty_list, x_0);
switch (rslt10->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1619\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt10);
}
}
}

};};
FnArity ArrayNode__EQ__STAR__1802 = {FnArityType, -1, 2, (List *)0, 0, ArrayNode__EQ__STAR__1771};
Value *ArrayNode_seq_1772(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto2Arg(&hash_seq_Implementations_21, "<nothing>/hash-seq", n_0, empty_list_0, "core", 1610);
switch (rslt1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1610\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 415\n");
#endif
abort();
}
return(rslt1);

};};
FnArity ArrayNode_seq_1804 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_seq_1772};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str29 = {StringBufferType, -1, 7, 0, "HashMap"};
Value *strPtr29 = (Value *)&str29;
Value *ArrayNode_type_name_1773(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr29);

};};
FnArity ArrayNode_type_name_1806 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_type_name_1773};

// --------- anon -------------
Value *fn1809;
Value *anon_1810(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1623", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);

dec_and_free(v_4, 1);

dec_and_free(tail_1, 1);
return(k_3);

};};
Value *anon_1812(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1623", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1810(closures, arg0));
};
FnArity anon_1811 = {FnArityType, -1, 1, (List *)0, 0, anon_1812};
Function anon_1813 = {FunctionType, -1, "anon", 1, {&anon_1811}};
Value *fn1809 = (Value *)&anon_1813;

Value *ArrayNode_keys_1774(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1623);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1809);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 519\n");
#endif
abort();
}
return(rslt3);

};};
FnArity ArrayNode_keys_1814 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_keys_1774};

// --------- anon -------------
Value *fn1817;
Value *anon_1818(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1625", (Value *)arg0, 3, destArgs2);

dec_and_free(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
return(v_4);

};};
Value *anon_1820(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1625", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1818(closures, arg0));
};
FnArity anon_1819 = {FnArityType, -1, 1, (List *)0, 0, anon_1820};
Function anon_1821 = {FunctionType, -1, "anon", 1, {&anon_1819}};
Value *fn1817 = (Value *)&anon_1821;

Value *ArrayNode_vals_1775(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1625);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1817);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 523\n");
#endif
abort();
}
return(rslt3);

};};
FnArity ArrayNode_vals_1822 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_vals_1775};
Value *ArrayNode_get_1776(List *closures, Value *m_0, Value *k_1) {
while (1) {

// inline
// #line 1627 "/home/jim/toccata/core.toc"
return(hashMapGet(m_0, k_1));
#

};};
FnArity ArrayNode_get_1824 = {FnArityType, -1, 2, (List *)0, 0, ArrayNode_get_1776};
Value *ArrayNode_get_1777(List *closures, Value *m_0, Value *k_1, Value *not_found_2) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 1);
incRef(not_found_2, 1);
Value *rslt3 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_1, "core", 1629);
if (!isNothing(rslt3,"",0)) {
Value *rslt4 = maybeExtract(rslt3);
return(rslt4);
} else {
dec_and_free(rslt3, 1);
return(not_found_2);
}

};};
FnArity ArrayNode_get_1826 = {FnArityType, -1, 3, (List *)0, 0, ArrayNode_get_1777};
Value *ArrayNode_zero_1778(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(emptyBMI_151);

};};
FnArity ArrayNode_zero_1828 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_zero_1778};

// --------- anon -------------
Value *fn1830;

// --------- anon -------------
Value *fn1832;
Value *anon_1833(List *closures, Value *acc_0, Value *pair_1) {
while (1) {
incRef(acc_0, 1);
incRef(pair_1, 1);
Value *f_2 = assoc_398;
incRef(f_2, 1);
switch (f_2->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_2)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}

// call-list
// #line 1580 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)pair_1, newList3);
newList3 = listCons((Value *)acc_0, newList3);
Value *rslt4 = (Value *)newList3;
Value *args_5 = rslt4;
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 1580\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
incRef(args_5, 1);
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt6 = fn_apply_117(empty_list, list_STAR__616, args_5);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt7 = fn_apply_117(empty_list, f_2, rslt6);
return(rslt7);

};};
FnArity anon_1834 = {FnArityType, -1, 2, (List *)0, 0, anon_1833};
Function anon_1836 = {FunctionType, -1, "anon", 1, {&anon_1834}};
Value *fn1832 = (Value *)&anon_1836;

Value *anon_1831(List *closures, Value *acc_0, Value *mval_1) {
while (1) {
incRef(acc_0, 1);
incRef(mval_1, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", mval_1, "core", 1578);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1578\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1578\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1578 "/home/jim/toccata/core.toc"
Value *rslt3 = List_reduce_635(empty_list, rslt2, acc_0, fn1832);
return(rslt3);

};};
FnArity anon_1837 = {FnArityType, -1, 2, (List *)0, 0, anon_1831};
Function anon_1839 = {FunctionType, -1, "anon", 1, {&anon_1837}};
Value *fn1830 = (Value *)&anon_1839;

Value *ArrayNode_comp_STAR__1779(List *closures, Value *mval_0, Value *mvals_1) {
while (1) {
incRef(mval_0, 1);
incRef(mvals_1, 1);
Value *rslt2 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", mvals_1, mval_0, fn1830, "core", 1576);
return(rslt2);

};};
FnArity ArrayNode_comp_STAR__1840 = {FnArityType, -1, 2, (List *)0, 0, ArrayNode_comp_STAR__1779};
Value *ArrayNode_empty_QM__1780(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1584);

// static-fixed
// #line 1584 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1584);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(emptyBMI_151, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 1585 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, emptyBMI_151);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1585\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity ArrayNode_empty_QM__1842 = {FnArityType, -1, 1, (List *)0, 0, ArrayNode_empty_QM__1780};
Value *HashCollisionNode_string_list_1856(List *closures, Value *);
Value *HashCollisionNode_show_STAR__1857(List *closures, Value *, Value *);
Value *HashCollisionNode__EQ__STAR__1858(List *closures, Value *, Value *);
Value *HashCollisionNode_seq_1859(List *closures, Value *);
Value *HashCollisionNode_type_name_1860(List *closures, Value *);
Value *HashCollisionNode_keys_1861(List *closures, Value *);
Value *HashCollisionNode_vals_1862(List *closures, Value *);
Value *HashCollisionNode_get_1863(List *closures, Value *, Value *);
Value *HashCollisionNode_get_1864(List *closures, Value *, Value *, Value *);
Value *HashCollisionNode_zero_1865(List *closures, Value *);
Value *HashCollisionNode_comp_STAR__1866(List *closures, Value *, Value *);
Value *HashCollisionNode_empty_QM__1867(List *closures, Value *);

// --------- anon -------------
Value *fn1869;
Value *anon_1870(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1590", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *rslt5 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", k_3, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr4, newList6);
Value *rslt7 = (Value *)newList6;
Value *rslt8 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", v_4, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)rslt8, newList9);
newList9 = listCons((Value *)rslt7, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value *rslt10_2;
Value **rslt10_args[3] = {&rslt10_0, &rslt10_1, &rslt10_2};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10, 3, rslt10_args);
switch (rslt10_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10_0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10_0, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10_0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10_0, 1);
Value *rslt10_0_0;
Value *rslt10_0_1;
Value **rslt10_0_args[2] = {&rslt10_0_0, &rslt10_0_1};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10_0, 2, rslt10_0_args);
switch (rslt10_0_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_0_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
dec_and_free(rslt10_0_0, 1);
dec_and_free(rslt10_0_1, 1);
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
dec_and_free(rslt10_2, 1);
}

// type-known for comp*
// #line 1591 "/home/jim/toccata/core.toc"
Value *rslt11 = List_comp_STAR__566(empty_list, rslt5, rslt10);
return(rslt11);

};};
Value *anon_1872(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1590", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1870(closures, arg0));
};
FnArity anon_1871 = {FnArityType, -1, 1, (List *)0, 0, anon_1872};
Function anon_1873 = {FunctionType, -1, "anon", 1, {&anon_1871}};
Value *fn1869 = (Value *)&anon_1873;

Value *HashCollisionNode_string_list_1856(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", n_0, "core", 1589);
Value *a_list_2 = rslt1;
Value *l_3 = a_list_2;
incRef(l_3, 1);
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt4 = list_map_93(empty_list, l_3, fn1869);
Value *kv_strs_5 = rslt4;
incRef(kv_strs_5, 1);

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr27, newList6);
Value *rslt7 = (Value *)newList6;
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt7->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt7, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt7))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt7, 1);
Value *rslt7_0;
Value *rslt7_1;
Value **rslt7_args[2] = {&rslt7_0, &rslt7_1};
destructValue("$TOCCATA_DIR/core.toc", "1592", (Value *)rslt7, 2, rslt7_args);
switch (rslt7_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt7_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt7_0, 1);
dec_and_free(rslt7_1, 1);
}

// call-list
// #line 1593 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr17, newList8);
Value *rslt9 = (Value *)newList8;
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
switch (rslt9->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt9, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt9))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt9, 1);
Value *rslt9_0;
Value *rslt9_1;
Value **rslt9_args[2] = {&rslt9_0, &rslt9_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt9, 2, rslt9_args);
switch (rslt9_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt9_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
dec_and_free(rslt9_0, 1);
dec_and_free(rslt9_1, 1);
}

// static-fixed
// #line 1593 "/home/jim/toccata/core.toc"
Value *rslt10 = interpose_863(empty_list, kv_strs_5, rslt9);
Value *rslt11 = proto1Arg(&flatten_Implementations_265, "<nothing>/flatten", rslt10, "core", 1593);

// call-list
// #line 1594 "/home/jim/toccata/core.toc"
List *newList12 = empty_list;
newList12 = listCons((Value *)strPtr28, newList12);
Value *rslt13 = (Value *)newList12;

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)rslt13, newList14);
newList14 = listCons((Value *)rslt11, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1594\n");
#endif
abort();
}
switch (rslt15_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15_1, 1);
Value *rslt15_1_0;
Value *rslt15_1_1;
Value **rslt15_1_args[2] = {&rslt15_1_0, &rslt15_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15_1, 2, rslt15_1_args);
switch (rslt15_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt15_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt15_1_0, 1);
dec_and_free(rslt15_1_1, 1);
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}

// type-known for comp*
// #line 1592 "/home/jim/toccata/core.toc"
Value *rslt16 = List_comp_STAR__566(empty_list, rslt7, rslt15);
switch (rslt16->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt16);

};};
FnArity HashCollisionNode_string_list_1874 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_string_list_1856};
Value *anon_1878(List *closures, Value *kv_0) {

while (1) {
incRef(kv_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);
incRef(val1, 3);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1602\n$TOCCATA_DIR/core.toc:: 1561\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1602 "/home/jim/toccata/core.toc"
Value *rslt2 = show_kv_1747(empty_list, kv_0, val1);

// call-list
// #line 1601 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)rslt2, newList3);
newList3 = listCons((Value *)strPtr4, newList3);
newList3 = listCons((Value *)val1, newList3);
newList3 = listCons((Value *)strPtr19, newList3);
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1601 "/home/jim/toccata/core.toc"
Value *rslt5 = list_STAR__617(empty_list, (Value *)rslt4);
return(rslt5);

};};
Value *HashCollisionNode_show_STAR__1857(List *closures, Value *m_0, Value *indent_1) {
while (1) {
incRef(m_0, 3);
incRef(indent_1, 2);
Value *rslt2 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", m_0, "core", 1597);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1597\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_3, string_list_795);
if (!isNothing(rslt4,"",0)) {
Value *rslt20 = maybeExtract(rslt4);
return(rslt20);
} else {
dec_and_free(rslt4, 1);
Value *rslt5 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1598);
Value *h_8;
Value *tail_6;
Value **destArgs7[2] = {&h_8, &tail_6};
destructValue("core", "1598", (Value *)rslt5, 2, destArgs7);
incRef(h_8, 1);
switch (h_8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, h_8)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (countSeq(incRef(h_8, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, h_8))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(h_8, 1);
Value *h_8_0;
Value *h_8_1;
Value *h_8_2;
Value **h_8_args[3] = {&h_8_0, &h_8_1, &h_8_2};
destructValue("$TOCCATA_DIR/core.toc", "1598", (Value *)h_8, 3, h_8_args);
dec_and_free(h_8_0, 1);
dec_and_free(h_8_1, 1);
dec_and_free(h_8_2, 1);
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt9 = show_kv_1747(empty_list, h_8, indent_1);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt10 = cons_282(empty_list, strPtr27, rslt9);
Value *l_11 = tail_6;
incRef(l_11, 1);
switch (l_11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_12 = malloc_fnArity();
anon_12->count = 1;
anon_12->variadic = 0;
anon_12->fn = anon_1878;
anon_12->closures = empty_list;
anon_12->closures = listCons((Value *)indent_1, (List *)anon_12->closures);
Function *anon_1881 = malloc_function(1);
anon_1881->name = "anon";
anon_1881->arityCount = 1;
anon_1881->arities[0] = anon_12;
Value *fn1877 = (Value *)anon_1881;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt13 = list_map_93(empty_list, l_11, fn1877);
switch (rslt13->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt14 = list_concat_99(empty_list, rslt13);

// call-list
// #line 1603 "/home/jim/toccata/core.toc"
List *newList15 = empty_list;
newList15 = listCons((Value *)strPtr28, newList15);
Value *rslt16 = (Value *)newList15;

// call-list
// #line 1599 "/home/jim/toccata/core.toc"
List *newList17 = empty_list;
newList17 = listCons((Value *)rslt16, newList17);
newList17 = listCons((Value *)rslt14, newList17);
Value *rslt18 = (Value *)newList17;
switch (rslt18->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
switch (rslt18->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18, 1);
Value *rslt18_0;
Value *rslt18_1;
Value *rslt18_2;
Value **rslt18_args[3] = {&rslt18_0, &rslt18_1, &rslt18_2};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18, 3, rslt18_args);
switch (rslt18_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1603\n");
#endif
abort();
}
switch (rslt18_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18_1, 1);
Value *rslt18_1_0;
Value *rslt18_1_1;
Value **rslt18_1_args[2] = {&rslt18_1_0, &rslt18_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18_1, 2, rslt18_1_args);
switch (rslt18_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt18_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
dec_and_free(rslt18_1_0, 1);
dec_and_free(rslt18_1_1, 1);
}
dec_and_free(rslt18_0, 1);
dec_and_free(rslt18_1, 1);
dec_and_free(rslt18_2, 1);
}

// type-known for comp*
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt19 = List_comp_STAR__566(empty_list, rslt10, rslt18);
switch (rslt19->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt19);
}

};};
Value *HashCollisionNode_show_STAR__1883(List *closures, Value *m_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1596\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(HashCollisionNode_show_STAR__1857(closures, m_0, indent_1));
};
FnArity HashCollisionNode_show_STAR__1882 = {FnArityType, -1, 2, (List *)0, 0, HashCollisionNode_show_STAR__1883};
Value *anon_1885(List *closures, Value *arg0) {

while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1616", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *val5;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs17[2] = {&val5, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs17);
incRef(val5, 1);

dec_and_free(closuresTail, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", val5, k_3, "core", 1617);
Value *mv_7 = rslt6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(mv_7, 2);
dec_and_free(partial_719, 1);
dec_and_free(v_4, 2);
dec_and_free(_EQ__701, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);

// call-list
// #line 1618 "/home/jim/toccata/core.toc"
List *newList10 = empty_list;
newList10 = listCons((Value *)v_4, newList10);
newList10 = listCons((Value *)_EQ__701, newList10);
Value *rslt11 = (Value *)newList10;

// static-variadic
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt12 = partial_720(empty_list, (Value *)rslt11);

// dynamic unknown type
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt16;
if((rslt12)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(rslt12->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1618\n",
extractStr(type_name(empty_list, rslt12)), rslt12->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt16 = _fn(_arity->closures, rslt12, rslt9);
} else {
FnArity *arity13 = findFnArity(rslt12, 1);
if(arity13 != (FnArity *)0 && !arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
rslt16 = fn15(arity13->closures, rslt9);
} else if(arity13 != (FnArity *)0 && arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
List *dynArgs14 = empty_list;
dynArgs14 = (List *)listCons(rslt9, dynArgs14);
rslt16 = fn15(arity13->closures, (Value *)dynArgs14);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)rslt12)->name);
  abort();
}
dec_and_free(rslt12, 1);
}
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1618);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt8 = rslt16;
}
return(andRslt8);

};};
Value *HashCollisionNode__EQ__STAR__1858(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 4);
Value *andRslt2;

// type-known for instance?
// #line 1614 "/home/jim/toccata/core.toc"
Value *rslt3 = arityImpl1752(empty_list, reifiedPtr1756, y_1);
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 3);
dec_and_free(x_0, 6);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt4 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1615);
Value *rslt5 = proto1Arg(&count_Implementations_310, "<nothing>/count", y_1, "core", 1615);

// static-fixed
// #line 1615 "/home/jim/toccata/core.toc"
Value *rslt6 = _EQ__703(empty_list, rslt4, rslt5);
if (rslt6->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1615);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
abort();
}
andRslt2 = rslt6;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 1);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", x_0, "core", 1616);
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_1885;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)y_1, (List *)anon_8->closures);
Function *anon_1888 = malloc_function(1);
anon_1888->name = "anon";
anon_1888->arityCount = 1;
anon_1888->arities[0] = anon_8;
Value *fn1884 = (Value *)anon_1888;

// static-fixed
// #line 1616 "/home/jim/toccata/core.toc"
Value *rslt9 = every_1630(empty_list, rslt7, fn1884);
andRslt2 = rslt9;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 1619 "/home/jim/toccata/core.toc"
Value *rslt10 = maybe_4(empty_list, x_0);
switch (rslt10->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1619\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt10);
}
}
}

};};
FnArity HashCollisionNode__EQ__STAR__1889 = {FnArityType, -1, 2, (List *)0, 0, HashCollisionNode__EQ__STAR__1858};
Value *HashCollisionNode_seq_1859(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto2Arg(&hash_seq_Implementations_21, "<nothing>/hash-seq", n_0, empty_list_0, "core", 1610);
switch (rslt1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1610\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 415\n");
#endif
abort();
}
return(rslt1);

};};
FnArity HashCollisionNode_seq_1891 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_seq_1859};
Value *HashCollisionNode_type_name_1860(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr29);

};};
FnArity HashCollisionNode_type_name_1893 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_type_name_1860};

// --------- anon -------------
Value *fn1896;
Value *anon_1897(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1623", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);

dec_and_free(v_4, 1);

dec_and_free(tail_1, 1);
return(k_3);

};};
Value *anon_1899(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1623", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1897(closures, arg0));
};
FnArity anon_1898 = {FnArityType, -1, 1, (List *)0, 0, anon_1899};
Function anon_1900 = {FunctionType, -1, "anon", 1, {&anon_1898}};
Value *fn1896 = (Value *)&anon_1900;

Value *HashCollisionNode_keys_1861(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1623);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1896);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 519\n");
#endif
abort();
}
return(rslt3);

};};
FnArity HashCollisionNode_keys_1901 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_keys_1861};

// --------- anon -------------
Value *fn1904;
Value *anon_1905(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1625", (Value *)arg0, 3, destArgs2);

dec_and_free(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
return(v_4);

};};
Value *anon_1907(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1625", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1905(closures, arg0));
};
FnArity anon_1906 = {FnArityType, -1, 1, (List *)0, 0, anon_1907};
Function anon_1908 = {FunctionType, -1, "anon", 1, {&anon_1906}};
Value *fn1904 = (Value *)&anon_1908;

Value *HashCollisionNode_vals_1862(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1625);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1904);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 523\n");
#endif
abort();
}
return(rslt3);

};};
FnArity HashCollisionNode_vals_1909 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_vals_1862};
Value *HashCollisionNode_get_1863(List *closures, Value *m_0, Value *k_1) {
while (1) {

// inline
// #line 1627 "/home/jim/toccata/core.toc"
return(hashMapGet(m_0, k_1));
#

};};
FnArity HashCollisionNode_get_1911 = {FnArityType, -1, 2, (List *)0, 0, HashCollisionNode_get_1863};
Value *HashCollisionNode_get_1864(List *closures, Value *m_0, Value *k_1, Value *not_found_2) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 1);
incRef(not_found_2, 1);
Value *rslt3 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_1, "core", 1629);
if (!isNothing(rslt3,"",0)) {
Value *rslt4 = maybeExtract(rslt3);
return(rslt4);
} else {
dec_and_free(rslt3, 1);
return(not_found_2);
}

};};
FnArity HashCollisionNode_get_1913 = {FnArityType, -1, 3, (List *)0, 0, HashCollisionNode_get_1864};
Value *HashCollisionNode_zero_1865(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(emptyBMI_151);

};};
FnArity HashCollisionNode_zero_1915 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_zero_1865};

// --------- anon -------------
Value *fn1917;

// --------- anon -------------
Value *fn1919;
Value *anon_1920(List *closures, Value *acc_0, Value *pair_1) {
while (1) {
incRef(acc_0, 1);
incRef(pair_1, 1);
Value *f_2 = assoc_398;
incRef(f_2, 1);
switch (f_2->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_2)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}

// call-list
// #line 1580 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)pair_1, newList3);
newList3 = listCons((Value *)acc_0, newList3);
Value *rslt4 = (Value *)newList3;
Value *args_5 = rslt4;
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 1580\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
incRef(args_5, 1);
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt6 = fn_apply_117(empty_list, list_STAR__616, args_5);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt7 = fn_apply_117(empty_list, f_2, rslt6);
return(rslt7);

};};
FnArity anon_1921 = {FnArityType, -1, 2, (List *)0, 0, anon_1920};
Function anon_1923 = {FunctionType, -1, "anon", 1, {&anon_1921}};
Value *fn1919 = (Value *)&anon_1923;

Value *anon_1918(List *closures, Value *acc_0, Value *mval_1) {
while (1) {
incRef(acc_0, 1);
incRef(mval_1, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", mval_1, "core", 1578);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1578\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1578\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1578 "/home/jim/toccata/core.toc"
Value *rslt3 = List_reduce_635(empty_list, rslt2, acc_0, fn1919);
return(rslt3);

};};
FnArity anon_1924 = {FnArityType, -1, 2, (List *)0, 0, anon_1918};
Function anon_1926 = {FunctionType, -1, "anon", 1, {&anon_1924}};
Value *fn1917 = (Value *)&anon_1926;

Value *HashCollisionNode_comp_STAR__1866(List *closures, Value *mval_0, Value *mvals_1) {
while (1) {
incRef(mval_0, 1);
incRef(mvals_1, 1);
Value *rslt2 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", mvals_1, mval_0, fn1917, "core", 1576);
return(rslt2);

};};
FnArity HashCollisionNode_comp_STAR__1927 = {FnArityType, -1, 2, (List *)0, 0, HashCollisionNode_comp_STAR__1866};
Value *HashCollisionNode_empty_QM__1867(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1584);

// static-fixed
// #line 1584 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1584);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(emptyBMI_151, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 1585 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, emptyBMI_151);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1585\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity HashCollisionNode_empty_QM__1929 = {FnArityType, -1, 1, (List *)0, 0, HashCollisionNode_empty_QM__1867};
Value *BitmapIndexNode_string_list_1943(List *closures, Value *);
Value *BitmapIndexNode_show_STAR__1944(List *closures, Value *, Value *);
Value *BitmapIndexNode__EQ__STAR__1945(List *closures, Value *, Value *);
Value *BitmapIndexNode_seq_1946(List *closures, Value *);
Value *BitmapIndexNode_type_name_1947(List *closures, Value *);
Value *BitmapIndexNode_keys_1948(List *closures, Value *);
Value *BitmapIndexNode_vals_1949(List *closures, Value *);
Value *BitmapIndexNode_get_1950(List *closures, Value *, Value *);
Value *BitmapIndexNode_get_1951(List *closures, Value *, Value *, Value *);
Value *BitmapIndexNode_zero_1952(List *closures, Value *);
Value *BitmapIndexNode_comp_STAR__1953(List *closures, Value *, Value *);
Value *BitmapIndexNode_empty_QM__1954(List *closures, Value *);

// --------- anon -------------
Value *fn1956;
Value *anon_1957(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1590", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *rslt5 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", k_3, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr4, newList6);
Value *rslt7 = (Value *)newList6;
Value *rslt8 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", v_4, "core", 1591);

// call-list
// #line 1591 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)rslt8, newList9);
newList9 = listCons((Value *)rslt7, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value *rslt10_2;
Value **rslt10_args[3] = {&rslt10_0, &rslt10_1, &rslt10_2};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10, 3, rslt10_args);
switch (rslt10_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
switch (rslt10_0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10_0, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10_0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1591\n$TOCCATA_DIR/core.toc: 1591\ncore: 1591                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10_0, 1);
Value *rslt10_0_0;
Value *rslt10_0_1;
Value **rslt10_0_args[2] = {&rslt10_0_0, &rslt10_0_1};
destructValue("$TOCCATA_DIR/core.toc", "1591", (Value *)rslt10_0, 2, rslt10_0_args);
switch (rslt10_0_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1591\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_0_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1591\n$TOCCATA_DIR/core.toc:: 1591\n");
#endif
abort();
}
dec_and_free(rslt10_0_0, 1);
dec_and_free(rslt10_0_1, 1);
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
dec_and_free(rslt10_2, 1);
}

// type-known for comp*
// #line 1591 "/home/jim/toccata/core.toc"
Value *rslt11 = List_comp_STAR__566(empty_list, rslt5, rslt10);
return(rslt11);

};};
Value *anon_1959(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1590\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1590\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1590", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1957(closures, arg0));
};
FnArity anon_1958 = {FnArityType, -1, 1, (List *)0, 0, anon_1959};
Function anon_1960 = {FunctionType, -1, "anon", 1, {&anon_1958}};
Value *fn1956 = (Value *)&anon_1960;

Value *BitmapIndexNode_string_list_1943(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", n_0, "core", 1589);
Value *a_list_2 = rslt1;
Value *l_3 = a_list_2;
incRef(l_3, 1);
switch (l_3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt4 = list_map_93(empty_list, l_3, fn1956);
Value *kv_strs_5 = rslt4;
incRef(kv_strs_5, 1);

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)strPtr27, newList6);
Value *rslt7 = (Value *)newList6;
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt7->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt7, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt7))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt7, 1);
Value *rslt7_0;
Value *rslt7_1;
Value **rslt7_args[2] = {&rslt7_0, &rslt7_1};
destructValue("$TOCCATA_DIR/core.toc", "1592", (Value *)rslt7, 2, rslt7_args);
switch (rslt7_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt7_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt7_0, 1);
dec_and_free(rslt7_1, 1);
}

// call-list
// #line 1593 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr17, newList8);
Value *rslt9 = (Value *)newList8;
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
switch (rslt9->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt9, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt9))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1593\n$TOCCATA_DIR/core.toc: 1593\ncore: 1593                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt9, 1);
Value *rslt9_0;
Value *rslt9_1;
Value **rslt9_args[2] = {&rslt9_0, &rslt9_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt9, 2, rslt9_args);
switch (rslt9_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt9_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1593\n$TOCCATA_DIR/core.toc:: 1593\n");
#endif
abort();
}
dec_and_free(rslt9_0, 1);
dec_and_free(rslt9_1, 1);
}

// static-fixed
// #line 1593 "/home/jim/toccata/core.toc"
Value *rslt10 = interpose_863(empty_list, kv_strs_5, rslt9);
Value *rslt11 = proto1Arg(&flatten_Implementations_265, "<nothing>/flatten", rslt10, "core", 1593);

// call-list
// #line 1594 "/home/jim/toccata/core.toc"
List *newList12 = empty_list;
newList12 = listCons((Value *)strPtr28, newList12);
Value *rslt13 = (Value *)newList12;

// call-list
// #line 1592 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)rslt13, newList14);
newList14 = listCons((Value *)rslt11, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1592                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1594\n");
#endif
abort();
}
switch (rslt15_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1592\n$TOCCATA_DIR/core.toc: 1592\ncore: 1594                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15_1, 1);
Value *rslt15_1_0;
Value *rslt15_1_1;
Value **rslt15_1_args[2] = {&rslt15_1_0, &rslt15_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1593", (Value *)rslt15_1, 2, rslt15_1_args);
switch (rslt15_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1593\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt15_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1592\n$TOCCATA_DIR/core.toc:: 1592\n");
#endif
abort();
}
dec_and_free(rslt15_1_0, 1);
dec_and_free(rslt15_1_1, 1);
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}

// type-known for comp*
// #line 1592 "/home/jim/toccata/core.toc"
Value *rslt16 = List_comp_STAR__566(empty_list, rslt7, rslt15);
switch (rslt16->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1592\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt16);

};};
FnArity BitmapIndexNode_string_list_1961 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_string_list_1943};
Value *anon_1965(List *closures, Value *kv_0) {

while (1) {
incRef(kv_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);
incRef(val1, 3);
switch (val1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1602\n$TOCCATA_DIR/core.toc:: 1561\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1602 "/home/jim/toccata/core.toc"
Value *rslt2 = show_kv_1747(empty_list, kv_0, val1);

// call-list
// #line 1601 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)rslt2, newList3);
newList3 = listCons((Value *)strPtr4, newList3);
newList3 = listCons((Value *)val1, newList3);
newList3 = listCons((Value *)strPtr19, newList3);
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1601 "/home/jim/toccata/core.toc"
Value *rslt5 = list_STAR__617(empty_list, (Value *)rslt4);
return(rslt5);

};};
Value *BitmapIndexNode_show_STAR__1944(List *closures, Value *m_0, Value *indent_1) {
while (1) {
incRef(m_0, 3);
incRef(indent_1, 2);
Value *rslt2 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", m_0, "core", 1597);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1597\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_3, string_list_795);
if (!isNothing(rslt4,"",0)) {
Value *rslt20 = maybeExtract(rslt4);
return(rslt20);
} else {
dec_and_free(rslt4, 1);
Value *rslt5 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1598);
Value *h_8;
Value *tail_6;
Value **destArgs7[2] = {&h_8, &tail_6};
destructValue("core", "1598", (Value *)rslt5, 2, destArgs7);
incRef(h_8, 1);
switch (h_8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, h_8)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (countSeq(incRef(h_8, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1598\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, h_8))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1560\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(h_8, 1);
Value *h_8_0;
Value *h_8_1;
Value *h_8_2;
Value **h_8_args[3] = {&h_8_0, &h_8_1, &h_8_2};
destructValue("$TOCCATA_DIR/core.toc", "1598", (Value *)h_8, 3, h_8_args);
dec_and_free(h_8_0, 1);
dec_and_free(h_8_1, 1);
dec_and_free(h_8_2, 1);
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt9 = show_kv_1747(empty_list, h_8, indent_1);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt10 = cons_282(empty_list, strPtr27, rslt9);
Value *l_11 = tail_6;
incRef(l_11, 1);
switch (l_11->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_11)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_12 = malloc_fnArity();
anon_12->count = 1;
anon_12->variadic = 0;
anon_12->fn = anon_1965;
anon_12->closures = empty_list;
anon_12->closures = listCons((Value *)indent_1, (List *)anon_12->closures);
Function *anon_1968 = malloc_function(1);
anon_1968->name = "anon";
anon_1968->arityCount = 1;
anon_1968->arities[0] = anon_12;
Value *fn1964 = (Value *)anon_1968;

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt13 = list_map_93(empty_list, l_11, fn1964);
switch (rslt13->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt14 = list_concat_99(empty_list, rslt13);

// call-list
// #line 1603 "/home/jim/toccata/core.toc"
List *newList15 = empty_list;
newList15 = listCons((Value *)strPtr28, newList15);
Value *rslt16 = (Value *)newList15;

// call-list
// #line 1599 "/home/jim/toccata/core.toc"
List *newList17 = empty_list;
newList17 = listCons((Value *)rslt16, newList17);
newList17 = listCons((Value *)rslt14, newList17);
Value *rslt18 = (Value *)newList17;
switch (rslt18->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
switch (rslt18->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1599                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18, 1);
Value *rslt18_0;
Value *rslt18_1;
Value *rslt18_2;
Value **rslt18_args[3] = {&rslt18_0, &rslt18_1, &rslt18_2};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18, 3, rslt18_args);
switch (rslt18_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1603\n");
#endif
abort();
}
switch (rslt18_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt18_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt18_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt18_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1599\n$TOCCATA_DIR/core.toc: 1599\ncore: 1603                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt18_1, 1);
Value *rslt18_1_0;
Value *rslt18_1_1;
Value **rslt18_1_args[2] = {&rslt18_1_0, &rslt18_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1600", (Value *)rslt18_1, 2, rslt18_1_args);
switch (rslt18_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1600\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt18_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1599\n$TOCCATA_DIR/core.toc:: 1599\n");
#endif
abort();
}
dec_and_free(rslt18_1_0, 1);
dec_and_free(rslt18_1_1, 1);
}
dec_and_free(rslt18_0, 1);
dec_and_free(rslt18_1, 1);
dec_and_free(rslt18_2, 1);
}

// type-known for comp*
// #line 1599 "/home/jim/toccata/core.toc"
Value *rslt19 = List_comp_STAR__566(empty_list, rslt10, rslt18);
switch (rslt19->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1599\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt19);
}

};};
Value *BitmapIndexNode_show_STAR__1970(List *closures, Value *m_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1596\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(BitmapIndexNode_show_STAR__1944(closures, m_0, indent_1));
};
FnArity BitmapIndexNode_show_STAR__1969 = {FnArityType, -1, 2, (List *)0, 0, BitmapIndexNode_show_STAR__1970};
Value *anon_1972(List *closures, Value *arg0) {

while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1616", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
Value *val5;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs17[2] = {&val5, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs17);
incRef(val5, 1);

dec_and_free(closuresTail, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", val5, k_3, "core", 1617);
Value *mv_7 = rslt6;
incRef(mv_7, 2);
Value *andRslt8;
andRslt8 = mv_7;
if (isNothing(andRslt8,"",0)) {
dec_and_free(mv_7, 2);
dec_and_free(partial_719, 1);
dec_and_free(v_4, 2);
dec_and_free(_EQ__701, 1);
} else {
dec_and_free(andRslt8, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt9 = Maybe_extract_510(empty_list, mv_7);

// call-list
// #line 1618 "/home/jim/toccata/core.toc"
List *newList10 = empty_list;
newList10 = listCons((Value *)v_4, newList10);
newList10 = listCons((Value *)_EQ__701, newList10);
Value *rslt11 = (Value *)newList10;

// static-variadic
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt12 = partial_720(empty_list, (Value *)rslt11);

// dynamic unknown type
// #line 1618 "/home/jim/toccata/core.toc"
Value *rslt16;
if((rslt12)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(rslt12->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1618\n",
extractStr(type_name(empty_list, rslt12)), rslt12->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt16 = _fn(_arity->closures, rslt12, rslt9);
} else {
FnArity *arity13 = findFnArity(rslt12, 1);
if(arity13 != (FnArity *)0 && !arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
rslt16 = fn15(arity13->closures, rslt9);
} else if(arity13 != (FnArity *)0 && arity13->variadic) {
FnType1 *fn15 = (FnType1 *)arity13->fn;
List *dynArgs14 = empty_list;
dynArgs14 = (List *)listCons(rslt9, dynArgs14);
rslt16 = fn15(arity13->closures, (Value *)dynArgs14);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)rslt12)->name);
  abort();
}
dec_and_free(rslt12, 1);
}
if (rslt16->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1618);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt16)));
abort();
}
andRslt8 = rslt16;
}
return(andRslt8);

};};
Value *BitmapIndexNode__EQ__STAR__1945(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 4);
Value *andRslt2;

// type-known for instance?
// #line 1614 "/home/jim/toccata/core.toc"
Value *rslt3 = arityImpl1752(empty_list, reifiedPtr1756, y_1);
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 3);
dec_and_free(x_0, 6);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt4 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1615);
Value *rslt5 = proto1Arg(&count_Implementations_310, "<nothing>/count", y_1, "core", 1615);

// static-fixed
// #line 1615 "/home/jim/toccata/core.toc"
Value *rslt6 = _EQ__703(empty_list, rslt4, rslt5);
if (rslt6->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1615);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
abort();
}
andRslt2 = rslt6;
if (isNothing(andRslt2,"",0)) {
dec_and_free(every_1629, 1);
dec_and_free(y_1, 1);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", x_0, "core", 1616);
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_1972;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)y_1, (List *)anon_8->closures);
Function *anon_1975 = malloc_function(1);
anon_1975->name = "anon";
anon_1975->arityCount = 1;
anon_1975->arities[0] = anon_8;
Value *fn1971 = (Value *)anon_1975;

// static-fixed
// #line 1616 "/home/jim/toccata/core.toc"
Value *rslt9 = every_1630(empty_list, rslt7, fn1971);
andRslt2 = rslt9;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 1619 "/home/jim/toccata/core.toc"
Value *rslt10 = maybe_4(empty_list, x_0);
switch (rslt10->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1619\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt10);
}
}
}

};};
FnArity BitmapIndexNode__EQ__STAR__1976 = {FnArityType, -1, 2, (List *)0, 0, BitmapIndexNode__EQ__STAR__1945};
Value *BitmapIndexNode_seq_1946(List *closures, Value *n_0) {
while (1) {
incRef(n_0, 1);
Value *rslt1 = proto2Arg(&hash_seq_Implementations_21, "<nothing>/hash-seq", n_0, empty_list_0, "core", 1610);
switch (rslt1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1610\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt1)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 415\n");
#endif
abort();
}
return(rslt1);

};};
FnArity BitmapIndexNode_seq_1978 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_seq_1946};
Value *BitmapIndexNode_type_name_1947(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr29);

};};
FnArity BitmapIndexNode_type_name_1980 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_type_name_1947};

// --------- anon -------------
Value *fn1983;
Value *anon_1984(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1623", (Value *)arg0, 3, destArgs2);
incRef(k_3, 1);

dec_and_free(v_4, 1);

dec_and_free(tail_1, 1);
return(k_3);

};};
Value *anon_1986(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1623\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1623", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1984(closures, arg0));
};
FnArity anon_1985 = {FnArityType, -1, 1, (List *)0, 0, anon_1986};
Function anon_1987 = {FunctionType, -1, "anon", 1, {&anon_1985}};
Value *fn1983 = (Value *)&anon_1987;

Value *BitmapIndexNode_keys_1948(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1623);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1983);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1623\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 519\n");
#endif
abort();
}
return(rslt3);

};};
FnArity BitmapIndexNode_keys_1988 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_keys_1948};

// --------- anon -------------
Value *fn1991;
Value *anon_1992(List *closures, Value *arg0) {
while (1) {
Value *k_3;
Value *v_4;
Value *tail_1;
Value **destArgs2[3] = {&k_3, &v_4, &tail_1};
destructValue("core", "1625", (Value *)arg0, 3, destArgs2);

dec_and_free(k_3, 1);
incRef(v_4, 1);

dec_and_free(tail_1, 1);
return(v_4);

};};
Value *anon_1994(List *closures, Value *arg0) {
switch (arg0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (countSeq(incRef(arg0, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1625\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg0, 1);
Value *arg0_0;
Value *arg0_1;
Value *arg0_2;
Value **arg0_args[3] = {&arg0_0, &arg0_1, &arg0_2};
destructValue("$TOCCATA_DIR/core.toc", "1625", (Value *)arg0, 3, arg0_args);
dec_and_free(arg0_0, 1);
dec_and_free(arg0_1, 1);
dec_and_free(arg0_2, 1);
}
return(anon_1992(closures, arg0));
};
FnArity anon_1993 = {FnArityType, -1, 1, (List *)0, 0, anon_1994};
Function anon_1995 = {FunctionType, -1, "anon", 1, {&anon_1993}};
Value *fn1991 = (Value *)&anon_1995;

Value *BitmapIndexNode_vals_1949(List *closures, Value *m_0) {
while (1) {
incRef(m_0, 1);
Value *rslt1 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1625);
Value *l_2 = rslt1;
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_2, 1);
switch (l_2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt3 = list_map_93(empty_list, l_2, fn1991);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1625\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 523\n");
#endif
abort();
}
return(rslt3);

};};
FnArity BitmapIndexNode_vals_1996 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_vals_1949};
Value *BitmapIndexNode_get_1950(List *closures, Value *m_0, Value *k_1) {
while (1) {

// inline
// #line 1627 "/home/jim/toccata/core.toc"
return(hashMapGet(m_0, k_1));
#

};};
FnArity BitmapIndexNode_get_1998 = {FnArityType, -1, 2, (List *)0, 0, BitmapIndexNode_get_1950};
Value *BitmapIndexNode_get_1951(List *closures, Value *m_0, Value *k_1, Value *not_found_2) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 1);
incRef(not_found_2, 1);
Value *rslt3 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_1, "core", 1629);
if (!isNothing(rslt3,"",0)) {
Value *rslt4 = maybeExtract(rslt3);
return(rslt4);
} else {
dec_and_free(rslt3, 1);
return(not_found_2);
}

};};
FnArity BitmapIndexNode_get_2000 = {FnArityType, -1, 3, (List *)0, 0, BitmapIndexNode_get_1951};
Value *BitmapIndexNode_zero_1952(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(emptyBMI_151);

};};
FnArity BitmapIndexNode_zero_2002 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_zero_1952};

// --------- anon -------------
Value *fn2004;

// --------- anon -------------
Value *fn2006;
Value *anon_2007(List *closures, Value *acc_0, Value *pair_1) {
while (1) {
incRef(acc_0, 1);
incRef(pair_1, 1);
Value *f_2 = assoc_398;
incRef(f_2, 1);
switch (f_2->type) {
case 4: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Function, got %s\n", extractStr(type_name(empty_list, f_2)));
fprintf(stderr, "'Function' From:           \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 126\n");
#endif
abort();
}

// call-list
// #line 1580 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)pair_1, newList3);
newList3 = listCons((Value *)acc_0, newList3);
Value *rslt4 = (Value *)newList3;
Value *args_5 = rslt4;
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 1580\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}
incRef(args_5, 1);
switch (args_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, args_5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt6 = fn_apply_117(empty_list, list_STAR__616, args_5);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'args' at $TOCCATA_DIR/core.toc, line 910\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 910\n$TOCCATA_DIR/core.toc:: 127\n");
#endif
abort();
}

// static-fixed
// #line 910 "/home/jim/toccata/core.toc"
Value *rslt7 = fn_apply_117(empty_list, f_2, rslt6);
return(rslt7);

};};
FnArity anon_2008 = {FnArityType, -1, 2, (List *)0, 0, anon_2007};
Function anon_2010 = {FunctionType, -1, "anon", 1, {&anon_2008}};
Value *fn2006 = (Value *)&anon_2010;

Value *anon_2005(List *closures, Value *acc_0, Value *mval_1) {
while (1) {
incRef(acc_0, 1);
incRef(mval_1, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", mval_1, "core", 1578);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1578\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1578\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1578 "/home/jim/toccata/core.toc"
Value *rslt3 = List_reduce_635(empty_list, rslt2, acc_0, fn2006);
return(rslt3);

};};
FnArity anon_2011 = {FnArityType, -1, 2, (List *)0, 0, anon_2005};
Function anon_2013 = {FunctionType, -1, "anon", 1, {&anon_2011}};
Value *fn2004 = (Value *)&anon_2013;

Value *BitmapIndexNode_comp_STAR__1953(List *closures, Value *mval_0, Value *mvals_1) {
while (1) {
incRef(mval_0, 1);
incRef(mvals_1, 1);
Value *rslt2 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", mvals_1, mval_0, fn2004, "core", 1576);
return(rslt2);

};};
FnArity BitmapIndexNode_comp_STAR__2014 = {FnArityType, -1, 2, (List *)0, 0, BitmapIndexNode_comp_STAR__1953};
Value *BitmapIndexNode_empty_QM__1954(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *andRslt1;
Value *rslt2 = proto1Arg(&count_Implementations_310, "<nothing>/count", x_0, "core", 1584);

// static-fixed
// #line 1584 "/home/jim/toccata/core.toc"
Value *rslt3 = _EQ__703(empty_list, numPtr0, rslt2);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1584);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt1 = rslt3;
if (isNothing(andRslt1,"",0)) {
dec_and_free(emptyBMI_151, 1);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt1, 1);

// static-fixed
// #line 1585 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, emptyBMI_151);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1585\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt4);
}

};};
FnArity BitmapIndexNode_empty_QM__2016 = {FnArityType, -1, 1, (List *)0, 0, BitmapIndexNode_empty_QM__1954};

// --------- hash-map -------------
Value *hash_map_2019;

// --------- anon -------------
Value *fn2021;
Value *anon_2022(List *closures, Value *m_0, Value *arg1) {
while (1) {
incRef(m_0, 1);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1637", (Value *)arg1, 3, destArgs3);
incRef(k_4, 3);
incRef(v_5, 1);

dec_and_free(tail_2, 1);
Value *rslt6 = proto1Arg(&sha1_Implementations_395, "<nothing>/sha1", k_4, "core", 1638);
Value *rslt7 = proto5Arg(&assoc_STAR__Implementations_14, "<nothing>/assoc*", m_0, k_4, v_5, rslt6, numPtr0, "core", 1638);
return(rslt7);

};};
Value *anon_2024(List *closures, Value *m_0, Value *arg1) {
switch (arg1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1637\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, arg1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1637\n");
#endif
abort();
}
if (countSeq(incRef(arg1, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1637\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, arg1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1637\n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(arg1, 1);
Value *arg1_0;
Value *arg1_1;
Value *arg1_2;
Value **arg1_args[3] = {&arg1_0, &arg1_1, &arg1_2};
destructValue("$TOCCATA_DIR/core.toc", "1637", (Value *)arg1, 3, arg1_args);
dec_and_free(arg1_0, 1);
dec_and_free(arg1_1, 1);
dec_and_free(arg1_2, 1);
}
return(anon_2022(closures, m_0, arg1));
};
FnArity anon_2023 = {FnArityType, -1, 2, (List *)0, 0, anon_2024};
Function anon_2025 = {FunctionType, -1, "anon", 1, {&anon_2023}};
Value *fn2021 = (Value *)&anon_2025;

Value *hash_map_2020(List *closures, Value *arg0) {
while (1) {
Value *kv_pairs_1 = seq(empty_list, arg0);
incRef(kv_pairs_1, 1);
switch (kv_pairs_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, kv_pairs_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1635\n$TOCCATA_DIR/core.toc:: 1468\n$TOCCATA_DIR/core.toc:: 1458\n");
#endif
abort();
}

// static-fixed
// #line 1635 "/home/jim/toccata/core.toc"
Value *rslt2 = partition_1618(empty_list, kv_pairs_1, numPtr1);
Value *rslt3 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt2, emptyBMI_151, fn2021, "core", 1635);
switch (rslt3->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1635\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
return(rslt3);

};};
Value *hash_map_2027(List *closures, Value *args) {
Value *arg0;
Value **destArgs4[1] = {&arg0};
destructValue("core", "1632", (Value *)args, 1, destArgs4);
return(hash_map_2020(closures, args));
};
FnArity hash_map_2026 = {FnArityType, -1, 1, (List *)0, 1, hash_map_2027};
Function hash_map_2028 = {FunctionType, -1, "hash-map", 1, {&hash_map_2026}};
Value *hash_map_2019 = (Value *)&hash_map_2028;


// --------- filter-keys -------------
Value *filter_keys_2030;
Value *anon_2035(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val3;
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[4] = {&val3, &val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 4, destArgs5);
incRef(val3, 1);
incRef(val2, 1);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
Value *rslt4 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", val1, val2, val3, "core", 1646);
return(rslt4);

};};
Value *anon_2033(List *closures, Value *m_0, Value *arg1) {

while (1) {
incRef(m_0, 2);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1645", (Value *)arg1, 3, destArgs3);
incRef(k_4, 2);

dec_and_free(tail_2, 1);
Value *val6;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs14[2] = {&val6, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs14);
incRef(val6, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1646 "/home/jim/toccata/core.toc"
Value *rslt10;
if((val6)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val6->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1646\n",
extractStr(type_name(empty_list, val6)), val6->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt10 = _fn(_arity->closures, val6, k_4);
} else {
FnArity *arity7 = findFnArity(val6, 1);
if(arity7 != (FnArity *)0 && !arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
rslt10 = fn9(arity7->closures, k_4);
} else if(arity7 != (FnArity *)0 && arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
List *dynArgs8 = empty_list;
dynArgs8 = (List *)listCons(k_4, dynArgs8);
rslt10 = fn9(arity7->closures, (Value *)dynArgs8);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val6)->name);
  abort();
}
dec_and_free(val6, 1);
}
FnArity *anon_11 = malloc_fnArity();
anon_11->count = 1;
anon_11->variadic = 0;
anon_11->fn = anon_2035;
anon_11->closures = empty_list;
anon_11->closures = listCons((Value *)m_0, (List *)anon_11->closures);
anon_11->closures = listCons((Value *)k_4, (List *)anon_11->closures);
anon_11->closures = listCons((Value *)v_5, (List *)anon_11->closures);
Function *anon_2038 = malloc_function(1);
anon_2038->name = "anon";
anon_2038->arityCount = 1;
anon_2038->arities[0] = anon_11;
Value *fn2034 = (Value *)anon_2038;
Value *rslt12 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt10, fn2034, "core", 1646);
if (!isNothing(rslt12,"",0)) {
Value *rslt13 = maybeExtract(rslt12);
return(rslt13);
} else {
dec_and_free(rslt12, 1);
return(m_0);
}

};};
Value *filter_keys_2031(List *closures, Value *m_0, Value *f_1) {
while (1) {
incRef(m_0, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1644);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1644\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1644\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 1644 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1644 "/home/jim/toccata/core.toc"
Value *rslt5 = hash_map_2020(empty_list, (Value *)rslt4);
switch (rslt5->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1644\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1644\n$TOCCATA_DIR/core.toc:: 1644\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 2;
anon_6->variadic = 0;
anon_6->fn = anon_2033;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)f_1, (List *)anon_6->closures);
Function *anon_2041 = malloc_function(1);
anon_2041->name = "anon";
anon_2041->arityCount = 1;
anon_2041->arities[0] = anon_6;
Value *fn2032 = (Value *)anon_2041;

// type-known for reduce
// #line 1644 "/home/jim/toccata/core.toc"
Value *rslt7 = List_reduce_635(empty_list, rslt2, rslt5, fn2032);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1644\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1643\n");
#endif
abort();
}
return(rslt7);

};};
FnArity filter_keys_2042 = {FnArityType, -1, 2, (List *)0, 0, filter_keys_2031};
Function filter_keys_2044 = {FunctionType, -1, "filter-keys", 1, {&filter_keys_2042}};
Value *filter_keys_2030 = (Value *)&filter_keys_2044;


// --------- remove-keys -------------
Value *remove_keys_2046;
Value *anon_2051(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs2[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs2);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
return(val1);

};};
Value *anon_2049(List *closures, Value *m_0, Value *arg1) {

while (1) {
incRef(m_0, 2);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1654", (Value *)arg1, 3, destArgs3);
incRef(k_4, 3);
incRef(v_5, 1);

dec_and_free(tail_2, 1);
Value *val6;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs15[2] = {&val6, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs15);
incRef(val6, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1655 "/home/jim/toccata/core.toc"
Value *rslt10;
if((val6)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val6->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1655\n",
extractStr(type_name(empty_list, val6)), val6->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt10 = _fn(_arity->closures, val6, k_4);
} else {
FnArity *arity7 = findFnArity(val6, 1);
if(arity7 != (FnArity *)0 && !arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
rslt10 = fn9(arity7->closures, k_4);
} else if(arity7 != (FnArity *)0 && arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
List *dynArgs8 = empty_list;
dynArgs8 = (List *)listCons(k_4, dynArgs8);
rslt10 = fn9(arity7->closures, (Value *)dynArgs8);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val6)->name);
  abort();
}
dec_and_free(val6, 1);
}
FnArity *anon_11 = malloc_fnArity();
anon_11->count = 1;
anon_11->variadic = 0;
anon_11->fn = anon_2051;
anon_11->closures = empty_list;
anon_11->closures = listCons((Value *)m_0, (List *)anon_11->closures);
Function *anon_2054 = malloc_function(1);
anon_2054->name = "anon";
anon_2054->arityCount = 1;
anon_2054->arities[0] = anon_11;
Value *fn2050 = (Value *)anon_2054;
Value *rslt12 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt10, fn2050, "core", 1655);
if (!isNothing(rslt12,"",0)) {
Value *rslt14 = maybeExtract(rslt12);
return(rslt14);
} else {
dec_and_free(rslt12, 1);
Value *rslt13 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, k_4, v_5, "core", 1656);
return(rslt13);
}

};};
Value *remove_keys_2047(List *closures, Value *m_0, Value *f_1) {
while (1) {
incRef(m_0, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1653);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1653\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1653\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 1653 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1653 "/home/jim/toccata/core.toc"
Value *rslt5 = hash_map_2020(empty_list, (Value *)rslt4);
switch (rslt5->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1653\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1653\n$TOCCATA_DIR/core.toc:: 1653\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 2;
anon_6->variadic = 0;
anon_6->fn = anon_2049;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)f_1, (List *)anon_6->closures);
Function *anon_2057 = malloc_function(1);
anon_2057->name = "anon";
anon_2057->arityCount = 1;
anon_2057->arities[0] = anon_6;
Value *fn2048 = (Value *)anon_2057;

// type-known for reduce
// #line 1653 "/home/jim/toccata/core.toc"
Value *rslt7 = List_reduce_635(empty_list, rslt2, rslt5, fn2048);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1653\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1652\n");
#endif
abort();
}
return(rslt7);

};};
FnArity remove_keys_2058 = {FnArityType, -1, 2, (List *)0, 0, remove_keys_2047};
Function remove_keys_2060 = {FunctionType, -1, "remove-keys", 1, {&remove_keys_2058}};
Value *remove_keys_2046 = (Value *)&remove_keys_2060;


// --------- map-vals -------------
Value *map_vals_2062;
Value *anon_2065(List *closures, Value *m_0, Value *arg1) {

while (1) {
incRef(m_0, 1);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1662", (Value *)arg1, 3, destArgs3);
incRef(k_4, 1);
incRef(v_5, 1);

dec_and_free(tail_2, 1);
Value *val6;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs12[2] = {&val6, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs12);
incRef(val6, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1663 "/home/jim/toccata/core.toc"
Value *rslt10;
if((val6)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val6->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1663\n",
extractStr(type_name(empty_list, val6)), val6->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt10 = _fn(_arity->closures, val6, v_5);
} else {
FnArity *arity7 = findFnArity(val6, 1);
if(arity7 != (FnArity *)0 && !arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
rslt10 = fn9(arity7->closures, v_5);
} else if(arity7 != (FnArity *)0 && arity7->variadic) {
FnType1 *fn9 = (FnType1 *)arity7->fn;
List *dynArgs8 = empty_list;
dynArgs8 = (List *)listCons(v_5, dynArgs8);
rslt10 = fn9(arity7->closures, (Value *)dynArgs8);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val6)->name);
  abort();
}
dec_and_free(val6, 1);
}
Value *rslt11 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, k_4, rslt10, "core", 1663);
return(rslt11);

};};
Value *map_vals_2063(List *closures, Value *m_0, Value *f_1) {
while (1) {
incRef(m_0, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_0, "core", 1661);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1661\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1661\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 1661 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 1661 "/home/jim/toccata/core.toc"
Value *rslt5 = hash_map_2020(empty_list, (Value *)rslt4);
switch (rslt5->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1661\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1661\n$TOCCATA_DIR/core.toc:: 1661\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 2;
anon_6->variadic = 0;
anon_6->fn = anon_2065;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)f_1, (List *)anon_6->closures);
Function *anon_2068 = malloc_function(1);
anon_2068->name = "anon";
anon_2068->arityCount = 1;
anon_2068->arities[0] = anon_6;
Value *fn2064 = (Value *)anon_2068;

// type-known for reduce
// #line 1661 "/home/jim/toccata/core.toc"
Value *rslt7 = List_reduce_635(empty_list, rslt2, rslt5, fn2064);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1661\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1660\n");
#endif
abort();
}
return(rslt7);

};};
FnArity map_vals_2069 = {FnArityType, -1, 2, (List *)0, 0, map_vals_2063};
Function map_vals_2071 = {FunctionType, -1, "map-vals", 1, {&map_vals_2069}};
Value *map_vals_2062 = (Value *)&map_vals_2071;


// --------- get-in* -------------
Value *get_in_STAR__2073;
Value *anon_2078(List *closures, Value *v_0) {

while (1) {
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs5);

dec_and_free(closuresTail, 1);
Value *__2 = val1;

dec_and_free(__2, 1);
Value *mv_3 = v_0;
incRef(mv_3, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_4(empty_list, mv_3);
return(rslt4);

};};
Value *get_in_STAR__2074(List *closures, Value *m_0, Value *path_1) {
while (1) {
incRef(m_0, 3);
incRef(path_1, 5);
Value *orRslt2;
Value *andRslt3;
Value *rslt4 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", path_1, "core", 1667);
andRslt3 = rslt4;
if (isNothing(andRslt3,"",0)) {
dec_and_free(m_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt3, 1);

// static-fixed
// #line 1668 "/home/jim/toccata/core.toc"
Value *rslt5 = maybe_4(empty_list, m_0);
andRslt3 = rslt5;
}
orRslt2 = andRslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(get_in_STAR__2073, 1);
dec_and_free(m_0, 2);
dec_and_free(path_1, 4);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *rslt6 = proto1Arg(&first_Implementations_336, "<nothing>/first", path_1, "core", 1669);
Value *wrapper_7 = rslt6;
incRef(wrapper_7, 1);
Value *mv_8 = wrapper_7;
incRef(mv_8, 2);
Value *andRslt9;
andRslt9 = mv_8;
if (isNothing(andRslt9,"",0)) {
dec_and_free(mv_8, 2);
dec_and_free(get_in_STAR__2073, 1);
dec_and_free(m_0, 2);
dec_and_free(path_1, 2);
dec_and_free(wrapper_7, 1);
} else {
dec_and_free(andRslt9, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt10 = Maybe_extract_510(empty_list, mv_8);
Value *k_11 = rslt10;
incRef(k_11, 1);
Value *rslt12 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_11, "core", 1670);
Value *mv_13 = rslt12;
incRef(mv_13, 2);
Value *andRslt14;
andRslt14 = mv_13;
if (isNothing(andRslt14,"",0)) {
dec_and_free(get_in_STAR__2073, 1);
dec_and_free(mv_13, 2);
dec_and_free(path_1, 2);
dec_and_free(wrapper_7, 1);
} else {
dec_and_free(andRslt14, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt15 = Maybe_extract_510(empty_list, mv_13);
Value *sub_m_16 = rslt15;
incRef(sub_m_16, 1);
Value *rslt17 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", path_1, "core", 1671);
Value *rslt21;
FnArity *arity18 = findFnArity(get_in_STAR__2073, 2);
if(arity18 != (FnArity *)0 && !arity18->variadic) { FnType2 *fn20 = (FnType2 *)arity18->fn;


// dynamic fn type
// #line 1671 "/home/jim/toccata/core.toc"
rslt21 = fn20(arity18->closures, sub_m_16, rslt17);
} else if(arity18 != (FnArity *)0 && arity18->variadic) { FnType1 *fn20 = (FnType1 *)arity18->fn;
List *dynArgs19 = empty_list;
dynArgs19 = (List *)listCons(rslt17, dynArgs19);
dynArgs19 = (List *)listCons(sub_m_16, dynArgs19);

// dynamic fn type
// #line 1671 "/home/jim/toccata/core.toc"
rslt21 = fn20(arity18->closures, (Value *)dynArgs19);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)get_in_STAR__2073)->name, "core", 1671);
  abort();
}
dec_and_free(get_in_STAR__2073, 1);
FnArity *anon_22 = malloc_fnArity();
anon_22->count = 1;
anon_22->variadic = 0;
anon_22->fn = anon_2078;
anon_22->closures = empty_list;
anon_22->closures = listCons((Value *)wrapper_7, (List *)anon_22->closures);
Function *anon_2081 = malloc_function(1);
anon_2081->name = "anon";
anon_2081->arityCount = 1;
anon_2081->arities[0] = anon_22;
Value *fn2077 = (Value *)anon_2081;
Value *rslt23 = proto2Arg(&flat_map_Implementations_271, "flat-map", rslt21, fn2077, "core", 1671);
if (rslt23->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1671);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt23)));
abort();
}
andRslt14 = rslt23;
}
andRslt9 = andRslt14;
}
return(andRslt9);
}

};};
Value *get_in_STAR__2083(List *closures, Value *m_0, Value *path_1) {
switch (path_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'path' at $TOCCATA_DIR/core.toc, line 1665\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, path_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1666\n");
#endif
abort();
}
return(get_in_STAR__2074(closures, m_0, path_1));
};
FnArity get_in_STAR__2082 = {FnArityType, -1, 2, (List *)0, 0, get_in_STAR__2083};
Function get_in_STAR__2084 = {FunctionType, -1, "get-in*", 1, {&get_in_STAR__2082}};
Value *get_in_STAR__2073 = (Value *)&get_in_STAR__2084;


// --------- get-in -------------
Value *get_in_2086;
Value *get_in_2087(List *closures, Value *m_0, Value *path_1) {
while (1) {
incRef(m_0, 1);
incRef(path_1, 3);
Value *andRslt2;
Value *rslt3 = proto1Arg(&count_Implementations_310, "<nothing>/count", path_1, "core", 1675);

// static-fixed
// #line 1675 "/home/jim/toccata/core.toc"
Value *rslt4 = _LT__661(empty_list, numPtr0, rslt3);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1675);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
andRslt2 = rslt4;
if (isNothing(andRslt2,"",0)) {
dec_and_free(get_in_STAR__2073, 1);
dec_and_free(m_0, 2);
dec_and_free(path_1, 2);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt5 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", path_1, "core", 1676);
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'path' at $TOCCATA_DIR/core.toc, line 1676\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1676\n$TOCCATA_DIR/core.toc:: 1666\n");
#endif
abort();
}

// static-fixed
// #line 1676 "/home/jim/toccata/core.toc"
Value *rslt6 = get_in_STAR__2074(empty_list, m_0, rslt5);
return(rslt6);
}

};};
FnArity get_in_2088 = {FnArityType, -1, 2, (List *)0, 0, get_in_2087};
Function get_in_2090 = {FunctionType, -1, "get-in", 1, {&get_in_2088}};
Value *get_in_2086 = (Value *)&get_in_2090;


// --------- update-in -------------
Value *update_in_2092;
Value *anon_2099(List *closures, Value *new_m_0) {

while (1) {
incRef(new_m_0, 1);
Value *val4;
Value *val3;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[4] = {&val4, &val3, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 4, destArgs8);
incRef(val4, 1);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *__2 = val1;

dec_and_free(__2, 1);
Value *rslt5 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", val3, val4, new_m_0, "core", 1688);
Value *mv_6 = rslt5;
incRef(mv_6, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_4(empty_list, mv_6);
return(rslt7);

};};
Value *update_in_2093(List *closures, Value *m_0, Value *path_1, Value *f_2) {
while (1) {
incRef(m_0, 8);
incRef(path_1, 9);
incRef(f_2, 3);
Value *orRslt3;
Value *andRslt4;
Value *rslt5 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", path_1, "core", 1679);
andRslt4 = rslt5;
if (isNothing(andRslt4,"",0)) {
dec_and_free(m_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt4, 1);

// static-fixed
// #line 1680 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_4(empty_list, m_0);
andRslt4 = rslt6;
}
orRslt3 = andRslt4;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(f_2, 4);
dec_and_free(update_in_2092, 1);
dec_and_free(m_0, 7);
dec_and_free(path_1, 8);
dec_and_free(numPtr3, 1);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *andRslt7;
Value *rslt8 = proto1Arg(&count_Implementations_310, "<nothing>/count", path_1, "core", 1681);

// static-fixed
// #line 1681 "/home/jim/toccata/core.toc"
Value *rslt9 = _EQ__703(empty_list, numPtr3, rslt8);
if (rslt9->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1681);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt9)));
abort();
}
andRslt7 = rslt9;
if (isNothing(andRslt7,"",0)) {
dec_and_free(f_2, 2);
dec_and_free(m_0, 4);
dec_and_free(path_1, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt7, 1);
Value *rslt10 = proto1Arg(&first_Implementations_336, "<nothing>/first", path_1, "core", 1682);
Value *wrapper_11 = rslt10;
incRef(wrapper_11, 1);
Value *mv_12 = wrapper_11;
incRef(mv_12, 2);
Value *andRslt13;
andRslt13 = mv_12;
if (isNothing(andRslt13,"",0)) {
dec_and_free(mv_12, 2);
dec_and_free(f_2, 2);
dec_and_free(wrapper_11, 1);
dec_and_free(m_0, 4);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt13, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt14 = Maybe_extract_510(empty_list, mv_12);
Value *k_15 = rslt14;
incRef(k_15, 3);
Value *rslt16 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_15, "core", 1683);
Value *mv_17 = rslt16;
incRef(mv_17, 2);
Value *andRslt18;
andRslt18 = mv_17;
if (isNothing(andRslt18,"",0)) {
dec_and_free(f_2, 2);
dec_and_free(k_15, 2);
dec_and_free(wrapper_11, 1);
dec_and_free(m_0, 2);
dec_and_free(mv_17, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt18, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt19 = Maybe_extract_510(empty_list, mv_17);
Value *v_20 = rslt19;
incRef(v_20, 1);
Value *__21 = wrapper_11;

dec_and_free(__21, 1);

// dynamic unknown type
// #line 1684 "/home/jim/toccata/core.toc"
Value *rslt25;
if((f_2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1684\n",
extractStr(type_name(empty_list, f_2)), f_2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt25 = _fn(_arity->closures, f_2, v_20);
} else {
FnArity *arity22 = findFnArity(f_2, 1);
if(arity22 != (FnArity *)0 && !arity22->variadic) {
FnType1 *fn24 = (FnType1 *)arity22->fn;
rslt25 = fn24(arity22->closures, v_20);
} else if(arity22 != (FnArity *)0 && arity22->variadic) {
FnType1 *fn24 = (FnType1 *)arity22->fn;
List *dynArgs23 = empty_list;
dynArgs23 = (List *)listCons(v_20, dynArgs23);
rslt25 = fn24(arity22->closures, (Value *)dynArgs23);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_2)->name);
  abort();
}
dec_and_free(f_2, 1);
}
Value *rslt26 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, k_15, rslt25, "core", 1684);
Value *mv_27 = rslt26;
incRef(mv_27, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt28 = maybe_4(empty_list, mv_27);
andRslt18 = rslt28;
}
andRslt13 = andRslt18;
}
andRslt7 = andRslt13;
}
orRslt3 = andRslt7;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(f_2, 2);
dec_and_free(update_in_2092, 1);
dec_and_free(m_0, 3);
dec_and_free(path_1, 4);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt29 = proto1Arg(&first_Implementations_336, "<nothing>/first", path_1, "core", 1685);
Value *wrapper_30 = rslt29;
incRef(wrapper_30, 1);
Value *mv_31 = wrapper_30;
incRef(mv_31, 2);
Value *andRslt32;
andRslt32 = mv_31;
if (isNothing(andRslt32,"",0)) {
dec_and_free(f_2, 2);
dec_and_free(mv_31, 2);
dec_and_free(update_in_2092, 1);
dec_and_free(m_0, 3);
dec_and_free(wrapper_30, 1);
dec_and_free(path_1, 2);
} else {
dec_and_free(andRslt32, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt33 = Maybe_extract_510(empty_list, mv_31);
Value *k_34 = rslt33;
incRef(k_34, 2);
Value *rslt35 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_34, "core", 1686);
Value *mv_36 = rslt35;
incRef(mv_36, 2);
Value *andRslt37;
andRslt37 = mv_36;
if (isNothing(andRslt37,"",0)) {
dec_and_free(f_2, 2);
dec_and_free(update_in_2092, 1);
dec_and_free(m_0, 1);
dec_and_free(mv_36, 2);
dec_and_free(wrapper_30, 1);
dec_and_free(path_1, 2);
dec_and_free(k_34, 1);
} else {
dec_and_free(andRslt37, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt38 = Maybe_extract_510(empty_list, mv_36);
Value *sub_m_39 = rslt38;
incRef(sub_m_39, 1);
Value *rslt40 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", path_1, "core", 1687);
Value *rslt44;
FnArity *arity41 = findFnArity(update_in_2092, 3);
if(arity41 != (FnArity *)0 && !arity41->variadic) { FnType3 *fn43 = (FnType3 *)arity41->fn;


// dynamic fn type
// #line 1687 "/home/jim/toccata/core.toc"
rslt44 = fn43(arity41->closures, sub_m_39, rslt40, f_2);
} else if(arity41 != (FnArity *)0 && arity41->variadic) { FnType1 *fn43 = (FnType1 *)arity41->fn;
List *dynArgs42 = empty_list;
dynArgs42 = (List *)listCons(f_2, dynArgs42);
dynArgs42 = (List *)listCons(rslt40, dynArgs42);
dynArgs42 = (List *)listCons(sub_m_39, dynArgs42);

// dynamic fn type
// #line 1687 "/home/jim/toccata/core.toc"
rslt44 = fn43(arity41->closures, (Value *)dynArgs42);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)update_in_2092)->name, "core", 1687);
  abort();
}
dec_and_free(update_in_2092, 1);
FnArity *anon_45 = malloc_fnArity();
anon_45->count = 1;
anon_45->variadic = 0;
anon_45->fn = anon_2099;
anon_45->closures = empty_list;
anon_45->closures = listCons((Value *)wrapper_30, (List *)anon_45->closures);
anon_45->closures = listCons((Value *)m_0, (List *)anon_45->closures);
anon_45->closures = listCons((Value *)k_34, (List *)anon_45->closures);
Function *anon_2102 = malloc_function(1);
anon_2102->name = "anon";
anon_2102->arityCount = 1;
anon_2102->arities[0] = anon_45;
Value *fn2098 = (Value *)anon_2102;
Value *rslt46 = proto2Arg(&flat_map_Implementations_271, "flat-map", rslt44, fn2098, "core", 1687);
if (rslt46->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1687);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt46)));
abort();
}
andRslt37 = rslt46;
}
andRslt32 = andRslt37;
}
return(andRslt32);
}
}

};};
FnArity update_in_2103 = {FnArityType, -1, 3, (List *)0, 0, update_in_2093};
Function update_in_2105 = {FunctionType, -1, "update-in", 1, {&update_in_2103}};
Value *update_in_2092 = (Value *)&update_in_2105;


// --------- update -------------
Value *update_2107;
Value *update_2108(List *closures, Value *m_0, Value *key_1, Value *f_2) {
while (1) {
incRef(m_0, 3);
incRef(key_1, 3);
incRef(f_2, 1);
Value *rslt3 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, key_1, "core", 1691);
Value *wrapper_4 = rslt3;
incRef(wrapper_4, 1);
Value *mv_5 = wrapper_4;
incRef(mv_5, 2);
Value *andRslt6;
andRslt6 = mv_5;
if (isNothing(andRslt6,"",0)) {
dec_and_free(key_1, 2);
dec_and_free(f_2, 2);
dec_and_free(mv_5, 2);
dec_and_free(wrapper_4, 1);
dec_and_free(m_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt6, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt7 = Maybe_extract_510(empty_list, mv_5);
Value *v_8 = rslt7;
incRef(v_8, 1);
Value *__9 = wrapper_4;

dec_and_free(__9, 1);

// dynamic unknown type
// #line 1692 "/home/jim/toccata/core.toc"
Value *rslt13;
if((f_2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(f_2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1692\n",
extractStr(type_name(empty_list, f_2)), f_2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, f_2, v_8);
} else {
FnArity *arity10 = findFnArity(f_2, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, v_8);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(v_8, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)f_2)->name);
  abort();
}
dec_and_free(f_2, 1);
}
Value *rslt14 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, key_1, rslt13, "core", 1692);
Value *mv_15 = rslt14;
incRef(mv_15, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt16 = maybe_4(empty_list, mv_15);
andRslt6 = rslt16;
}
return(andRslt6);

};};
FnArity update_2110 = {FnArityType, -1, 3, (List *)0, 0, update_2108};
Function update_2112 = {FunctionType, -1, "update", 1, {&update_2110}};
Value *update_2107 = (Value *)&update_2112;


// --------- assoc-in* -------------
Value *assoc_in_STAR__2114;
Value *anon_2117(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val9;
Value *val8;
Value *val7;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs12[5] = {&val9, &val8, &val7, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 5, destArgs12);
incRef(val9, 1);
incRef(val8, 1);
incRef(val7, 1);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
Value *rslt2 = proto1Arg(&first_Implementations_336, "<nothing>/first", val1, "core", 1699);
Value *mv_3 = rslt2;
incRef(mv_3, 2);
Value *andRslt4;
andRslt4 = mv_3;
if (isNothing(andRslt4,"",0)) {
dec_and_free(val8, 2);
dec_and_free(val9, 2);
dec_and_free(val7, 2);
dec_and_free(mv_3, 2);
} else {
dec_and_free(andRslt4, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt5 = Maybe_extract_510(empty_list, mv_3);
Value *k_6 = rslt5;
incRef(k_6, 1);
Value *rslt10 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", val8, k_6, val9, "core", 1700);
Value *rslt11 = proto2Arg(&wrap_Implementations_263, "wrap", val7, rslt10, "core", 1699);
if (rslt11->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1699);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt11)));
abort();
}
andRslt4 = rslt11;
}
return(andRslt4);

};};
Value *anon_2125(List *closures, Value *new_m_0) {

while (1) {
incRef(new_m_0, 1);
Value *val4;
Value *val3;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[4] = {&val4, &val3, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 4, destArgs8);
incRef(val4, 1);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *__2 = val1;

dec_and_free(__2, 1);
Value *rslt5 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", val3, val4, new_m_0, "core", 1705);
Value *mv_6 = rslt5;
incRef(mv_6, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_4(empty_list, mv_6);
return(rslt7);

};};
Value *assoc_in_STAR__2115(List *closures, Value *m_0, Value *path_1, Value *v_2) {
while (1) {
incRef(m_0, 5);
incRef(path_1, 8);
incRef(v_2, 2);
Value *orRslt3;
Value *andRslt4;
Value *rslt5 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", path_1, "core", 1696);
andRslt4 = rslt5;
if (isNothing(andRslt4,"",0)) {
dec_and_free(m_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt4, 1);

// static-fixed
// #line 1697 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_4(empty_list, m_0);
andRslt4 = rslt6;
}
orRslt3 = andRslt4;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(assoc_in_STAR__2114, 1);
dec_and_free(hash_map_2019, 1);
dec_and_free(m_0, 4);
dec_and_free(path_1, 7);
dec_and_free(v_2, 3);
dec_and_free(numPtr3, 1);
dec_and_free(maybe_3, 1);
dec_and_free(_EQ__701, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt7 = proto1Arg(&count_Implementations_310, "<nothing>/count", path_1, "core", 1698);

// static-fixed
// #line 1698 "/home/jim/toccata/core.toc"
Value *rslt8 = _EQ__703(empty_list, numPtr3, rslt7);
Value *wrapper_9 = rslt8;
incRef(wrapper_9, 2);
FnArity *anon_10 = malloc_fnArity();
anon_10->count = 1;
anon_10->variadic = 0;
anon_10->fn = anon_2117;
anon_10->closures = empty_list;
anon_10->closures = listCons((Value *)path_1, (List *)anon_10->closures);
anon_10->closures = listCons((Value *)wrapper_9, (List *)anon_10->closures);
anon_10->closures = listCons((Value *)m_0, (List *)anon_10->closures);
anon_10->closures = listCons((Value *)v_2, (List *)anon_10->closures);
Function *anon_2121 = malloc_function(1);
anon_2121->name = "anon";
anon_2121->arityCount = 1;
anon_2121->arities[0] = anon_10;
Value *fn2116 = (Value *)anon_2121;
Value *rslt11 = proto2Arg(&flat_map_Implementations_271, "flat-map", wrapper_9, fn2116, "core", 1698);
if (rslt11->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1698);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt11)));
abort();
}
orRslt3 = rslt11;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(assoc_in_STAR__2114, 1);
dec_and_free(hash_map_2019, 1);
dec_and_free(m_0, 3);
dec_and_free(path_1, 4);
dec_and_free(v_2, 2);
dec_and_free(maybe_3, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);
Value *rslt12 = proto1Arg(&first_Implementations_336, "<nothing>/first", path_1, "core", 1701);
Value *wrapper_13 = rslt12;
incRef(wrapper_13, 1);
Value *mv_14 = wrapper_13;
incRef(mv_14, 2);
Value *andRslt15;
andRslt15 = mv_14;
if (isNothing(andRslt15,"",0)) {
dec_and_free(assoc_in_STAR__2114, 1);
dec_and_free(hash_map_2019, 1);
dec_and_free(m_0, 3);
dec_and_free(path_1, 2);
dec_and_free(v_2, 2);
dec_and_free(wrapper_13, 1);
dec_and_free(maybe_3, 1);
dec_and_free(mv_14, 2);
} else {
dec_and_free(andRslt15, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt16 = Maybe_extract_510(empty_list, mv_14);
Value *k_17 = rslt16;
incRef(k_17, 2);
Value *orRslt18;
Value *rslt19 = proto2Arg(&get_Implementations_413, "<nothing>/get", m_0, k_17, "core", 1702);
orRslt18 = rslt19;
if (!isNothing(orRslt18,"",0)) {
dec_and_free(hash_map_2019, 1);
dec_and_free(maybe_3, 1);

} else {
dec_and_free(orRslt18, 1);

// call-list
// #line 1703 "/home/jim/toccata/core.toc"
List *newList20 = empty_list;
Value *rslt21 = (Value *)newList20;

// static-variadic
// #line 1703 "/home/jim/toccata/core.toc"
Value *rslt22 = hash_map_2020(empty_list, (Value *)rslt21);
switch (rslt22->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1703\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt22)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1703\n$TOCCATA_DIR/core.toc:: 1703\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}

// static-fixed
// #line 1703 "/home/jim/toccata/core.toc"
Value *rslt23 = maybe_4(empty_list, rslt22);
orRslt18 = rslt23;
}
Value *mv_24 = orRslt18;
incRef(mv_24, 2);
Value *andRslt25;
andRslt25 = mv_24;
if (isNothing(andRslt25,"",0)) {
dec_and_free(mv_24, 2);
dec_and_free(assoc_in_STAR__2114, 1);
dec_and_free(k_17, 1);
dec_and_free(m_0, 1);
dec_and_free(path_1, 2);
dec_and_free(v_2, 2);
dec_and_free(wrapper_13, 1);
} else {
dec_and_free(andRslt25, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt26 = Maybe_extract_510(empty_list, mv_24);
Value *sub_m_27 = rslt26;
incRef(sub_m_27, 1);
Value *rslt28 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", path_1, "core", 1704);
Value *rslt32;
FnArity *arity29 = findFnArity(assoc_in_STAR__2114, 3);
if(arity29 != (FnArity *)0 && !arity29->variadic) { FnType3 *fn31 = (FnType3 *)arity29->fn;


// dynamic fn type
// #line 1704 "/home/jim/toccata/core.toc"
rslt32 = fn31(arity29->closures, sub_m_27, rslt28, v_2);
} else if(arity29 != (FnArity *)0 && arity29->variadic) { FnType1 *fn31 = (FnType1 *)arity29->fn;
List *dynArgs30 = empty_list;
dynArgs30 = (List *)listCons(v_2, dynArgs30);
dynArgs30 = (List *)listCons(rslt28, dynArgs30);
dynArgs30 = (List *)listCons(sub_m_27, dynArgs30);

// dynamic fn type
// #line 1704 "/home/jim/toccata/core.toc"
rslt32 = fn31(arity29->closures, (Value *)dynArgs30);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)assoc_in_STAR__2114)->name, "core", 1704);
  abort();
}
dec_and_free(assoc_in_STAR__2114, 1);
FnArity *anon_33 = malloc_fnArity();
anon_33->count = 1;
anon_33->variadic = 0;
anon_33->fn = anon_2125;
anon_33->closures = empty_list;
anon_33->closures = listCons((Value *)wrapper_13, (List *)anon_33->closures);
anon_33->closures = listCons((Value *)m_0, (List *)anon_33->closures);
anon_33->closures = listCons((Value *)k_17, (List *)anon_33->closures);
Function *anon_2128 = malloc_function(1);
anon_2128->name = "anon";
anon_2128->arityCount = 1;
anon_2128->arities[0] = anon_33;
Value *fn2124 = (Value *)anon_2128;
Value *rslt34 = proto2Arg(&flat_map_Implementations_271, "flat-map", rslt32, fn2124, "core", 1704);
if (rslt34->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1704);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt34)));
abort();
}
andRslt25 = rslt34;
}
andRslt15 = andRslt25;
}
return(andRslt15);
}
}

};};
Value *assoc_in_STAR__2130(List *closures, Value *m_0, Value *path_1, Value *v_2) {
switch (path_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'path' at $TOCCATA_DIR/core.toc, line 1694\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, path_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1695\n");
#endif
abort();
}
return(assoc_in_STAR__2115(closures, m_0, path_1, v_2));
};
FnArity assoc_in_STAR__2129 = {FnArityType, -1, 3, (List *)0, 0, assoc_in_STAR__2130};
Function assoc_in_STAR__2131 = {FunctionType, -1, "assoc-in*", 1, {&assoc_in_STAR__2129}};
Value *assoc_in_STAR__2114 = (Value *)&assoc_in_STAR__2131;


// --------- assoc-in -------------
Value *assoc_in_2133;
Value *assoc_in_2134(List *closures, Value *m_0, Value *path_1, Value *v_2) {
while (1) {
incRef(m_0, 1);
incRef(path_1, 1);
incRef(v_2, 1);
Value *rslt3 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", path_1, "core", 1708);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'path' at $TOCCATA_DIR/core.toc, line 1708\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1708\n$TOCCATA_DIR/core.toc:: 1695\n");
#endif
abort();
}

// static-fixed
// #line 1708 "/home/jim/toccata/core.toc"
Value *rslt4 = assoc_in_STAR__2115(empty_list, m_0, rslt3, v_2);

// type-known for extract
// #line 1708 "/home/jim/toccata/core.toc"
Value *rslt5 = Maybe_extract_510(empty_list, rslt4);
return(rslt5);

};};
FnArity assoc_in_2135 = {FnArityType, -1, 3, (List *)0, 0, assoc_in_2134};
Function assoc_in_2137 = {FunctionType, -1, "assoc-in", 1, {&assoc_in_2135}};
Value *assoc_in_2133 = (Value *)&assoc_in_2137;


// --------- merge-with -------------
Value *merge_with_2139;
Value *anon_2147(List *closures, Value *old_v_0) {

while (1) {
incRef(old_v_0, 1);
Value *val9;
Value *val8;
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs14[5] = {&val9, &val8, &val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 5, destArgs14);
incRef(val9, 3);
incRef(val8, 1);
incRef(val2, 1);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1717 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at core: 1717\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, old_v_0, val1);
} else {
FnArity *arity3 = findFnArity(val2, 2);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType2 *fn5 = (FnType2 *)arity3->fn;
rslt6 = fn5(arity3->closures, old_v_0, val1);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(val1, dynArgs4);
dynArgs4 = (List *)listCons(old_v_0, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}
Value *new_v_7 = rslt6;
incRef(new_v_7, 1);

// call-list
// #line 1719 "/home/jim/toccata/core.toc"
List *newList10 = empty_list;
newList10 = listCons((Value *)val9, newList10);
newList10 = listCons((Value *)val8, newList10);
Value *rslt11 = (Value *)newList10;

// static-variadic
// #line 1719 "/home/jim/toccata/core.toc"
Value *rslt12 = dissoc_1714(empty_list, (Value *)rslt11);
Value *rslt13 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", rslt12, val9, new_v_7, "core", 1720);
return(rslt13);

};};
Value *anon_2144(List *closures, Value *hm_0, Value *arg1) {

while (1) {
incRef(hm_0, 4);
Value *k_4;
Value *v_5;
Value *tail_2;
Value **destArgs3[3] = {&k_4, &v_5, &tail_2};
destructValue("core", "1714", (Value *)arg1, 3, destArgs3);
incRef(k_4, 4);
incRef(v_5, 2);

dec_and_free(tail_2, 1);
Value *val9;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs13[2] = {&val9, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs13);

dec_and_free(closuresTail, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", hm_0, k_4, "core", 1715);
Value *mv_7 = rslt6;
switch (mv_7->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1715\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_7)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_7, 1);
switch (mv_7->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_7)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_2147;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)v_5, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)val9, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)hm_0, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)k_4, (List *)anon_8->closures);
Function *anon_2150 = malloc_function(1);
anon_2150->name = "anon";
anon_2150->arityCount = 1;
anon_2150->arities[0] = anon_8;
Value *fn2146 = (Value *)anon_2150;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt10 = maybe_map_480(empty_list, mv_7, fn2146);
if (!isNothing(rslt10,"",0)) {
Value *rslt12 = maybeExtract(rslt10);
return(rslt12);
} else {
dec_and_free(rslt10, 1);
Value *rslt11 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", hm_0, k_4, v_5, "core", 1721);
return(rslt11);
}

};};
Value *anon_2142(List *closures, Value *hm_0, Value *m_1) {

while (1) {
incRef(hm_0, 1);
incRef(m_1, 1);
Value *val4;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val4, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);

dec_and_free(closuresTail, 1);
Value *rslt2 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", m_1, "core", 1713);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1713\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1713\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 2;
anon_3->variadic = 0;
anon_3->fn = anon_2144;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)val4, (List *)anon_3->closures);
Function *anon_2153 = malloc_function(1);
anon_2153->name = "anon";
anon_2153->arityCount = 1;
anon_2153->arities[0] = anon_3;
Value *fn2143 = (Value *)anon_2153;

// type-known for reduce
// #line 1713 "/home/jim/toccata/core.toc"
Value *rslt5 = List_reduce_635(empty_list, rslt2, hm_0, fn2143);
return(rslt5);

};};
Value *merge_with_2140(List *closures, Value *arg0) {
while (1) {
Value *merge_fn_3;
Value *hm_4;
Value *ms_1;
Value **destArgs2[3] = {&merge_fn_3, &hm_4, &ms_1};
destructValue("core", "1710", (Value *)arg0, 3, destArgs2);
incRef(hm_4, 1);
incRef(ms_1, 1);
switch (ms_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1710\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ms_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1711\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}
FnArity *anon_5 = malloc_fnArity();
anon_5->count = 2;
anon_5->variadic = 0;
anon_5->fn = anon_2142;
anon_5->closures = empty_list;
anon_5->closures = listCons((Value *)merge_fn_3, (List *)anon_5->closures);
Function *anon_2156 = malloc_function(1);
anon_2156->name = "anon";
anon_2156->arityCount = 1;
anon_2156->arities[0] = anon_5;
Value *fn2141 = (Value *)anon_2156;

// type-known for reduce
// #line 1711 "/home/jim/toccata/core.toc"
Value *rslt6 = List_reduce_635(empty_list, ms_1, hm_4, fn2141);
return(rslt6);

};};
Value *merge_with_2158(List *closures, Value *args) {
Value *arg0;
Value **destArgs7[1] = {&arg0};
destructValue("core", "1710", (Value *)args, 1, destArgs7);
return(merge_with_2140(closures, args));
};
FnArity merge_with_2157 = {FnArityType, -1, 1, (List *)0, 1, merge_with_2158};
Function merge_with_2159 = {FunctionType, -1, "merge-with", 1, {&merge_with_2157}};
Value *merge_with_2139 = (Value *)&merge_with_2159;


// --------- add-promise-action -------------
Value *add_promise_action_2161;
Value *add_promise_action_2162(List *closures, Value *p_0, Value *f_1) {
while (1) {

// inline
// #line 1726 "/home/jim/toccata/core.toc"
return(addPromiseAction((Promise *)p_0, f_1));
#

};};
Value *add_promise_action_2164(List *closures, Value *p_0, Value *f_1) {
switch (p_0->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1724\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_0)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
return(add_promise_action_2162(closures, p_0, f_1));
};
FnArity add_promise_action_2163 = {FnArityType, -1, 2, (List *)0, 0, add_promise_action_2164};
Function add_promise_action_2165 = {FunctionType, -1, "add-promise-action", 1, {&add_promise_action_2163}};
Value *add_promise_action_2161 = (Value *)&add_promise_action_2165;


// --------- promise -------------
Value *promise_2167;
Value *promise_2169(List *closures) {
while (1) {

// inline
// #line 1729 "/home/jim/toccata/core.toc"
return((Value *)malloc_promise());

#

};};
FnArity promise_2170 = {FnArityType, -1, 0, (List *)0, 0, promise_2169};
Value *promise_2168(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 1);
Value *rslt4;
FnArity *arity1 = findFnArity(promise_2167, 0);
if(arity1 != (FnArity *)0 && !arity1->variadic) { FnType0 *fn3 = (FnType0 *)arity1->fn;


// dynamic fn type
// #line 1730 "/home/jim/toccata/core.toc"
rslt4 = fn3(arity1->closures);
} else if(arity1 != (FnArity *)0 && arity1->variadic) { FnType1 *fn3 = (FnType1 *)arity1->fn;
List *dynArgs2 = empty_list;

// dynamic fn type
// #line 1730 "/home/jim/toccata/core.toc"
rslt4 = fn3(arity1->closures, (Value *)dynArgs2);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)promise_2167)->name, "core", 1730);
  abort();
}
dec_and_free(promise_2167, 1);
switch (rslt4->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1730\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1730\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}

// static-fixed
// #line 1730 "/home/jim/toccata/core.toc"
Value *rslt5 = deliver_226(empty_list, rslt4, v_0);
return(rslt5);

};};
FnArity promise_2172 = {FnArityType, -1, 1, (List *)0, 0, promise_2168};
Function promise_2174 = {FunctionType, -1, "promise", 2, {&promise_2170, &promise_2172}};
Value *promise_2167 = (Value *)&promise_2174;

Value *Promise_string_list_2184(List *closures, Value *);
Value *Promise_show_STAR__2185(List *closures, Value *, Value *);
Value *Promise_type_name_2186(List *closures, Value *);
Value *Promise_comp_STAR__2187(List *closures, Value *, Value *);
Value *Promise_extract_2188(List *closures, Value *);
Value *Promise_map_2189(List *closures, Value *, Value *);
Value *Promise_wrap_2190(List *closures, Value *, Value *);
Value *Promise_apply_STAR__2191(List *closures, Value *, Value *);
Value *Promise_flat_map_2192(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str30 = {StringBufferType, -1, 9, 0, "<Promise "};
Value *strPtr30 = (Value *)&str30;
Value *anon_2195(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val3;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs10[2] = {&val3, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs10);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *rslt1 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", x_0, "core", 1739);

// type-known for to-str
// #line 1739 "/home/jim/toccata/core.toc"
Value *rslt2 = List_to_str_809(empty_list, rslt1);

// static-fixed
// #line 1740 "/home/jim/toccata/core.toc"
Value *rslt4 = address_of_458(empty_list, val3);

// call-list
// #line 1740 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
newList5 = listCons((Value *)rslt4, newList5);
Value *rslt6 = (Value *)newList5;

// static-variadic
// #line 1740 "/home/jim/toccata/core.toc"
Value *rslt7 = str_893(empty_list, (Value *)rslt6);

// call-list
// #line 1739 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
newList8 = listCons((Value *)strPtr2, newList8);
newList8 = listCons((Value *)rslt7, newList8);
newList8 = listCons((Value *)strPtr4, newList8);
newList8 = listCons((Value *)rslt2, newList8);
newList8 = listCons((Value *)strPtr30, newList8);
Value *rslt9 = (Value *)newList8;
return(rslt9);

};};
Value *Promise_string_list_2184(List *closures, Value *p_0) {
while (1) {
incRef(p_0, 4);

// static-fixed
// #line 1738 "/home/jim/toccata/core.toc"
Value *rslt1 = delivered_232(empty_list, p_0);
Value *mv_2 = rslt1;
switch (mv_2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 1738\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_2, 1);
switch (mv_2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 1;
anon_3->variadic = 0;
anon_3->fn = anon_2195;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)p_0, (List *)anon_3->closures);
Function *anon_2198 = malloc_function(1);
anon_2198->name = "anon";
anon_2198->arityCount = 1;
anon_2198->arities[0] = anon_3;
Value *fn2194 = (Value *)anon_2198;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt4 = maybe_map_480(empty_list, mv_2, fn2194);
if (!isNothing(rslt4,"",0)) {
Value *rslt11 = maybeExtract(rslt4);
return(rslt11);
} else {
dec_and_free(rslt4, 1);

// static-fixed
// #line 1741 "/home/jim/toccata/core.toc"
Value *rslt5 = address_of_458(empty_list, p_0);

// call-list
// #line 1741 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)rslt5, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1741 "/home/jim/toccata/core.toc"
Value *rslt8 = str_893(empty_list, (Value *)rslt7);

// call-list
// #line 1741 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)strPtr2, newList9);
newList9 = listCons((Value *)rslt8, newList9);
newList9 = listCons((Value *)strPtr30, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1741\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt10);
}

};};
FnArity Promise_string_list_2199 = {FnArityType, -1, 1, (List *)0, 0, Promise_string_list_2184};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str31 = {StringBufferType, -1, 9, 0, "         "};
Value *strPtr31 = (Value *)&str31;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str32 = {StringBufferType, -1, 9, 0, "<Promise>"};
Value *strPtr32 = (Value *)&str32;
Value *Promise_show_STAR__2185(List *closures, Value *p_0, Value *indent_1) {
while (1) {
incRef(p_0, 1);
incRef(indent_1, 1);

// static-fixed
// #line 1744 "/home/jim/toccata/core.toc"
Value *rslt2 = delivered_232(empty_list, p_0);
Value *wrapper_3 = rslt2;
incRef(wrapper_3, 1);
Value *mv_4 = wrapper_3;
incRef(mv_4, 2);
Value *andRslt5;
andRslt5 = mv_4;
if (isNothing(andRslt5,"",0)) {
dec_and_free(strPtr2, 1);
dec_and_free(list_STAR__616, 1);
dec_and_free(maybe_3, 1);
dec_and_free(indent_1, 2);
dec_and_free(mv_4, 2);
dec_and_free(wrapper_3, 1);
dec_and_free(strPtr30, 1);
} else {
dec_and_free(andRslt5, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt6 = Maybe_extract_510(empty_list, mv_4);
Value *x_7 = rslt6;
incRef(x_7, 1);
Value *__8 = wrapper_3;

dec_and_free(__8, 1);

// call-list
// #line 1745 "/home/jim/toccata/core.toc"
List *newList9 = empty_list;
newList9 = listCons((Value *)strPtr31, newList9);
Value *rslt10 = (Value *)newList9;
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n");
#endif
abort();
}
switch (rslt10->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1745                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt10, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt10))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1745                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt10, 1);
Value *rslt10_0;
Value *rslt10_1;
Value **rslt10_args[2] = {&rslt10_0, &rslt10_1};
destructValue("", "0", (Value *)rslt10, 2, rslt10_args);
switch (rslt10_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt10_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n");
#endif
abort();
}
dec_and_free(rslt10_0, 1);
dec_and_free(rslt10_1, 1);
}
Value *rslt11 = proto2Arg(&comp_STAR__Implementations_241, "comp*", indent_1, rslt10, "core", 1745);
switch (rslt11->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt12 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", x_7, rslt11, "core", 1745);

// call-list
// #line 1745 "/home/jim/toccata/core.toc"
List *newList13 = empty_list;
newList13 = listCons((Value *)rslt12, newList13);
newList13 = listCons((Value *)strPtr30, newList13);
Value *rslt14 = (Value *)newList13;

// static-variadic
// #line 1745 "/home/jim/toccata/core.toc"
Value *rslt15 = list_STAR__617(empty_list, (Value *)rslt14);

// call-list
// #line 1746 "/home/jim/toccata/core.toc"
List *newList16 = empty_list;
newList16 = listCons((Value *)strPtr2, newList16);
Value *rslt17 = (Value *)newList16;

// call-list
// #line 1745 "/home/jim/toccata/core.toc"
List *newList18 = empty_list;
newList18 = listCons((Value *)rslt17, newList18);
Value *rslt19 = (Value *)newList18;
switch (rslt19->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n");
#endif
abort();
}
switch (rslt19->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt19)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1745                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt19, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt19))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1745                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt19, 1);
Value *rslt19_0;
Value *rslt19_1;
Value **rslt19_args[2] = {&rslt19_0, &rslt19_1};
destructValue("$TOCCATA_DIR/core.toc", "1746", (Value *)rslt19, 2, rslt19_args);
switch (rslt19_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt19_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1746\n");
#endif
abort();
}
switch (rslt19_0->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt19_0)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1746                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt19_0, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt19_0))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1745\n$TOCCATA_DIR/core.toc: 1745\ncore: 1746                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt19_0, 1);
Value *rslt19_0_0;
Value *rslt19_0_1;
Value **rslt19_0_args[2] = {&rslt19_0_0, &rslt19_0_1};
destructValue("$TOCCATA_DIR/core.toc", "1746", (Value *)rslt19_0, 2, rslt19_0_args);
switch (rslt19_0_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1746\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt19_0_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1745\n$TOCCATA_DIR/core.toc:: 1745\n");
#endif
abort();
}
dec_and_free(rslt19_0_0, 1);
dec_and_free(rslt19_0_1, 1);
}
dec_and_free(rslt19_0, 1);
dec_and_free(rslt19_1, 1);
}
Value *rslt20 = proto2Arg(&comp_STAR__Implementations_241, "comp*", rslt15, rslt19, "core", 1745);
Value *mv_21 = rslt20;
incRef(mv_21, 1);

// static-fixed
// #line 602 "/home/jim/toccata/core.toc"
Value *rslt22 = maybe_4(empty_list, mv_21);
andRslt5 = rslt22;
}
if (!isNothing(andRslt5,"",0)) {
Value *rslt25 = maybeExtract(andRslt5);
return(rslt25);
} else {
dec_and_free(andRslt5, 1);

// call-list
// #line 1747 "/home/jim/toccata/core.toc"
List *newList23 = empty_list;
newList23 = listCons((Value *)strPtr32, newList23);
Value *rslt24 = (Value *)newList23;
switch (rslt24->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt24)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt24);
}

};};
Value *Promise_show_STAR__2203(List *closures, Value *p_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1743\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Promise_show_STAR__2185(closures, p_0, indent_1));
};
FnArity Promise_show_STAR__2202 = {FnArityType, -1, 2, (List *)0, 0, Promise_show_STAR__2203};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str33 = {StringBufferType, -1, 7, 0, "Promise"};
Value *strPtr33 = (Value *)&str33;
Value *Promise_type_name_2186(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr33);

};};
FnArity Promise_type_name_2204 = {FnArityType, -1, 1, (List *)0, 0, Promise_type_name_2186};
Value *anon_2207(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1752\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1752 "/home/jim/toccata/core.toc"
Value *rslt2 = deliver_226(empty_list, val1, x_0);
return(rslt2);

};};
Value *anon_2213(List *closures, Value *p_0) {

while (1) {
incRef(p_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1754 "/home/jim/toccata/core.toc"
Value *rslt2 = add_promise_action_2162(empty_list, p_0, val1);
return(rslt2);

};};
Value *Promise_comp_STAR__2187(List *closures, Value *p_0, Value *ps_1) {
while (1) {
incRef(p_0, 1);
incRef(ps_1, 1);

// static-fixed
// #line 1751 "/home/jim/toccata/core.toc"
Value *rslt2 = promise_2169(empty_list);
Value *new_p_3 = rslt2;
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1751\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1752\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
incRef(new_p_3, 2);
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1751\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1752\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2207;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)new_p_3, (List *)anon_4->closures);
Function *anon_2210 = malloc_function(1);
anon_2210->name = "anon";
anon_2210->arityCount = 1;
anon_2210->arities[0] = anon_4;
Value *fn2206 = (Value *)anon_2210;
Value *f_5 = fn2206;

// static-fixed
// #line 1753 "/home/jim/toccata/core.toc"
Value *rslt6 = cons_282(empty_list, p_0, ps_1);
Value *l_7 = rslt6;
switch (l_7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1753\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_7)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_7, 1);
switch (l_7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_7)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_2213;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)f_5, (List *)anon_8->closures);
Function *anon_2216 = malloc_function(1);
anon_2216->name = "anon";
anon_2216->arityCount = 1;
anon_2216->arities[0] = anon_8;
Value *fn2212 = (Value *)anon_2216;

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt9 = list_map_93(empty_list, l_7, fn2212);

dec_and_free(rslt9, 1);
return(new_p_3);

};};
Value *Promise_comp_STAR__2218(List *closures, Value *p_0, Value *ps_1) {
switch (ps_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'ps'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ps_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1753\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
return(Promise_comp_STAR__2187(closures, p_0, ps_1));
};
FnArity Promise_comp_STAR__2217 = {FnArityType, -1, 2, (List *)0, 0, Promise_comp_STAR__2218};
Value *Promise_extract_2188(List *closures, Value *prom_0) {
while (1) {

// inline
// #line 1759 "/home/jim/toccata/core.toc"
return(extractPromise(prom_0));
#

};};
FnArity Promise_extract_2219 = {FnArityType, -1, 1, (List *)0, 0, Promise_extract_2188};
Value *anon_2222(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs8);
incRef(val2, 1);
incRef(val1, 1);
switch (val1->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1764\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1764 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1764\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, x_0);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, x_0);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(x_0, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}

// static-fixed
// #line 1764 "/home/jim/toccata/core.toc"
Value *rslt7 = deliver_226(empty_list, val1, rslt6);
return(rslt7);

};};
Value *Promise_map_2189(List *closures, Value *p_0, Value *f_1) {
while (1) {
incRef(p_0, 1);

// static-fixed
// #line 1762 "/home/jim/toccata/core.toc"
Value *rslt2 = promise_2169(empty_list);
Value *new_p_3 = rslt2;
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1762\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1764\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
incRef(new_p_3, 2);
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1762\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1764\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2222;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)new_p_3, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)f_1, (List *)anon_4->closures);
Function *anon_2225 = malloc_function(1);
anon_2225->name = "anon";
anon_2225->arityCount = 1;
anon_2225->arities[0] = anon_4;
Value *fn2221 = (Value *)anon_2225;

// static-fixed
// #line 1763 "/home/jim/toccata/core.toc"
Value *rslt5 = add_promise_action_2162(empty_list, p_0, fn2221);

dec_and_free(rslt5, 1);
return(new_p_3);

};};
Value *Promise_map_2227(List *closures, Value *p_0, Value *f_1) {
switch (p_0->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_0)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1763\n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
return(Promise_map_2189(closures, p_0, f_1));
};
FnArity Promise_map_2226 = {FnArityType, -1, 2, (List *)0, 0, Promise_map_2227};
Value *Promise_wrap_2190(List *closures, Value *arg0, Value *v_1) {
while (1) {

dec_and_free(arg0, 1);
incRef(v_1, 1);

// static-fixed
// #line 1767 "/home/jim/toccata/core.toc"
Value *rslt2 = promise_2168(empty_list, v_1);
return(rslt2);

};};
FnArity Promise_wrap_2228 = {FnArityType, -1, 2, (List *)0, 0, Promise_wrap_2190};

// --------- anon -------------
Value *fn2230;
Value *anon_2235(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1775\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1775 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, v_0, val1);
return(rslt2);

};};
Value *anon_2233(List *closures, Value *l_0) {

while (1) {
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs4);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2235;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)l_0, (List *)anon_2->closures);
Function *anon_2238 = malloc_function(1);
anon_2238->name = "anon";
anon_2238->arityCount = 1;
anon_2238->arities[0] = anon_2;
Value *fn2234 = (Value *)anon_2238;
Value *rslt3 = proto2Arg(&map_Implementations_267, "<nothing>/map", val1, fn2234, "core", 1774);
return(rslt3);

};};
Value *anon_2231(List *closures, Value *p_list_0, Value *p_v_1) {
while (1) {
incRef(p_list_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2233;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)p_v_1, (List *)anon_2->closures);
Function *anon_2241 = malloc_function(1);
anon_2241->name = "anon";
anon_2241->arityCount = 1;
anon_2241->arities[0] = anon_2;
Value *fn2232 = (Value *)anon_2241;
Value *rslt3 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", p_list_0, fn2232, "core", 1773);
return(rslt3);

};};
FnArity anon_2242 = {FnArityType, -1, 2, (List *)0, 0, anon_2231};
Function anon_2244 = {FunctionType, -1, "anon", 1, {&anon_2242}};
Value *fn2230 = (Value *)&anon_2244;

Value *anon_2246(List *closures, Value *vs_0) {

while (1) {
incRef(vs_0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs8);
incRef(val2, 1);
incRef(val1, 1);
switch (val1->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1777\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);
Value *rslt3 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", val2, "core", 1777);

// call-list
// #line 1777 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)vs_0, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1777\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1777\n$TOCCATA_DIR/core.toc:: 1777\n$TOCCATA_DIR/core.toc:: 1777\n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1777\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1777\n$TOCCATA_DIR/core.toc: 1777\ncore: 1777                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1777\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1777\n$TOCCATA_DIR/core.toc: 1777\ncore: 1777                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value **rslt5_args[2] = {&rslt5_0, &rslt5_1};
destructValue("$TOCCATA_DIR/core.toc", "1777", (Value *)rslt5, 2, rslt5_args);
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
}
Value *rslt6 = proto2Arg(&apply_STAR__Implementations_275, "apply*", rslt3, rslt5, "core", 1777);

// static-fixed
// #line 1777 "/home/jim/toccata/core.toc"
Value *rslt7 = deliver_226(empty_list, val1, rslt6);
return(rslt7);

};};
Value *Promise_apply_STAR__2191(List *closures, Value *p_f_0, Value *p_vs_1) {
while (1) {
incRef(p_vs_1, 1);

// static-fixed
// #line 1770 "/home/jim/toccata/core.toc"
Value *rslt2 = promise_2169(empty_list);
Value *new_p_3 = rslt2;
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1770\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1777\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
incRef(new_p_3, 2);
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1770\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1777\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
Value *rslt4 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", p_vs_1, "core", 1771);

// static-fixed
// #line 1771 "/home/jim/toccata/core.toc"
Value *rslt5 = promise_2168(empty_list, empty_list_0);
Value *rslt6 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt4, rslt5, fn2230, "core", 1771);
Value *p_vlist_7 = rslt6;
switch (p_vlist_7->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1771\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_vlist_7)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1776\n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
incRef(p_vlist_7, 1);
switch (p_vlist_7->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1771\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_vlist_7)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1776\n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_2246;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)new_p_3, (List *)anon_8->closures);
anon_8->closures = listCons((Value *)p_f_0, (List *)anon_8->closures);
Function *anon_2249 = malloc_function(1);
anon_2249->name = "anon";
anon_2249->arityCount = 1;
anon_2249->arities[0] = anon_8;
Value *fn2245 = (Value *)anon_2249;

// static-fixed
// #line 1776 "/home/jim/toccata/core.toc"
Value *rslt9 = add_promise_action_2162(empty_list, p_vlist_7, fn2245);

dec_and_free(rslt9, 1);
return(new_p_3);

};};
FnArity Promise_apply_STAR__2250 = {FnArityType, -1, 2, (List *)0, 0, Promise_apply_STAR__2191};
Value *anon_2255(List *closures, Value *y_0) {

while (1) {
incRef(y_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1784\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1784 "/home/jim/toccata/core.toc"
Value *rslt2 = deliver_226(empty_list, val1, y_0);
return(rslt2);

};};
Value *anon_2253(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val7;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[3] = {&val7, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs9);
switch (val7->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, val7)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1784\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1783 "/home/jim/toccata/core.toc"
Value *rslt5;
if((val1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1783\n",
extractStr(type_name(empty_list, val1)), val1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, val1, x_0);
} else {
FnArity *arity2 = findFnArity(val1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, x_0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(x_0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val1)->name);
  abort();
}
dec_and_free(val1, 1);
}
switch (rslt5->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1783\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1783\n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 1;
anon_6->variadic = 0;
anon_6->fn = anon_2255;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)val7, (List *)anon_6->closures);
Function *anon_2258 = malloc_function(1);
anon_2258->name = "anon";
anon_2258->arityCount = 1;
anon_2258->arities[0] = anon_6;
Value *fn2254 = (Value *)anon_2258;

// static-fixed
// #line 1783 "/home/jim/toccata/core.toc"
Value *rslt8 = add_promise_action_2162(empty_list, rslt5, fn2254);
return(rslt8);

};};
Value *Promise_flat_map_2192(List *closures, Value *p_0, Value *f_1) {
while (1) {
incRef(p_0, 1);

// static-fixed
// #line 1781 "/home/jim/toccata/core.toc"
Value *rslt2 = promise_2169(empty_list);
Value *new_p_3 = rslt2;
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1781\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1784\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
incRef(new_p_3, 2);
switch (new_p_3->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p' at $TOCCATA_DIR/core.toc, line 1781\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1784\n$TOCCATA_DIR/core.toc:: 244 \n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2253;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)f_1, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)new_p_3, (List *)anon_4->closures);
Function *anon_2261 = malloc_function(1);
anon_2261->name = "anon";
anon_2261->arityCount = 1;
anon_2261->arities[0] = anon_4;
Value *fn2252 = (Value *)anon_2261;

// static-fixed
// #line 1782 "/home/jim/toccata/core.toc"
Value *rslt5 = add_promise_action_2162(empty_list, p_0, fn2252);

dec_and_free(rslt5, 1);
return(new_p_3);

};};
Value *Promise_flat_map_2263(List *closures, Value *p_0, Value *f_1) {
switch (p_0->type) {
case 15: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'p'\n");
fprintf(stderr, "Needed Promise, got %s\n", extractStr(type_name(empty_list, p_0)));
fprintf(stderr, "'Promise' From:             \n$TOCCATA_DIR/core.toc:: 1782\n$TOCCATA_DIR/core.toc:: 1725\n");
#endif
abort();
}
return(Promise_flat_map_2192(closures, p_0, f_1));
};
FnArity Promise_flat_map_2262 = {FnArityType, -1, 2, (List *)0, 0, Promise_flat_map_2263};

// --------- future -------------
Value *future_2265;
Value *future_2267(List *closures) {
while (1) {

// inline
// #line 1789 "/home/jim/toccata/core.toc"
return(makeFuture((Value *)0));
#

};};
FnArity future_2268 = {FnArityType, -1, 0, (List *)0, 0, future_2267};
Value *future_2266(List *closures, Value *f_0) {
while (1) {

// inline
// #line 1790 "/home/jim/toccata/core.toc"
return(makeFuture(f_0));
#

};};
FnArity future_2270 = {FnArityType, -1, 1, (List *)0, 0, future_2266};
Function future_2272 = {FunctionType, -1, "future", 2, {&future_2268, &future_2270}};
Value *future_2265 = (Value *)&future_2272;


// --------- thread-id -------------
Value *thread_id_2274;
Value *thread_id_2275(List *closures) {
while (1) {

// inline
// #line 1793 "/home/jim/toccata/core.toc"
return(integerValue((int64_t)pthread_self()));
#

};};
FnArity thread_id_2276 = {FnArityType, -1, 0, (List *)0, 0, thread_id_2275};
Function thread_id_2278 = {FunctionType, -1, "thread-id", 1, {&thread_id_2276}};
Value *thread_id_2274 = (Value *)&thread_id_2278;


// --------- deliver-future -------------
Value *deliver_future_2280;
Value *deliver_future_2281(List *closures, Value *fut_0, Value *val_1) {
while (1) {

// inline
// #line 1797 "/home/jim/toccata/core.toc"
return(deliverFuture(fut_0, val_1));
#

};};
Value *deliver_future_2283(List *closures, Value *fut_0, Value *val_1) {
switch (fut_0->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1795\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_0)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
return(deliver_future_2281(closures, fut_0, val_1));
};
FnArity deliver_future_2282 = {FnArityType, -1, 2, (List *)0, 0, deliver_future_2283};
Function deliver_future_2284 = {FunctionType, -1, "deliver-future", 1, {&deliver_future_2282}};
Value *deliver_future_2280 = (Value *)&deliver_future_2284;


// --------- add-future-action -------------
Value *add_future_action_2286;
Value *add_future_action_2287(List *closures, Value *fut_0, Value *f_1) {
while (1) {

// inline
// #line 1801 "/home/jim/toccata/core.toc"
return(addFutureAction((Future *)fut_0, f_1));
#

};};
Value *add_future_action_2289(List *closures, Value *fut_0, Value *f_1) {
switch (fut_0->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1799\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_0)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
return(add_future_action_2287(closures, fut_0, f_1));
};
FnArity add_future_action_2288 = {FnArityType, -1, 2, (List *)0, 0, add_future_action_2289};
Function add_future_action_2290 = {FunctionType, -1, "add-future-action", 1, {&add_future_action_2288}};
Value *add_future_action_2286 = (Value *)&add_future_action_2290;

Value *Future_string_list_2301(List *closures, Value *);
Value *Future_show_STAR__2302(List *closures, Value *, Value *);
Value *Future_type_name_2303(List *closures, Value *);
Value *Future_comp_STAR__2304(List *closures, Value *, Value *);
Value *Future_map_2305(List *closures, Value *, Value *);
Value *Future_wrap_2306(List *closures, Value *, Value *);
Value *Future_apply_STAR__2307(List *closures, Value *, Value *);
Value *Future_flat_map_2308(List *closures, Value *, Value *);
Value *Future_extract_2309(List *closures, Value *);
Value *Future_extend_2310(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[9];
} str34 = {StringBufferType, -1, 8, 0, "<Future "};
Value *strPtr34 = (Value *)&str34;
Value *Future_string_list_2301(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);

// static-fixed
// #line 1808 "/home/jim/toccata/core.toc"
Value *rslt1 = address_of_458(empty_list, arg0);

// call-list
// #line 1808 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)rslt1, newList2);
Value *rslt3 = (Value *)newList2;

// static-variadic
// #line 1808 "/home/jim/toccata/core.toc"
Value *rslt4 = str_893(empty_list, (Value *)rslt3);

// call-list
// #line 1808 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
newList5 = listCons((Value *)strPtr2, newList5);
newList5 = listCons((Value *)rslt4, newList5);
newList5 = listCons((Value *)strPtr34, newList5);
Value *rslt6 = (Value *)newList5;
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt6);

};};
FnArity Future_string_list_2311 = {FnArityType, -1, 1, (List *)0, 0, Future_string_list_2301};
Value *Future_show_STAR__2302(List *closures, Value *p_0, Value *indent_1) {
while (1) {
incRef(p_0, 1);

dec_and_free(indent_1, 1);
Value *rslt2 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", p_0, "core", 1811);
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1811\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt2);

};};
Value *Future_show_STAR__2314(List *closures, Value *p_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1810\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Future_show_STAR__2302(closures, p_0, indent_1));
};
FnArity Future_show_STAR__2313 = {FnArityType, -1, 2, (List *)0, 0, Future_show_STAR__2314};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[7];
} str35 = {StringBufferType, -1, 6, 0, "Future"};
Value *strPtr35 = (Value *)&str35;
Value *Future_type_name_2303(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr35);

};};
FnArity Future_type_name_2315 = {FnArityType, -1, 1, (List *)0, 0, Future_type_name_2303};
Value *anon_2318(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1816\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1816 "/home/jim/toccata/core.toc"
Value *rslt2 = deliver_future_2281(empty_list, val1, x_0);
return(rslt2);

};};
Value *anon_2324(List *closures, Value *p_0) {

while (1) {
incRef(p_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1818 "/home/jim/toccata/core.toc"
Value *rslt2 = add_future_action_2287(empty_list, p_0, val1);
return(rslt2);

};};
Value *Future_comp_STAR__2304(List *closures, Value *p_0, Value *ps_1) {
while (1) {
incRef(p_0, 1);
incRef(ps_1, 1);

// static-fixed
// #line 1815 "/home/jim/toccata/core.toc"
Value *rslt2 = future_2267(empty_list);
Value *new_p_3 = rslt2;
switch (new_p_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1815\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1816\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
incRef(new_p_3, 2);
switch (new_p_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1815\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_p_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1816\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2318;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)new_p_3, (List *)anon_4->closures);
Function *anon_2321 = malloc_function(1);
anon_2321->name = "anon";
anon_2321->arityCount = 1;
anon_2321->arities[0] = anon_4;
Value *fn2317 = (Value *)anon_2321;
Value *f_5 = fn2317;

// static-fixed
// #line 1817 "/home/jim/toccata/core.toc"
Value *rslt6 = cons_282(empty_list, p_0, ps_1);
Value *l_7 = rslt6;
switch (l_7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1817\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_7)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_7, 1);
switch (l_7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_7)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 1;
anon_8->variadic = 0;
anon_8->fn = anon_2324;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)f_5, (List *)anon_8->closures);
Function *anon_2327 = malloc_function(1);
anon_2327->name = "anon";
anon_2327->arityCount = 1;
anon_2327->arities[0] = anon_8;
Value *fn2323 = (Value *)anon_2327;

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt9 = list_map_93(empty_list, l_7, fn2323);

dec_and_free(rslt9, 1);
return(new_p_3);

};};
Value *Future_comp_STAR__2329(List *closures, Value *p_0, Value *ps_1) {
switch (ps_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'ps'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, ps_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1817\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
return(Future_comp_STAR__2304(closures, p_0, ps_1));
};
FnArity Future_comp_STAR__2328 = {FnArityType, -1, 2, (List *)0, 0, Future_comp_STAR__2329};
Value *anon_2331(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs8);
incRef(val2, 1);
incRef(val1, 1);
switch (val1->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1825\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1825 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1825\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, x_0);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, x_0);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(x_0, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}

// static-fixed
// #line 1825 "/home/jim/toccata/core.toc"
Value *rslt7 = deliver_future_2281(empty_list, val1, rslt6);
return(rslt7);

};};
Value *Future_map_2305(List *closures, Value *fut_0, Value *f_1) {
while (1) {
incRef(fut_0, 1);

// static-fixed
// #line 1823 "/home/jim/toccata/core.toc"
Value *rslt2 = future_2267(empty_list);
Value *new_fut_3 = rslt2;
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1823\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1825\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
incRef(new_fut_3, 2);
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1823\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1825\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2331;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)new_fut_3, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)f_1, (List *)anon_4->closures);
Function *anon_2334 = malloc_function(1);
anon_2334->name = "anon";
anon_2334->arityCount = 1;
anon_2334->arities[0] = anon_4;
Value *fn2330 = (Value *)anon_2334;

// static-fixed
// #line 1824 "/home/jim/toccata/core.toc"
Value *rslt5 = add_future_action_2287(empty_list, fut_0, fn2330);

dec_and_free(rslt5, 1);
return(new_fut_3);

};};
Value *Future_map_2336(List *closures, Value *fut_0, Value *f_1) {
switch (fut_0->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_0)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1824\n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
return(Future_map_2305(closures, fut_0, f_1));
};
FnArity Future_map_2335 = {FnArityType, -1, 2, (List *)0, 0, Future_map_2336};
Value *Future_wrap_2306(List *closures, Value *arg0, Value *v_1) {
while (1) {

dec_and_free(arg0, 1);
incRef(v_1, 1);

// static-fixed
// #line 1829 "/home/jim/toccata/core.toc"
Value *rslt2 = future_2267(empty_list);
switch (rslt2->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1829\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1829\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

// static-fixed
// #line 1829 "/home/jim/toccata/core.toc"
Value *rslt3 = deliver_future_2281(empty_list, rslt2, v_1);
return(rslt3);

};};
FnArity Future_wrap_2337 = {FnArityType, -1, 2, (List *)0, 0, Future_wrap_2306};

// --------- anon -------------
Value *fn2339;
Value *anon_2344(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1837\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1837 "/home/jim/toccata/core.toc"
Value *rslt2 = cons_282(empty_list, v_0, val1);
return(rslt2);

};};
Value *anon_2342(List *closures, Value *l_0) {

while (1) {
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs4);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2344;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)l_0, (List *)anon_2->closures);
Function *anon_2347 = malloc_function(1);
anon_2347->name = "anon";
anon_2347->arityCount = 1;
anon_2347->arities[0] = anon_2;
Value *fn2343 = (Value *)anon_2347;
Value *rslt3 = proto2Arg(&map_Implementations_267, "<nothing>/map", val1, fn2343, "core", 1836);
return(rslt3);

};};
Value *anon_2340(List *closures, Value *fut_list_0, Value *fut_v_1) {
while (1) {
incRef(fut_list_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2342;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)fut_v_1, (List *)anon_2->closures);
Function *anon_2350 = malloc_function(1);
anon_2350->name = "anon";
anon_2350->arityCount = 1;
anon_2350->arities[0] = anon_2;
Value *fn2341 = (Value *)anon_2350;
Value *rslt3 = proto2Arg(&flat_map_Implementations_271, "<nothing>/flat-map", fut_list_0, fn2341, "core", 1835);
return(rslt3);

};};
FnArity anon_2351 = {FnArityType, -1, 2, (List *)0, 0, anon_2340};
Function anon_2353 = {FunctionType, -1, "anon", 1, {&anon_2351}};
Value *fn2339 = (Value *)&anon_2353;

Value *anon_2355(List *closures, Value *vs_0) {

while (1) {
incRef(vs_0, 1);
Value *val2;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[3] = {&val2, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs8);
incRef(val2, 1);
incRef(val1, 1);
switch (val1->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1839\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);
Value *rslt3 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", val2, "core", 1839);

// call-list
// #line 1839 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)vs_0, newList4);
Value *rslt5 = (Value *)newList4;
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1839\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1839\n$TOCCATA_DIR/core.toc:: 1839\n$TOCCATA_DIR/core.toc:: 1839\n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1839\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1839\n$TOCCATA_DIR/core.toc: 1839\ncore: 1839                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1839\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1839\n$TOCCATA_DIR/core.toc: 1839\ncore: 1839                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value **rslt5_args[2] = {&rslt5_0, &rslt5_1};
destructValue("$TOCCATA_DIR/core.toc", "1839", (Value *)rslt5, 2, rslt5_args);
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
}
Value *rslt6 = proto2Arg(&apply_STAR__Implementations_275, "apply*", rslt3, rslt5, "core", 1839);

// static-fixed
// #line 1839 "/home/jim/toccata/core.toc"
Value *rslt7 = deliver_future_2281(empty_list, val1, rslt6);
return(rslt7);

};};
Value *Future_apply_STAR__2307(List *closures, Value *fut_f_0, Value *fut_vs_1) {
while (1) {
incRef(fut_vs_1, 1);

// static-fixed
// #line 1832 "/home/jim/toccata/core.toc"
Value *rslt2 = future_2267(empty_list);
Value *new_fut_3 = rslt2;
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1832\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1839\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
incRef(new_fut_3, 2);
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1832\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1839\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
Value *rslt4 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", fut_vs_1, "core", 1833);

// static-fixed
// #line 1833 "/home/jim/toccata/core.toc"
Value *rslt5 = future_2267(empty_list);
switch (rslt5->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1833\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1833\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

// static-fixed
// #line 1833 "/home/jim/toccata/core.toc"
Value *rslt6 = deliver_future_2281(empty_list, rslt5, empty_list_0);
Value *rslt7 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt4, rslt6, fn2339, "core", 1833);
Value *fut_vlist_8 = rslt7;
switch (fut_vlist_8->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1833\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_vlist_8)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1838\n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
incRef(fut_vlist_8, 1);
switch (fut_vlist_8->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1833\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_vlist_8)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1838\n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
FnArity *anon_9 = malloc_fnArity();
anon_9->count = 1;
anon_9->variadic = 0;
anon_9->fn = anon_2355;
anon_9->closures = empty_list;
anon_9->closures = listCons((Value *)new_fut_3, (List *)anon_9->closures);
anon_9->closures = listCons((Value *)fut_f_0, (List *)anon_9->closures);
Function *anon_2358 = malloc_function(1);
anon_2358->name = "anon";
anon_2358->arityCount = 1;
anon_2358->arities[0] = anon_9;
Value *fn2354 = (Value *)anon_2358;

// static-fixed
// #line 1838 "/home/jim/toccata/core.toc"
Value *rslt10 = add_future_action_2287(empty_list, fut_vlist_8, fn2354);

dec_and_free(rslt10, 1);
return(new_fut_3);

};};
FnArity Future_apply_STAR__2359 = {FnArityType, -1, 2, (List *)0, 0, Future_apply_STAR__2307};
Value *anon_2364(List *closures, Value *y_0) {

while (1) {
incRef(y_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val1, 1);
switch (val1->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, val1)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1846\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}

dec_and_free(closuresTail, 1);

// static-fixed
// #line 1846 "/home/jim/toccata/core.toc"
Value *rslt2 = deliver_future_2281(empty_list, val1, y_0);
return(rslt2);

};};
Value *anon_2362(List *closures, Value *x_0) {

while (1) {
incRef(x_0, 1);
Value *val7;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[3] = {&val7, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs9);
switch (val7->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, val7)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1846\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1845 "/home/jim/toccata/core.toc"
Value *rslt5;
if((val1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1845\n",
extractStr(type_name(empty_list, val1)), val1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, val1, x_0);
} else {
FnArity *arity2 = findFnArity(val1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, x_0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(x_0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val1)->name);
  abort();
}
dec_and_free(val1, 1);
}
switch (rslt5->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1845\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1845\n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 1;
anon_6->variadic = 0;
anon_6->fn = anon_2364;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)val7, (List *)anon_6->closures);
Function *anon_2367 = malloc_function(1);
anon_2367->name = "anon";
anon_2367->arityCount = 1;
anon_2367->arities[0] = anon_6;
Value *fn2363 = (Value *)anon_2367;

// static-fixed
// #line 1845 "/home/jim/toccata/core.toc"
Value *rslt8 = add_future_action_2287(empty_list, rslt5, fn2363);
return(rslt8);

};};
Value *Future_flat_map_2308(List *closures, Value *fut_0, Value *f_1) {
while (1) {
incRef(fut_0, 1);

// static-fixed
// #line 1843 "/home/jim/toccata/core.toc"
Value *rslt2 = future_2267(empty_list);
Value *new_fut_3 = rslt2;
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1843\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1846\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
incRef(new_fut_3, 2);
switch (new_fut_3->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut' at $TOCCATA_DIR/core.toc, line 1843\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, new_fut_3)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1846\n$TOCCATA_DIR/core.toc:: 1796\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2362;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)f_1, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)new_fut_3, (List *)anon_4->closures);
Function *anon_2370 = malloc_function(1);
anon_2370->name = "anon";
anon_2370->arityCount = 1;
anon_2370->arities[0] = anon_4;
Value *fn2361 = (Value *)anon_2370;

// static-fixed
// #line 1844 "/home/jim/toccata/core.toc"
Value *rslt5 = add_future_action_2287(empty_list, fut_0, fn2361);

dec_and_free(rslt5, 1);
return(new_fut_3);

};};
Value *Future_flat_map_2372(List *closures, Value *fut_0, Value *f_1) {
switch (fut_0->type) {
case 16: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'fut'\n");
fprintf(stderr, "Needed Future, got %s\n", extractStr(type_name(empty_list, fut_0)));
fprintf(stderr, "'Future' From:              \n$TOCCATA_DIR/core.toc:: 1844\n$TOCCATA_DIR/core.toc:: 1800\n");
#endif
abort();
}
return(Future_flat_map_2308(closures, fut_0, f_1));
};
FnArity Future_flat_map_2371 = {FnArityType, -1, 2, (List *)0, 0, Future_flat_map_2372};
Value *Future_extract_2309(List *closures, Value *fut_0) {
while (1) {

// inline
// #line 1850 "/home/jim/toccata/core.toc"
return(extractFuture(fut_0));
#

};};
FnArity Future_extract_2373 = {FnArityType, -1, 1, (List *)0, 0, Future_extract_2309};
Value *anon_2376(List *closures) {

while (1) {
Value *val1;
Value *val0;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[3] = {&val1, &val0, &closuresTail};
destructValue("", "", (Value *)closures, 3, destArgs6);
incRef(val1, 1);
incRef(val0, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1854 "/home/jim/toccata/core.toc"
Value *rslt5;
if((val1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1854\n",
extractStr(type_name(empty_list, val1)), val1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, val1, val0);
} else {
FnArity *arity2 = findFnArity(val1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, val0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(val0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val1)->name);
  abort();
}
dec_and_free(val1, 1);
}
return(rslt5);

};};
Value *Future_extend_2310(List *closures, Value *fut_0, Value *f_1) {
while (1) {
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 0;
anon_2->variadic = 0;
anon_2->fn = anon_2376;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)fut_0, (List *)anon_2->closures);
anon_2->closures = listCons((Value *)f_1, (List *)anon_2->closures);
Function *anon_2379 = malloc_function(1);
anon_2379->name = "anon";
anon_2379->arityCount = 1;
anon_2379->arities[0] = anon_2;
Value *fn2375 = (Value *)anon_2379;

// static-fixed
// #line 1853 "/home/jim/toccata/core.toc"
Value *rslt3 = future_2266(empty_list, fn2375);
return(rslt3);

};};
FnArity Future_extend_2380 = {FnArityType, -1, 2, (List *)0, 0, Future_extend_2310};
Value *Agent_string_list_2389(List *closures, Value *);
Value *Agent_show_STAR__2390(List *closures, Value *, Value *);
Value *Agent_type_name_2391(List *closures, Value *);
Value *Agent_sha1_update_2392(List *closures, Value *, Value *);
Value *Agent_sha1_2393(List *closures, Value *);
Value *Agent_send_STAR__2394(List *closures, Value *, Value *);
Value *Agent_extract_2395(List *closures, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str36 = {StringBufferType, -1, 7, 0, "<Agent "};
Value *strPtr36 = (Value *)&str36;
Value *Agent_string_list_2389(List *closures, Value *a_0) {
while (1) {
incRef(a_0, 1);

// call-list
// #line 1863 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr36, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n");
#endif
abort();
}
switch (rslt2->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1863                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt2, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt2))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1863                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt2, 1);
Value *rslt2_0;
Value *rslt2_1;
Value **rslt2_args[2] = {&rslt2_0, &rslt2_1};
destructValue("", "0", (Value *)rslt2, 2, rslt2_args);
switch (rslt2_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt2_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n");
#endif
abort();
}
dec_and_free(rslt2_0, 1);
dec_and_free(rslt2_1, 1);
}
Value *rslt3 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", a_0, "core", 1864);
Value *rslt4 = proto1Arg(&string_list_Implementations_797, "<nothing>/string-list", rslt3, "core", 1864);

// call-list
// #line 1865 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
newList5 = listCons((Value *)strPtr2, newList5);
Value *rslt6 = (Value *)newList5;

// call-list
// #line 1863 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)rslt6, newList7);
newList7 = listCons((Value *)rslt4, newList7);
Value *rslt8 = (Value *)newList7;
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n");
#endif
abort();
}
switch (rslt8->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1863                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1863                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8, 1);
Value *rslt8_0;
Value *rslt8_1;
Value *rslt8_2;
Value **rslt8_args[3] = {&rslt8_0, &rslt8_1, &rslt8_2};
destructValue("$TOCCATA_DIR/core.toc", "1864", (Value *)rslt8, 3, rslt8_args);
switch (rslt8_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1865\n");
#endif
abort();
}
switch (rslt8_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt8_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1865                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt8_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt8_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1863\n$TOCCATA_DIR/core.toc: 1863\ncore: 1865                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt8_1, 1);
Value *rslt8_1_0;
Value *rslt8_1_1;
Value **rslt8_1_args[2] = {&rslt8_1_0, &rslt8_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1864", (Value *)rslt8_1, 2, rslt8_1_args);
switch (rslt8_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1864\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt8_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1863\n$TOCCATA_DIR/core.toc:: 1863\n");
#endif
abort();
}
dec_and_free(rslt8_1_0, 1);
dec_and_free(rslt8_1_1, 1);
}
dec_and_free(rslt8_0, 1);
dec_and_free(rslt8_1, 1);
dec_and_free(rslt8_2, 1);
}

// type-known for comp*
// #line 1863 "/home/jim/toccata/core.toc"
Value *rslt9 = List_comp_STAR__566(empty_list, rslt2, rslt8);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt9);

};};
FnArity Agent_string_list_2396 = {FnArityType, -1, 1, (List *)0, 0, Agent_string_list_2389};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str37 = {StringBufferType, -1, 7, 0, "<      "};
Value *strPtr37 = (Value *)&str37;
Value *Agent_show_STAR__2390(List *closures, Value *a_0, Value *indent_1) {
while (1) {
incRef(a_0, 1);
incRef(indent_1, 1);
Value *rslt2 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", a_0, "core", 1868);

// call-list
// #line 1868 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)strPtr37, newList3);
Value *rslt4 = (Value *)newList3;
switch (rslt4->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 1868\n");
#endif
abort();
}
switch (rslt4->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1868\n$TOCCATA_DIR/core.toc: 1868\ncore: 1868                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt4, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt4))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1868\n$TOCCATA_DIR/core.toc: 1868\ncore: 1868                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt4, 1);
Value *rslt4_0;
Value *rslt4_1;
Value **rslt4_args[2] = {&rslt4_0, &rslt4_1};
destructValue("", "0", (Value *)rslt4, 2, rslt4_args);
switch (rslt4_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt4_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 1868\n");
#endif
abort();
}
dec_and_free(rslt4_0, 1);
dec_and_free(rslt4_1, 1);
}
Value *rslt5 = proto2Arg(&comp_STAR__Implementations_241, "comp*", indent_1, rslt4, "core", 1868);
switch (rslt5->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
Value *rslt6 = proto2Arg(&show_STAR__Implementations_800, "<nothing>/show*", rslt2, rslt5, "core", 1868);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1868\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1868 "/home/jim/toccata/core.toc"
Value *rslt7 = cons_282(empty_list, strPtr36, rslt6);

// call-list
// #line 1868 "/home/jim/toccata/core.toc"
List *newList8 = empty_list;
Value *rslt9 = (Value *)newList8;
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1868\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 1868\n$TOCCATA_DIR/core.toc:: 1868\n");
#endif
abort();
}

// type-known for comp*
// #line 1868 "/home/jim/toccata/core.toc"
Value *rslt10 = List_comp_STAR__566(empty_list, rslt7, rslt9);
switch (rslt10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1868\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 864\n");
#endif
abort();
}
return(rslt10);

};};
Value *Agent_show_STAR__2399(List *closures, Value *a_0, Value *indent_1) {
switch (indent_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'indent'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, indent_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1867\n$TOCCATA_DIR/core.toc:: 861 \n");
#endif
abort();
}
return(Agent_show_STAR__2390(closures, a_0, indent_1));
};
FnArity Agent_show_STAR__2398 = {FnArityType, -1, 2, (List *)0, 0, Agent_show_STAR__2399};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[6];
} str38 = {StringBufferType, -1, 5, 0, "Agent"};
Value *strPtr38 = (Value *)&str38;
Value *Agent_type_name_2391(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr38);

};};
FnArity Agent_type_name_2400 = {FnArityType, -1, 1, (List *)0, 0, Agent_type_name_2391};
Value *Agent_sha1_update_2392(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 3);

// static-fixed
// #line 1872 "/home/jim/toccata/core.toc"
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", x_0, "core", 1873);
Value *rslt4 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", rslt3, ctxt_1, "core", 1873);
return(rslt4);

};};
FnArity Agent_sha1_update_2402 = {FnArityType, -1, 2, (List *)0, 0, Agent_sha1_update_2392};
Value *Agent_sha1_2393(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 1876 "/home/jim/toccata/core.toc"
Value *rslt1 = sha1_init_446(empty_list);
Value *ctxt_2 = rslt1;
incRef(ctxt_2, 3);
Value *rslt3 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_0, ctxt_2, "core", 1877);

dec_and_free(rslt3, 1);

// static-fixed
// #line 1878 "/home/jim/toccata/core.toc"
Value *rslt4 = sha1_finalize_452(empty_list, ctxt_2);
switch (rslt4->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1878\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt4);

};};
FnArity Agent_sha1_2404 = {FnArityType, -1, 1, (List *)0, 0, Agent_sha1_2393};
Value *Agent_send_STAR__2394(List *closures, Value *agt_0, Value *f_and_args_1) {
while (1) {

// inline
// #line 1882 "/home/jim/toccata/core.toc"

  scheduleAgent((Agent *)agt_0, (List *)f_and_args_1);
  return(agt_0);
#

};};
FnArity Agent_send_STAR__2406 = {FnArityType, -1, 2, (List *)0, 0, Agent_send_STAR__2394};
Value *Agent_extract_2395(List *closures, Value *agt_0) {
while (1) {

// inline
// #line 1887 "/home/jim/toccata/core.toc"
return(extractAgent(agt_0));
#

};};
FnArity Agent_extract_2408 = {FnArityType, -1, 1, (List *)0, 0, Agent_extract_2395};

// --------- agent -------------
Value *agent_2411;
Value *agent_2412(List *closures, Value *v_0) {
while (1) {

// inline
// #line 1890 "/home/jim/toccata/core.toc"
return(makeAgent(v_0));
#

};};
FnArity agent_2413 = {FnArityType, -1, 1, (List *)0, 0, agent_2412};
Function agent_2415 = {FunctionType, -1, "agent", 1, {&agent_2413}};
Value *agent_2411 = (Value *)&agent_2415;


// --------- remove -------------
Value *remove_2417;
Value *anon_2420(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs7[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs7);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1895 "/home/jim/toccata/core.toc"
Value *rslt5;
if((val1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1895\n",
extractStr(type_name(empty_list, val1)), val1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, val1, v_0);
} else {
FnArity *arity2 = findFnArity(val1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, v_0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(v_0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val1)->name);
  abort();
}
dec_and_free(val1, 1);
}

// static-fixed
// #line 1895 "/home/jim/toccata/core.toc"
Value *rslt6 = _EQ__703(empty_list, nothing_8, rslt5);
return(rslt6);

};};
Value *remove_2418(List *closures, Value *l_0, Value *f_1) {
while (1) {
incRef(l_0, 1);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2420;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)f_1, (List *)anon_2->closures);
Function *anon_2423 = malloc_function(1);
anon_2423->name = "anon";
anon_2423->arityCount = 1;
anon_2423->arities[0] = anon_2;
Value *fn2419 = (Value *)anon_2423;
Value *rslt3 = proto2Arg(&filter_Implementations_308, "<nothing>/filter", l_0, fn2419, "core", 1894);
return(rslt3);

};};
FnArity remove_2424 = {FnArityType, -1, 2, (List *)0, 0, remove_2418};
Function remove_2426 = {FunctionType, -1, "remove", 1, {&remove_2424}};
Value *remove_2417 = (Value *)&remove_2426;


// --------- repeat -------------
Value *repeat_2428;

// --------- anon -------------
Value *fn2430;
Value *anon_2431(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(empty_list_0);

};};
FnArity anon_2432 = {FnArityType, -1, 1, (List *)0, 0, anon_2431};
Function anon_2434 = {FunctionType, -1, "anon", 1, {&anon_2432}};
Value *fn2430 = (Value *)&anon_2434;

Value *repeat_2429(List *closures, Value *n_0, Value *v_1) {
while (1) {
incRef(n_0, 3);
incRef(v_1, 3);

// static-fixed
// #line 1899 "/home/jim/toccata/core.toc"
Value *rslt2 = _EQ__703(empty_list, numPtr0, n_0);
Value *rslt3 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt2, fn2430, "core", 1899);
if (!isNothing(rslt3,"",0)) {
Value *rslt10 = maybeExtract(rslt3);
return(rslt10);
} else {
dec_and_free(rslt3, 1);

// static-fixed
// #line 1900 "/home/jim/toccata/core.toc"
Value *rslt4 = dec_917(empty_list, n_0);
Value *rslt8;
FnArity *arity5 = findFnArity(repeat_2428, 2);
if(arity5 != (FnArity *)0 && !arity5->variadic) { FnType2 *fn7 = (FnType2 *)arity5->fn;


// dynamic fn type
// #line 1900 "/home/jim/toccata/core.toc"
rslt8 = fn7(arity5->closures, rslt4, v_1);
} else if(arity5 != (FnArity *)0 && arity5->variadic) { FnType1 *fn7 = (FnType1 *)arity5->fn;
List *dynArgs6 = empty_list;
dynArgs6 = (List *)listCons(v_1, dynArgs6);
dynArgs6 = (List *)listCons(rslt4, dynArgs6);

// dynamic fn type
// #line 1900 "/home/jim/toccata/core.toc"
rslt8 = fn7(arity5->closures, (Value *)dynArgs6);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)repeat_2428)->name, "core", 1900);
  abort();
}
dec_and_free(repeat_2428, 1);
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1900\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1900\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 1900 "/home/jim/toccata/core.toc"
Value *rslt9 = cons_282(empty_list, v_1, rslt8);
return(rslt9);
}

};};
Value *repeat_2436(List *closures, Value *n_0, Value *v_1) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1897\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1898\n");
#endif
abort();
}
return(repeat_2429(closures, n_0, v_1));
};
FnArity repeat_2435 = {FnArityType, -1, 2, (List *)0, 0, repeat_2436};
Function repeat_2437 = {FunctionType, -1, "repeat", 1, {&repeat_2435}};
Value *repeat_2428 = (Value *)&repeat_2437;


// --------- constantly -------------
Value *constantly_2439;
Value *anon_2452(List *closures) {

while (1) {
Value *val0;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs1[2] = {&val0, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs1);
incRef(val0, 1);

dec_and_free(closuresTail, 1);
return(val0);

};};
Value *anon_2451(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs2[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs2);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
return(val1);

};};
Value *anon_2450(List *closures, Value *arg0, Value *arg1) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val2, 1);

dec_and_free(closuresTail, 1);
return(val2);

};};
Value *anon_2449(List *closures, Value *arg0, Value *arg1, Value *arg2) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);
Value *val3;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs4[2] = {&val3, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs4);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
return(val3);

};};
Value *anon_2448(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);
Value *val4;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs5[2] = {&val4, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs5);
incRef(val4, 1);

dec_and_free(closuresTail, 1);
return(val4);

};};
Value *anon_2447(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);
Value *val5;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs6[2] = {&val5, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs6);
incRef(val5, 1);

dec_and_free(closuresTail, 1);
return(val5);

};};
Value *anon_2446(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);

dec_and_free(arg5, 1);
Value *val6;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs7[2] = {&val6, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs7);
incRef(val6, 1);

dec_and_free(closuresTail, 1);
return(val6);

};};
Value *anon_2445(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);

dec_and_free(arg5, 1);

dec_and_free(arg6, 1);
Value *val7;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs8[2] = {&val7, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs8);
incRef(val7, 1);

dec_and_free(closuresTail, 1);
return(val7);

};};
Value *anon_2444(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);

dec_and_free(arg5, 1);

dec_and_free(arg6, 1);

dec_and_free(arg7, 1);
Value *val8;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val8, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val8, 1);

dec_and_free(closuresTail, 1);
return(val8);

};};
Value *anon_2443(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7, Value *arg8) {

while (1) {

dec_and_free(arg0, 1);

dec_and_free(arg1, 1);

dec_and_free(arg2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);

dec_and_free(arg5, 1);

dec_and_free(arg6, 1);

dec_and_free(arg7, 1);

dec_and_free(arg8, 1);
Value *val9;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs10[2] = {&val9, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs10);
incRef(val9, 1);

dec_and_free(closuresTail, 1);
return(val9);

};};
Value *anon_2442(List *closures, Value *arg0) {

while (1) {
Value *args_1 = seq(empty_list, arg0);

dec_and_free(args_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs3[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs3);
incRef(val2, 1);

dec_and_free(closuresTail, 1);
return(val2);

};};
Value *constantly_2440(List *closures, Value *v_0) {
while (1) {
incRef(v_0, 10);
FnArity *anon_1 = malloc_fnArity();
anon_1->count = 0;
anon_1->variadic = 0;
anon_1->fn = anon_2452;
anon_1->closures = empty_list;
anon_1->closures = listCons((Value *)v_0, (List *)anon_1->closures);
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 0;
anon_2->fn = anon_2451;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)v_0, (List *)anon_2->closures);
FnArity *anon_3 = malloc_fnArity();
anon_3->count = 2;
anon_3->variadic = 0;
anon_3->fn = anon_2450;
anon_3->closures = empty_list;
anon_3->closures = listCons((Value *)v_0, (List *)anon_3->closures);
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 3;
anon_4->variadic = 0;
anon_4->fn = anon_2449;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)v_0, (List *)anon_4->closures);
FnArity *anon_5 = malloc_fnArity();
anon_5->count = 4;
anon_5->variadic = 0;
anon_5->fn = anon_2448;
anon_5->closures = empty_list;
anon_5->closures = listCons((Value *)v_0, (List *)anon_5->closures);
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 5;
anon_6->variadic = 0;
anon_6->fn = anon_2447;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)v_0, (List *)anon_6->closures);
FnArity *anon_7 = malloc_fnArity();
anon_7->count = 6;
anon_7->variadic = 0;
anon_7->fn = anon_2446;
anon_7->closures = empty_list;
anon_7->closures = listCons((Value *)v_0, (List *)anon_7->closures);
FnArity *anon_8 = malloc_fnArity();
anon_8->count = 7;
anon_8->variadic = 0;
anon_8->fn = anon_2445;
anon_8->closures = empty_list;
anon_8->closures = listCons((Value *)v_0, (List *)anon_8->closures);
FnArity *anon_9 = malloc_fnArity();
anon_9->count = 8;
anon_9->variadic = 0;
anon_9->fn = anon_2444;
anon_9->closures = empty_list;
anon_9->closures = listCons((Value *)v_0, (List *)anon_9->closures);
FnArity *anon_10 = malloc_fnArity();
anon_10->count = 9;
anon_10->variadic = 0;
anon_10->fn = anon_2443;
anon_10->closures = empty_list;
anon_10->closures = listCons((Value *)v_0, (List *)anon_10->closures);
FnArity *anon_11 = malloc_fnArity();
anon_11->count = 1;
anon_11->variadic = 1;
anon_11->fn = anon_2442;
anon_11->closures = empty_list;
anon_11->closures = listCons((Value *)v_0, (List *)anon_11->closures);
Function *anon_2465 = malloc_function(11);
anon_2465->name = "anon";
anon_2465->arityCount = 11;
anon_2465->arities[0] = anon_1;
anon_2465->arities[1] = anon_2;
anon_2465->arities[2] = anon_3;
anon_2465->arities[3] = anon_4;
anon_2465->arities[4] = anon_5;
anon_2465->arities[5] = anon_6;
anon_2465->arities[6] = anon_7;
anon_2465->arities[7] = anon_8;
anon_2465->arities[8] = anon_9;
anon_2465->arities[9] = anon_10;
anon_2465->arities[10] = anon_11;
Value *fn2441 = (Value *)anon_2465;
return(fn2441);

};};
FnArity constantly_2466 = {FnArityType, -1, 1, (List *)0, 0, constantly_2440};
Function constantly_2468 = {FunctionType, -1, "constantly", 1, {&constantly_2466}};
Value *constantly_2439 = (Value *)&constantly_2468;

struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str39 = {StringBufferType, -1, 1, 0, "0"};
Value *strPtr39 = (Value *)&str39;
Value *code_0_2469;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str40 = {StringBufferType, -1, 1, 0, "9"};
Value *strPtr40 = (Value *)&str40;
Value *code_9_2470;

// --------- str-to-int -------------
Value *str_to_int_2472;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[2];
} str41 = {StringBufferType, -1, 1, 0, "-"};
Value *strPtr41 = (Value *)&str41;

// --------- anon -------------
Value *fn2475;
Value *anon_2476(List *closures, Value *c_0) {
while (1) {
incRef(c_0, 1);

// static-fixed
// #line 1925 "/home/jim/toccata/core.toc"
Value *rslt1 = char_code_775(empty_list, c_0);
Value *c_2 = rslt1;
incRef(c_2, 5);
Value *orRslt3;

// static-fixed
// #line 1926 "/home/jim/toccata/core.toc"
Value *rslt4 = _EQ__703(empty_list, code_0_2469, c_2);
if (rslt4->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1926);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
abort();
}
orRslt3 = rslt4;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(_LT__659, 1);
dec_and_free(code_0_2469, 1);
dec_and_free(code_9_2470, 2);
dec_and_free(c_2, 4);
dec_and_free(_EQ__701, 1);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);

// static-fixed
// #line 1927 "/home/jim/toccata/core.toc"
Value *rslt5 = _EQ__703(empty_list, code_9_2470, c_2);
if (rslt5->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1927);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt5)));
abort();
}
orRslt3 = rslt5;
if (!isNothing(orRslt3,"",0)) {
dec_and_free(_LT__659, 1);
dec_and_free(code_0_2469, 1);
dec_and_free(code_9_2470, 1);
dec_and_free(c_2, 2);
return(orRslt3);
} else {
dec_and_free(orRslt3, 1);

// call-list
// #line 1928 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)code_9_2470, newList6);
newList6 = listCons((Value *)c_2, newList6);
newList6 = listCons((Value *)code_0_2469, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1928 "/home/jim/toccata/core.toc"
Value *rslt8 = _LT__660(empty_list, (Value *)rslt7);
return(rslt8);
}
}

};};
Value *anon_2478(List *closures, Value *c_0) {
switch (c_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c' at $TOCCATA_DIR/core.toc, line 1924\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, c_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1925\n$TOCCATA_DIR/core.toc:: 823 \n");
#endif
abort();
}
return(anon_2476(closures, c_0));
};
FnArity anon_2477 = {FnArityType, -1, 1, (List *)0, 0, anon_2478};
Function anon_2479 = {FunctionType, -1, "anon", 1, {&anon_2477}};
Value *fn2475 = (Value *)&anon_2479;


// --------- anon -------------
Value *fn2474;
Integer num8 = {IntegerType, -1, 10};
Value *numPtr8 = (Value *)&num8;
Value *anon_2480(List *closures, Value *n_0, Value *c_1) {
while (1) {
incRef(n_0, 1);
incRef(c_1, 1);
switch (numPtr8->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, numPtr8)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1931\n$TOCCATA_DIR/core.toc:: 952 \n$TOCCATA_DIR/core.toc:: 146 \n");
#endif
abort();
}

// static-fixed
// #line 1931 "/home/jim/toccata/core.toc"
Value *rslt2 = _STAR__924(empty_list, n_0, numPtr8);
switch (rslt2->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1931\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 108 \n");
#endif
abort();
}

// static-fixed
// #line 1931 "/home/jim/toccata/core.toc"
Value *rslt3 = char_code_775(empty_list, c_1);

// call-list
// #line 1931 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
newList4 = listCons((Value *)code_0_2469, newList4);
newList4 = listCons((Value *)rslt3, newList4);
Value *rslt5 = (Value *)newList4;

// static-variadic
// #line 1931 "/home/jim/toccata/core.toc"
Value *rslt6 = _MINUS__905(empty_list, (Value *)rslt5);
switch (rslt6->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 1931\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1931\n$TOCCATA_DIR/core.toc:: 718 \n$TOCCATA_DIR/core.toc:: 109 \n");
#endif
abort();
}

// static-fixed
// #line 1931 "/home/jim/toccata/core.toc"
Value *rslt7 = _PLUS__649(empty_list, rslt2, rslt6);
return(rslt7);

};};
Value *anon_2482(List *closures, Value *n_0, Value *c_1) {
switch (n_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'n' at $TOCCATA_DIR/core.toc, line 1930\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, n_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1931\n$TOCCATA_DIR/core.toc:: 952 \n$TOCCATA_DIR/core.toc:: 145 \n");
#endif
abort();
}
switch (c_1->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c' at $TOCCATA_DIR/core.toc, line 1930\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, c_1)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1931\n$TOCCATA_DIR/core.toc:: 823 \n");
#endif
abort();
}
return(anon_2480(closures, n_0, c_1));
};
FnArity anon_2481 = {FnArityType, -1, 2, (List *)0, 0, anon_2482};
Function anon_2483 = {FunctionType, -1, "anon", 1, {&anon_2481}};
Value *fn2474 = (Value *)&anon_2483;

Value *str_to_int_2473(List *closures, Value *int_str_0) {
while (1) {
incRef(int_str_0, 5);
Value *andRslt2;
Value *rslt3 = proto1Arg(&first_Implementations_336, "<nothing>/first", int_str_0, "core", 1921);
Value *mv_4 = rslt3;
incRef(mv_4, 2);
Value *andRslt5;
andRslt5 = mv_4;
if (isNothing(andRslt5,"",0)) {
dec_and_free(partial_719, 1);
dec_and_free(_EQ__701, 1);
dec_and_free(mv_4, 2);
} else {
dec_and_free(andRslt5, 1);

// type-known for extract
// #line 608 "/home/jim/toccata/core.toc"
Value *rslt6 = Maybe_extract_510(empty_list, mv_4);

// call-list
// #line 1921 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)strPtr41, newList7);
newList7 = listCons((Value *)_EQ__701, newList7);
Value *rslt8 = (Value *)newList7;

// static-variadic
// #line 1921 "/home/jim/toccata/core.toc"
Value *rslt9 = partial_720(empty_list, (Value *)rslt8);

// dynamic unknown type
// #line 1921 "/home/jim/toccata/core.toc"
Value *rslt13;
if((rslt9)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(rslt9->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1921\n",
extractStr(type_name(empty_list, rslt9)), rslt9->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt13 = _fn(_arity->closures, rslt9, rslt6);
} else {
FnArity *arity10 = findFnArity(rslt9, 1);
if(arity10 != (FnArity *)0 && !arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
rslt13 = fn12(arity10->closures, rslt6);
} else if(arity10 != (FnArity *)0 && arity10->variadic) {
FnType1 *fn12 = (FnType1 *)arity10->fn;
List *dynArgs11 = empty_list;
dynArgs11 = (List *)listCons(rslt6, dynArgs11);
rslt13 = fn12(arity10->closures, (Value *)dynArgs11);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)rslt9)->name);
  abort();
}
dec_and_free(rslt9, 1);
}
if (rslt13->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "$TOCCATA_DIR/core.toc",1921);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt13)));
abort();
}
andRslt5 = rslt13;
}
andRslt2 = andRslt5;
if (isNothing(andRslt2,"",0)) {
dec_and_free(numPtr4, 1);
dec_and_free(maybe_3, 1);
dec_and_free(int_str_0, 2);
} else {
dec_and_free(andRslt2, 1);
Value *rslt14 = proto1Arg(&rest_Implementations_344, "<nothing>/rest", int_str_0, "core", 1922);

// call-vector
// #line 1922 "/home/jim/toccata/core.toc"
Vector *newVect15 = empty_vect;
newVect15 = mutateVectConj(newVect15, numPtr4);
newVect15 = mutateVectConj(newVect15, rslt14);
Value *rslt16 = (Value *)newVect15;
switch (rslt16->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1922\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'Vector' From:              \n$TOCCATA_DIR/core.toc:: 1922\n$TOCCATA_DIR/core.toc:: 1922\n$TOCCATA_DIR/core.toc:: 1922\n");
#endif
abort();
}
switch (rslt16->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1922\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1922\n$TOCCATA_DIR/core.toc: 1922\ncore: 1922                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt16, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1922\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt16))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1922\n$TOCCATA_DIR/core.toc: 1922\ncore: 1922                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt16, 1);
Value *rslt16_0;
Value *rslt16_1;
Value *rslt16_2;
Value **rslt16_args[3] = {&rslt16_0, &rslt16_1, &rslt16_2};
destructValue("$TOCCATA_DIR/core.toc", "1922", (Value *)rslt16, 3, rslt16_args);
switch (rslt16_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1922\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt16_0)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1922\n$TOCCATA_DIR/core.toc:: 1922\n");
#endif
abort();
}
dec_and_free(rslt16_0, 1);
dec_and_free(rslt16_1, 1);
dec_and_free(rslt16_2, 1);
}

// static-fixed
// #line 1922 "/home/jim/toccata/core.toc"
Value *rslt17 = maybe_4(empty_list, rslt16);
andRslt2 = rslt17;
}
Value *eitherRslt1;
if (!isNothing(andRslt2,"",0)) {
eitherRslt1 = maybeExtract(andRslt2);
} else {
dec_and_free(andRslt2, 1);

// call-vector
// #line 1923 "/home/jim/toccata/core.toc"
Vector *newVect18 = empty_vect;
newVect18 = mutateVectConj(newVect18, numPtr3);
newVect18 = mutateVectConj(newVect18, int_str_0);
Value *rslt19 = (Value *)newVect18;
eitherRslt1 = rslt19;
}
Value *negate_22;
Value *int_str_23;
Value *tail_20;
Value **destArgs21[3] = {&negate_22, &int_str_23, &tail_20};
destructValue("core", "1921", (Value *)eitherRslt1, 3, destArgs21);
incRef(negate_22, 1);
switch (negate_22->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x' at $TOCCATA_DIR/core.toc, line 1921\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, negate_22)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1932\n$TOCCATA_DIR/core.toc:: 952 \n$TOCCATA_DIR/core.toc:: 145 \n");
#endif
abort();
}
incRef(int_str_23, 1);

dec_and_free(tail_20, 1);

// static-fixed
// #line 1924 "/home/jim/toccata/core.toc"
Value *rslt24 = take_while_372(empty_list, int_str_23, fn2475);
Value *rslt25 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", rslt24, numPtr0, fn2474, "core", 1924);
Value *magnitude_26 = rslt25;
switch (magnitude_26->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 1924\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, magnitude_26)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1932\n$TOCCATA_DIR/core.toc:: 952 \n$TOCCATA_DIR/core.toc:: 146 \n");
#endif
abort();
}
incRef(magnitude_26, 1);
switch (magnitude_26->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'y' at $TOCCATA_DIR/core.toc, line 1924\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, magnitude_26)));
fprintf(stderr, "'Integer' From:             \n$TOCCATA_DIR/core.toc:: 1932\n$TOCCATA_DIR/core.toc:: 952 \n$TOCCATA_DIR/core.toc:: 146 \n");
#endif
abort();
}

// static-fixed
// #line 1932 "/home/jim/toccata/core.toc"
Value *rslt27 = _STAR__924(empty_list, negate_22, magnitude_26);
return(rslt27);

};};
Value *str_to_int_2485(List *closures, Value *int_str_0) {
switch (int_str_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'int-str' at $TOCCATA_DIR/core.toc, line 1919\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, int_str_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1920\n");
#endif
abort();
}
return(str_to_int_2473(closures, int_str_0));
};
FnArity str_to_int_2484 = {FnArityType, -1, 1, (List *)0, 0, str_to_int_2485};
Function str_to_int_2486 = {FunctionType, -1, "str-to-int", 1, {&str_to_int_2484}};
Value *str_to_int_2472 = (Value *)&str_to_int_2486;

Value *type_val_2487_2488;
ProtoImpls protoImpls2491;
ProtoImpls protoImpls2493;
Value *dispatchFnPtr2489;
Value *protoImpl2490(List *closures, Value *arg);
Value *protoImpl2492(List *closures, Value *arg1, Value *arg2);
Value *arityImpl2498(List *closures, Value *);
Value *arityImpl2499(List *closures, Value *);
Value *arityImpl2500(List *closures, Value *, Value *);
Value *arityImpl2501(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[10];
} str42 = {StringBufferType, -1, 9, 0, "<TypeCon "};
Value *strPtr42 = (Value *)&str42;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str43 = {StringBufferType, -1, 7, 0, "HashSet"};
Value *strPtr43 = (Value *)&str43;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[3];
} str44 = {StringBufferType, -1, 2, 0, " ["};
Value *strPtr44 = (Value *)&str44;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[8];
} str45 = {StringBufferType, -1, 7, 0, "set-map"};
Value *strPtr45 = (Value *)&str45;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[3];
} str46 = {StringBufferType, -1, 2, 0, "]>"};
Value *strPtr46 = (Value *)&str46;
Value *arityImpl2498(List *closures, Value *z_0) {
while (1) {

dec_and_free(z_0, 1);
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr46, newList1);
newList1 = listCons((Value *)strPtr45, newList1);
newList1 = listCons((Value *)strPtr44, newList1);
newList1 = listCons((Value *)strPtr43, newList1);
newList1 = listCons((Value *)strPtr42, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt2);

};};
FnArity staticArity2502 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2498};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[22];
} str47 = {StringBufferType, -1, 21, 0, "*HashSet constructor*"};
Value *strPtr47 = (Value *)&str47;
Value *arityImpl2499(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr47);

};};
FnArity staticArity2504 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2499};
Value *arityImpl2500(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
Value *rslt2 = reified_get_type_31(empty_list, type_val_2487_2488);
Value *rslt3 = reified_get_type_31(empty_list, y_1);
Value *rslt4 = Integer__EQ__STAR__475(empty_list, rslt2, rslt3);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt4);

};};
FnArity staticArity2506 = {FnArityType, -1, 2, (List *)0, 0, arityImpl2500};
Value *arityImpl2501(List *closures, Value *arg0, Value *set_map_1) {
while (1) {

dec_and_free(arg0, 1);
incRef(set_map_1, 1);
Vector *newVect2 = empty_vect;
newVect2 = mutateVectConj(newVect2, set_map_1);
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From: \n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value **rslt3_args[2] = {&rslt3_0, &rslt3_1};
destructValue("", "0", (Value *)rslt3, 2, rslt3_args);
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
}
Value *rslt4 = new_type_value_69(empty_list, type_val_2487_2488, rslt3);
return(rslt4);

};};
Value *paramChecker2509(List *closures, Value *arg0, Value *set_map_1) {
switch (set_map_1->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map'\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, set_map_1)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}
return(arityImpl2501(closures, arg0, set_map_1));
};
FnArity staticArity2508 = {FnArityType, -1, 2, (List *)0, 0, paramChecker2509};
ReifiedVal reifiedStatic2510 = {31, -1, (Value *)0, 0, {}};
Value *reifiedPtr2511 = (Value *)&reifiedStatic2510;
Value *HashSet_string_list_2538(List *closures, Value *);
Value *HashSet__EQ__STAR__2539(List *closures, Value *, Value *);
Value *HashSet_vec_2540(List *closures, Value *);
Value *HashSet_seq_2541(List *closures, Value *);
Value *HashSet_type_name_2542(List *closures, Value *);
Value *HashSet_has_field_2543(List *closures, Value *, Value *);
Value *HashSet_set_map_2544(List *closures, Value *, Value *);
Value *HashSet_set_map_2545(List *closures, Value *);
Value *HashSet_get_2546(List *closures, Value *, Value *);
Value *HashSet_get_2547(List *closures, Value *, Value *);
Value *HashSet_zero_2548(List *closures, Value *);
Value *HashSet_comp_STAR__2549(List *closures, Value *, Value *);
Value *HashSet_sha1_update_2550(List *closures, Value *, Value *);
Value *HashSet_sha1_2551(List *closures, Value *);
Value *HashSet_sha1_update_2552(List *closures, Value *, Value *);
Value *HashSet_sha1_2553(List *closures, Value *);
Value *HashSet_invoke_2554(List *closures, Value *, Value *);
Value *HashSet_flat_map_2555(List *closures, Value *, Value *);
Value *HashSet_wrap_2556(List *closures, Value *, Value *);
Value *HashSet_map_2557(List *closures, Value *, Value *);
Value *HashSet_empty_QM__2558(List *closures, Value *);
Value *HashSet_empty_2559(List *closures, Value *);
Value *HashSet_count_2560(List *closures, Value *);
Value *HashSet_conj_2561(List *closures, Value *, Value *);
Value *HashSet_reduce_2562(List *closures, Value *, Value *, Value *);
Value *HashSet_assoc_STAR__2563(List *closures, Value *, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[3];
} str48 = {StringBufferType, -1, 2, 0, "#{"};
Value *strPtr48 = (Value *)&str48;
Value *HashSet_string_list_2538(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);
Value *rslt1 = reified_type_args_25(empty_list, arg0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);

// call-list
// #line 1940 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
newList5 = listCons((Value *)strPtr48, newList5);
Value *rslt6 = (Value *)newList5;
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n");
#endif
abort();
}
switch (rslt6->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1940                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt6, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt6))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1940                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt6, 1);
Value *rslt6_0;
Value *rslt6_1;
Value **rslt6_args[2] = {&rslt6_0, &rslt6_1};
destructValue("", "0", (Value *)rslt6, 2, rslt6_args);
switch (rslt6_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt6_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n");
#endif
abort();
}
dec_and_free(rslt6_0, 1);
dec_and_free(rslt6_1, 1);
}
Value *rslt7 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_4, "core", 1941);
Value *l_8 = rslt7;
switch (l_8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_8, 1);
switch (l_8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt9 = list_map_93(empty_list, l_8, string_list_795);
switch (rslt9->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 660\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 660\n$TOCCATA_DIR/core.toc:: 104\n");
#endif
abort();
}

// static-fixed
// #line 660 "/home/jim/toccata/core.toc"
Value *rslt10 = list_concat_99(empty_list, rslt9);

// static-fixed
// #line 1941 "/home/jim/toccata/core.toc"
Value *rslt11 = interpose_863(empty_list, rslt10, strPtr4);

// call-list
// #line 1943 "/home/jim/toccata/core.toc"
List *newList12 = empty_list;
newList12 = listCons((Value *)strPtr28, newList12);
Value *rslt13 = (Value *)newList12;

// call-list
// #line 1940 "/home/jim/toccata/core.toc"
List *newList14 = empty_list;
newList14 = listCons((Value *)rslt13, newList14);
newList14 = listCons((Value *)rslt11, newList14);
Value *rslt15 = (Value *)newList14;
switch (rslt15->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n");
#endif
abort();
}
switch (rslt15->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1940                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1940                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15, 1);
Value *rslt15_0;
Value *rslt15_1;
Value *rslt15_2;
Value **rslt15_args[3] = {&rslt15_0, &rslt15_1, &rslt15_2};
destructValue("$TOCCATA_DIR/core.toc", "1941", (Value *)rslt15, 3, rslt15_args);
switch (rslt15_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1943\n");
#endif
abort();
}
switch (rslt15_1->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt15_1)));
fprintf(stderr, "'Sequence' From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1943                 \n");
#endif
abort();
}
if (countSeq(incRef(rslt15_1, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt15_1))->numVal);
fprintf(stderr, "From: \nMin Length From:           \n$TOCCATA_DIR/core.toc: 1940\n$TOCCATA_DIR/core.toc: 1940\ncore: 1943                 \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt15_1, 1);
Value *rslt15_1_0;
Value *rslt15_1_1;
Value **rslt15_1_args[2] = {&rslt15_1_0, &rslt15_1_1};
destructValue("$TOCCATA_DIR/core.toc", "1941", (Value *)rslt15_1, 2, rslt15_1_args);
switch (rslt15_1_0->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1941\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt15_1_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1940\n$TOCCATA_DIR/core.toc:: 1940\n");
#endif
abort();
}
dec_and_free(rslt15_1_0, 1);
dec_and_free(rslt15_1_1, 1);
}
dec_and_free(rslt15_0, 1);
dec_and_free(rslt15_1, 1);
dec_and_free(rslt15_2, 1);
}

// type-known for comp*
// #line 1940 "/home/jim/toccata/core.toc"
Value *rslt16 = List_comp_STAR__566(empty_list, rslt6, rslt15);
switch (rslt16->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt16)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt16);

};};
Value *HashSet_string_list_2565(List *closures, Value *arg0) {
switch (arg0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_string_list_2538(closures, arg0));
};
FnArity HashSet_string_list_2564 = {FnArityType, -1, 1, (List *)0, 0, HashSet_string_list_2565};
Value *HashSet__EQ__STAR__2539(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 3);
Value *andRslt2;
Value *rslt3 = reified_get_type_31(empty_list, x_0);
Value *rslt4 = reified_get_type_31(empty_list, y_1);
Value *rslt5 = Integer__EQ__STAR__475(empty_list, rslt3, rslt4);
andRslt2 = rslt5;
if (isNothing(andRslt2,"",0)) {
dec_and_free(y_1, 2);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
dec_and_free(reified_type_args_24, 2);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt6 = reified_type_args_25(empty_list, x_0);
Value *rslt7 = reified_type_args_25(empty_list, y_1);
Value *rslt8 = Vector__EQ__STAR__1485(empty_list, rslt6, rslt7);
andRslt2 = rslt8;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt9 = maybe_4(empty_list, x_0);
switch (rslt9->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt9);
}
}

};};
FnArity HashSet__EQ__STAR__2566 = {FnArityType, -1, 2, (List *)0, 0, HashSet__EQ__STAR__2539};
Value *HashSet_vec_2540(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, coll_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);
Value *rslt5 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_4, "core", 2006);

// type-known for vec
// #line 2006 "/home/jim/toccata/core.toc"
Value *rslt6 = List_vec_634(empty_list, rslt5);
switch (rslt6->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 2006\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'Vector' From:             \n$TOCCATA_DIR/core.toc:: 419\n");
#endif
abort();
}
return(rslt6);

};};
Value *HashSet_vec_2569(List *closures, Value *coll_0) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_vec_2540(closures, coll_0));
};
FnArity HashSet_vec_2568 = {FnArityType, -1, 1, (List *)0, 0, HashSet_vec_2569};
Value *HashSet_seq_2541(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, coll_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);
Value *rslt5 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_4, "core", 2009);
switch (rslt5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 2009\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 415\n");
#endif
abort();
}
return(rslt5);

};};
Value *HashSet_seq_2571(List *closures, Value *coll_0) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_seq_2541(closures, coll_0));
};
FnArity HashSet_seq_2570 = {FnArityType, -1, 1, (List *)0, 0, HashSet_seq_2571};
Value *HashSet_type_name_2542(List *closures, Value *x_0) {
while (1) {

dec_and_free(x_0, 1);
return(strPtr43);

};};
FnArity HashSet_type_name_2572 = {FnArityType, -1, 1, (List *)0, 0, HashSet_type_name_2542};
Value *HashSet_has_field_2543(List *closures, Value *x_0, Value *field_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(field_1, 1);
Value *orRslt2;
Value *rslt3 = identical_464(empty_list, dispatchFnPtr2489, field_1);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(nothing_8, 1);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
return(nothing_8);
}

};};
FnArity HashSet_has_field_2574 = {FnArityType, -1, 2, (List *)0, 0, HashSet_has_field_2543};
Value *HashSet_set_map_2544(List *closures, Value *value_0, Value *set_map_1) {
while (1) {
incRef(value_0, 3);
incRef(set_map_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, value_0);
Value *rslt3 = Vector_store_1504(empty_list, rslt2, numPtr0, set_map_1);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 492\n");
#endif
abort();
}
Value *rslt4 = Maybe_extract_510(empty_list, rslt3);
Value *rslt5 = make_value_75(empty_list, value_0, rslt4);
return(rslt5);

};};
Value *HashSet_set_map_2577(List *closures, Value *value_0, Value *set_map_1) {
switch (set_map_1->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map'\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, set_map_1)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}
return(HashSet_set_map_2544(closures, value_0, set_map_1));
};
FnArity HashSet_set_map_2576 = {FnArityType, -1, 2, (List *)0, 0, HashSet_set_map_2577};
Value *HashSet_set_map_2545(List *closures, Value *value_0) {
while (1) {
incRef(value_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, value_0);
Value *rslt2 = Vector_nth_1503(empty_list, rslt1, numPtr0);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
Value *rslt3 = Maybe_extract_510(empty_list, rslt2);
return(rslt3);

};};
FnArity HashSet_set_map_2578 = {FnArityType, -1, 1, (List *)0, 0, HashSet_set_map_2545};
Value *HashSet_get_2546(List *closures, Value *x_0, Value *field_1) {
while (1) {
incRef(x_0, 3);
incRef(field_1, 3);
Value *andRslt2;
Value *rslt3 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt7 = _fn(_arity->closures, field_1, x_0);
} else {
FnArity *arity4 = findFnArity(field_1, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
rslt7 = fn6(arity4->closures, x_0);
} else if(arity4 != (FnArity *)0 && arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(x_0, dynArgs5);
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt8 = maybe_4(empty_list, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 509\n");
#endif
abort();
}
return(rslt8);
}

};};
FnArity HashSet_get_2580 = {FnArityType, -1, 2, (List *)0, 0, HashSet_get_2546};
Value *HashSet_get_2547(List *closures, Value *m_0, Value *k_1) {
while (1) {
incRef(m_0, 1);
incRef(k_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, m_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", set_map_5, k_1, "core", 1968);
switch (rslt6->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1968\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 509\n");
#endif
abort();
}
return(rslt6);

};};
Value *HashSet_get_2583(List *closures, Value *m_0, Value *k_1) {
switch (m_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'm'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, m_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_get_2547(closures, m_0, k_1));
};
FnArity HashSet_get_2582 = {FnArityType, -1, 2, (List *)0, 0, HashSet_get_2583};
Value *HashSet_zero_2548(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);
Value *rslt1 = reified_type_args_25(empty_list, arg0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);

dec_and_free(set_map_4, 1);

dec_and_free(tail_2, 1);

// call-list
// #line 1985 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
Value *rslt6 = (Value *)newList5;

// static-variadic
// #line 1985 "/home/jim/toccata/core.toc"
Value *rslt7 = hash_map_2020(empty_list, (Value *)rslt6);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1985\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1985\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1985 "/home/jim/toccata/core.toc"
Value *rslt8 = arityImpl2501(empty_list, reifiedPtr2511, rslt7);
return(rslt8);

};};
Value *HashSet_zero_2585(List *closures, Value *arg0) {
switch (arg0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_zero_2548(closures, arg0));
};
FnArity HashSet_zero_2584 = {FnArityType, -1, 1, (List *)0, 0, HashSet_zero_2585};
Value *HashSet_comp_STAR__2549(List *closures, Value *mval_0, Value *mvals_1) {
while (1) {
incRef(mval_0, 1);
incRef(mvals_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, mval_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto2Arg(&map_Implementations_267, "<nothing>/map", mvals_1, dispatchFnPtr2489, "core", 1987);
Value *rslt7 = proto2Arg(&comp_STAR__Implementations_241, "<nothing>/comp*", set_map_5, rslt6, "core", 1987);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1987\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1987\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1987 "/home/jim/toccata/core.toc"
Value *rslt8 = arityImpl2501(empty_list, reifiedPtr2511, rslt7);
return(rslt8);

};};
Value *HashSet_comp_STAR__2587(List *closures, Value *mval_0, Value *mvals_1) {
switch (mval_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mval'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, mval_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_comp_STAR__2549(closures, mval_0, mvals_1));
};
FnArity HashSet_comp_STAR__2586 = {FnArityType, -1, 2, (List *)0, 0, HashSet_comp_STAR__2587};
Value *HashSet_sha1_update_2550(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 3);
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = reified_type_args_25(empty_list, x_0);
Value *rslt4 = Vector_sha1_update_1501(empty_list, rslt3, ctxt_1);
return(rslt4);

};};
FnArity HashSet_sha1_update_2588 = {FnArityType, -1, 2, (List *)0, 0, HashSet_sha1_update_2550};
Value *HashSet_sha1_2551(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *rslt1 = sha1_init_446(empty_list);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "sha1-update", x_0, rslt1, "", 0);
Value *rslt3 = sha1_finalize_452(empty_list, rslt2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt3);

};};
FnArity HashSet_sha1_2590 = {FnArityType, -1, 1, (List *)0, 0, HashSet_sha1_2551};

// --------- anon -------------
Value *fn2592;
Value *anon_2593(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1956);
return(rslt2);

};};
FnArity anon_2594 = {FnArityType, -1, 2, (List *)0, 0, anon_2593};
Function anon_2596 = {FunctionType, -1, "anon", 1, {&anon_2594}};
Value *fn2592 = (Value *)&anon_2596;

Value *HashSet_sha1_update_2552(List *closures, Value *s_0, Value *ctxt_1) {
while (1) {
incRef(s_0, 3);
incRef(ctxt_1, 3);
Value *rslt2 = reified_type_args_25(empty_list, s_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);

// static-fixed
// #line 1954 "/home/jim/toccata/core.toc"
Value *rslt6 = sha1_update_type_1262(empty_list, s_0, ctxt_1);

dec_and_free(rslt6, 1);
Value *rslt7 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", set_map_5, "core", 1955);
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1955\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1955\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1955 "/home/jim/toccata/core.toc"
Value *rslt8 = List_reduce_635(empty_list, rslt7, ctxt_1, fn2592);
return(rslt8);

};};
Value *HashSet_sha1_update_2598(List *closures, Value *s_0, Value *ctxt_1) {
switch (s_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_sha1_update_2552(closures, s_0, ctxt_1));
};
FnArity HashSet_sha1_update_2597 = {FnArityType, -1, 2, (List *)0, 0, HashSet_sha1_update_2598};

// --------- anon -------------
Value *fn2599;
Value *anon_2600(List *closures, Value *ctxt_0, Value *x_1) {
while (1) {
incRef(ctxt_0, 1);
incRef(x_1, 1);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "<nothing>/sha1-update", x_1, ctxt_0, "core", 1963);
return(rslt2);

};};
FnArity anon_2601 = {FnArityType, -1, 2, (List *)0, 0, anon_2600};
Function anon_2603 = {FunctionType, -1, "anon", 1, {&anon_2601}};
Value *fn2599 = (Value *)&anon_2603;

Value *HashSet_sha1_2553(List *closures, Value *s_0) {
while (1) {
incRef(s_0, 3);
Value *rslt1 = reified_type_args_25(empty_list, s_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);

// static-fixed
// #line 1960 "/home/jim/toccata/core.toc"
Value *rslt5 = sha1_init_446(empty_list);
Value *ctxt_6 = rslt5;
incRef(ctxt_6, 5);

// static-fixed
// #line 1961 "/home/jim/toccata/core.toc"
Value *rslt7 = sha1_update_type_1262(empty_list, s_0, ctxt_6);

dec_and_free(rslt7, 1);
Value *rslt8 = proto1Arg(&seq_Implementations_333, "<nothing>/seq", set_map_4, "core", 1962);
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1962\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1962\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1962 "/home/jim/toccata/core.toc"
Value *rslt9 = List_reduce_635(empty_list, rslt8, ctxt_6, fn2599);

dec_and_free(rslt9, 1);

// static-fixed
// #line 1964 "/home/jim/toccata/core.toc"
Value *rslt10 = sha1_finalize_452(empty_list, ctxt_6);
switch (rslt10->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1964\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt10)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt10);

};};
Value *HashSet_sha1_2605(List *closures, Value *s_0) {
switch (s_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_sha1_2553(closures, s_0));
};
FnArity HashSet_sha1_2604 = {FnArityType, -1, 1, (List *)0, 0, HashSet_sha1_2605};
Value *HashSet_invoke_2554(List *closures, Value *arg0, Value *v_1) {
while (1) {
incRef(arg0, 1);
incRef(v_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, arg0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto2Arg(&get_Implementations_413, "<nothing>/get", set_map_5, v_1, "core", 1950);
return(rslt6);

};};
Value *HashSet_invoke_2607(List *closures, Value *arg0, Value *v_1) {
switch (arg0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_invoke_2554(closures, arg0, v_1));
};
FnArity HashSet_invoke_2606 = {FnArityType, -1, 2, (List *)0, 0, HashSet_invoke_2607};
Value *anon_2610(List *closures, Value *v_0) {

while (1) {
incRef(v_0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs7[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs7);
incRef(val1, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 1993 "/home/jim/toccata/core.toc"
Value *rslt5;
if((val1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 1993\n",
extractStr(type_name(empty_list, val1)), val1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt5 = _fn(_arity->closures, val1, v_0);
} else {
FnArity *arity2 = findFnArity(val1, 1);
if(arity2 != (FnArity *)0 && !arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
rslt5 = fn4(arity2->closures, v_0);
} else if(arity2 != (FnArity *)0 && arity2->variadic) {
FnType1 *fn4 = (FnType1 *)arity2->fn;
List *dynArgs3 = empty_list;
dynArgs3 = (List *)listCons(v_0, dynArgs3);
rslt5 = fn4(arity2->closures, (Value *)dynArgs3);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val1)->name);
  abort();
}
dec_and_free(val1, 1);
}
Value *rslt6 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", rslt5, "core", 1993);
return(rslt6);

};};
Value *HashSet_flat_map_2555(List *closures, Value *mval_0, Value *func_1) {
while (1) {
incRef(mval_0, 1);
Value *rslt2 = reified_type_args_25(empty_list, mval_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);

// call-list
// #line 1991 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1991 "/home/jim/toccata/core.toc"
Value *rslt8 = hash_map_2020(empty_list, (Value *)rslt7);
switch (rslt8->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1991\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1991\n$TOCCATA_DIR/core.toc:: 1991\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
Value *rslt9 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_5, "core", 1991);
Value *l_10 = rslt9;
switch (l_10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1991\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
incRef(l_10, 1);
switch (l_10->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, l_10)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 651\n$TOCCATA_DIR/core.toc:: 100\n");
#endif
abort();
}
FnArity *anon_11 = malloc_fnArity();
anon_11->count = 1;
anon_11->variadic = 0;
anon_11->fn = anon_2610;
anon_11->closures = empty_list;
anon_11->closures = listCons((Value *)func_1, (List *)anon_11->closures);
Function *anon_2613 = malloc_function(1);
anon_2613->name = "anon";
anon_2613->arityCount = 1;
anon_2613->arities[0] = anon_11;
Value *fn2609 = (Value *)anon_2613;

// static-fixed
// #line 651 "/home/jim/toccata/core.toc"
Value *rslt12 = list_map_93(empty_list, l_10, fn2609);
Value *rslt13 = proto2Arg(&comp_STAR__Implementations_241, "<nothing>/comp*", rslt8, rslt12, "core", 1991);
switch (rslt13->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1991\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt13)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1991\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1991 "/home/jim/toccata/core.toc"
Value *rslt14 = arityImpl2501(empty_list, reifiedPtr2511, rslt13);
return(rslt14);

};};
Value *HashSet_flat_map_2615(List *closures, Value *mval_0, Value *func_1) {
switch (mval_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mval'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, mval_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_flat_map_2555(closures, mval_0, func_1));
};
FnArity HashSet_flat_map_2614 = {FnArityType, -1, 2, (List *)0, 0, HashSet_flat_map_2615};
Value *HashSet_wrap_2556(List *closures, Value *x_0, Value *v_1) {
while (1) {
incRef(x_0, 1);
incRef(v_1, 3);
Value *rslt2 = reified_type_args_25(empty_list, x_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);

dec_and_free(set_map_5, 1);

dec_and_free(tail_3, 1);

// call-list
// #line 1995 "/home/jim/toccata/core.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)v_1, newList6);
newList6 = listCons((Value *)v_1, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 1995 "/home/jim/toccata/core.toc"
Value *rslt8 = hash_map_2020(empty_list, (Value *)rslt7);
switch (rslt8->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1995\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1995\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1995 "/home/jim/toccata/core.toc"
Value *rslt9 = arityImpl2501(empty_list, reifiedPtr2511, rslt8);
return(rslt9);

};};
Value *HashSet_wrap_2617(List *closures, Value *x_0, Value *v_1) {
switch (x_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'x'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, x_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_wrap_2556(closures, x_0, v_1));
};
FnArity HashSet_wrap_2616 = {FnArityType, -1, 2, (List *)0, 0, HashSet_wrap_2617};
Value *anon_2619(List *closures, Value *m_0, Value *v_1) {

while (1) {
incRef(m_0, 1);
incRef(v_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val2, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 2001 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 2001\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, v_1);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, v_1);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(v_1, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}
Value *new_v_7 = rslt6;
incRef(new_v_7, 3);
Value *rslt8 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, new_v_7, new_v_7, "core", 2002);
return(rslt8);

};};
Value *HashSet_map_2557(List *closures, Value *v_0, Value *f_1) {
while (1) {
incRef(v_0, 1);
Value *rslt2 = reified_type_args_25(empty_list, v_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_5, "core", 1998);
switch (rslt6->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1998\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1998\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 1999 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
Value *rslt8 = (Value *)newList7;

// static-variadic
// #line 1999 "/home/jim/toccata/core.toc"
Value *rslt9 = hash_map_2020(empty_list, (Value *)rslt8);
switch (rslt9->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1999\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1998\n$TOCCATA_DIR/core.toc:: 1998\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
FnArity *anon_10 = malloc_fnArity();
anon_10->count = 2;
anon_10->variadic = 0;
anon_10->fn = anon_2619;
anon_10->closures = empty_list;
anon_10->closures = listCons((Value *)f_1, (List *)anon_10->closures);
Function *anon_2622 = malloc_function(1);
anon_2622->name = "anon";
anon_2622->arityCount = 1;
anon_2622->arities[0] = anon_10;
Value *fn2618 = (Value *)anon_2622;

// type-known for reduce
// #line 1998 "/home/jim/toccata/core.toc"
Value *rslt11 = List_reduce_635(empty_list, rslt6, rslt9, fn2618);
switch (rslt11->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1998\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt11)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1998\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1998 "/home/jim/toccata/core.toc"
Value *rslt12 = arityImpl2501(empty_list, reifiedPtr2511, rslt11);
return(rslt12);

};};
Value *HashSet_map_2624(List *closures, Value *v_0, Value *f_1) {
switch (v_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'v'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, v_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_map_2557(closures, v_0, f_1));
};
FnArity HashSet_map_2623 = {FnArityType, -1, 2, (List *)0, 0, HashSet_map_2624};
Value *HashSet_empty_QM__2558(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 3);
Value *rslt1 = reified_type_args_25(empty_list, coll_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);
Value *andRslt5;
Value *rslt6 = proto1Arg(&empty_QM__Implementations_305, "<nothing>/empty?", set_map_4, "core", 1972);
andRslt5 = rslt6;
if (isNothing(andRslt5,"",0)) {
dec_and_free(maybe_3, 1);
dec_and_free(coll_0, 2);
return(nothing);
} else {
dec_and_free(andRslt5, 1);

// static-fixed
// #line 1973 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_4(empty_list, coll_0);
switch (rslt7->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1973\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 377\n");
#endif
abort();
}
return(rslt7);
}

};};
Value *HashSet_empty_QM__2626(List *closures, Value *coll_0) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_empty_QM__2558(closures, coll_0));
};
FnArity HashSet_empty_QM__2625 = {FnArityType, -1, 1, (List *)0, 0, HashSet_empty_QM__2626};
Value *HashSet_empty_2559(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, coll_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);

dec_and_free(set_map_4, 1);

dec_and_free(tail_2, 1);

// call-list
// #line 1975 "/home/jim/toccata/core.toc"
List *newList5 = empty_list;
Value *rslt6 = (Value *)newList5;

// static-variadic
// #line 1975 "/home/jim/toccata/core.toc"
Value *rslt7 = hash_map_2020(empty_list, (Value *)rslt6);
switch (rslt7->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1975\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1975\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1975 "/home/jim/toccata/core.toc"
Value *rslt8 = arityImpl2501(empty_list, reifiedPtr2511, rslt7);
return(rslt8);

};};
Value *HashSet_empty_2628(List *closures, Value *coll_0) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_empty_2559(closures, coll_0));
};
FnArity HashSet_empty_2627 = {FnArityType, -1, 1, (List *)0, 0, HashSet_empty_2628};
Value *HashSet_count_2560(List *closures, Value *coll_0) {
while (1) {
incRef(coll_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, coll_0);
Value *set_map_4;
Value *tail_2;
Value **destArgs3[2] = {&set_map_4, &tail_2};
destructValue("core", "1935", (Value *)rslt1, 2, destArgs3);
incRef(set_map_4, 1);

dec_and_free(tail_2, 1);
Value *rslt5 = proto1Arg(&count_Implementations_310, "<nothing>/count", set_map_4, "core", 1977);
switch (rslt5->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 1977\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 381\n");
#endif
abort();
}
return(rslt5);

};};
Value *HashSet_count_2630(List *closures, Value *coll_0) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_count_2560(closures, coll_0));
};
FnArity HashSet_count_2629 = {FnArityType, -1, 1, (List *)0, 0, HashSet_count_2630};
Value *HashSet_conj_2561(List *closures, Value *coll_0, Value *value_1) {
while (1) {
incRef(coll_0, 1);
incRef(value_1, 3);
Value *rslt2 = reified_type_args_25(empty_list, coll_0);
Value *set_map_5;
Value *tail_3;
Value **destArgs4[2] = {&set_map_5, &tail_3};
destructValue("core", "1935", (Value *)rslt2, 2, destArgs4);
incRef(set_map_5, 1);

dec_and_free(tail_3, 1);
Value *rslt6 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", set_map_5, value_1, value_1, "core", 1979);
switch (rslt6->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 1979\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt6)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 1979\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 1979 "/home/jim/toccata/core.toc"
Value *rslt7 = arityImpl2501(empty_list, reifiedPtr2511, rslt6);
return(rslt7);

};};
Value *HashSet_conj_2632(List *closures, Value *coll_0, Value *value_1) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_conj_2561(closures, coll_0, value_1));
};
FnArity HashSet_conj_2631 = {FnArityType, -1, 2, (List *)0, 0, HashSet_conj_2632};
Value *HashSet_reduce_2562(List *closures, Value *coll_0, Value *result_1, Value *f_2) {
while (1) {
incRef(coll_0, 1);
incRef(result_1, 1);
incRef(f_2, 1);
Value *rslt3 = reified_type_args_25(empty_list, coll_0);
Value *set_map_6;
Value *tail_4;
Value **destArgs5[2] = {&set_map_6, &tail_4};
destructValue("core", "1935", (Value *)rslt3, 2, destArgs5);
incRef(set_map_6, 1);

dec_and_free(tail_4, 1);
Value *rslt7 = proto1Arg(&vals_Implementations_402, "<nothing>/vals", set_map_6, "core", 1981);
switch (rslt7->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 1981\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt7)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 1981\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 1981 "/home/jim/toccata/core.toc"
Value *rslt8 = List_reduce_635(empty_list, rslt7, result_1, f_2);
return(rslt8);

};};
Value *HashSet_reduce_2634(List *closures, Value *coll_0, Value *result_1, Value *f_2) {
switch (coll_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'coll'\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, coll_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 1935\n");
#endif
abort();
}
return(HashSet_reduce_2562(closures, coll_0, result_1, f_2));
};
FnArity HashSet_reduce_2633 = {FnArityType, -1, 3, (List *)0, 0, HashSet_reduce_2634};
Value *HashSet_assoc_STAR__2563(List *closures, Value *x_0, Value *field_1, Value *new_value_2, Value *arg3, Value *arg4) {
while (1) {
incRef(x_0, 5);
incRef(field_1, 3);
incRef(new_value_2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);
Value *orRslt5;
Value *andRslt6;
Value *rslt7 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt7->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
abort();
}
andRslt6 = rslt7;
if (isNothing(andRslt6,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(new_value_2, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt6, 1);
Value *rslt11;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt11 = _fn(_arity->closures, field_1, x_0, new_value_2);
} else {
FnArity *arity8 = findFnArity(field_1, 2);
if(arity8 != (FnArity *)0 && !arity8->variadic) {
FnType2 *fn10 = (FnType2 *)arity8->fn;
rslt11 = fn10(arity8->closures, x_0, new_value_2);
} else if(arity8 != (FnArity *)0 && arity8->variadic) {
FnType1 *fn10 = (FnType1 *)arity8->fn;
List *dynArgs9 = empty_list;
dynArgs9 = (List *)listCons(new_value_2, dynArgs9);
dynArgs9 = (List *)listCons(x_0, dynArgs9);
rslt11 = fn10(arity8->closures, (Value *)dynArgs9);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt12 = maybe_4(empty_list, rslt11);
andRslt6 = rslt12;
}
orRslt5 = andRslt6;
if (!isNothing(orRslt5,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);

} else {
dec_and_free(orRslt5, 1);
Value *rslt13 = maybe_4(empty_list, x_0);
orRslt5 = rslt13;
}
switch (orRslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, orRslt5)));
fprintf(stderr, "'Maybe' From: \n");
#endif
abort();
}
Value *rslt14 = Maybe_extract_510(empty_list, orRslt5);
return(rslt14);

};};
FnArity HashSet_assoc_STAR__2635 = {FnArityType, -1, 5, (List *)0, 0, HashSet_assoc_STAR__2563};
ReifiedVal reifiedStatic2637 = {30, -1, (Value *)0, 0, {}};
Value *reifiedPtr2638 = (Value *)&reifiedStatic2637;

// --------- set -------------
Value *set_2640;

// --------- anon -------------
Value *fn2642;
Value *anon_2643(List *closures, Value *m_0, Value *v_1) {
while (1) {
incRef(m_0, 1);
incRef(v_1, 3);
Value *rslt2 = proto3Arg(&assoc_Implementations_408, "<nothing>/assoc", m_0, v_1, v_1, "core", 2012);
return(rslt2);

};};
FnArity anon_2644 = {FnArityType, -1, 2, (List *)0, 0, anon_2643};
Function anon_2646 = {FunctionType, -1, "anon", 1, {&anon_2644}};
Value *fn2642 = (Value *)&anon_2646;

Value *set_2641(List *closures, Value *val_list_0) {
while (1) {
incRef(val_list_0, 1);

// call-list
// #line 2012 "/home/jim/toccata/core.toc"
List *newList1 = empty_list;
Value *rslt2 = (Value *)newList1;

// static-variadic
// #line 2012 "/home/jim/toccata/core.toc"
Value *rslt3 = hash_map_2020(empty_list, (Value *)rslt2);
switch (rslt3->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 2012\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 2012\n$TOCCATA_DIR/core.toc:: 2012\n$TOCCATA_DIR/core.toc:: 1634\n");
#endif
abort();
}
Value *rslt4 = proto3Arg(&reduce_Implementations_299, "<nothing>/reduce", val_list_0, rslt3, fn2642, "core", 2012);
switch (rslt4->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 2012\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 2012\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 2012 "/home/jim/toccata/core.toc"
Value *rslt5 = arityImpl2501(empty_list, reifiedPtr2511, rslt4);
return(rslt5);

};};
FnArity set_2647 = {FnArityType, -1, 1, (List *)0, 0, set_2641};
Function set_2649 = {FunctionType, -1, "set", 1, {&set_2647}};
Value *set_2640 = (Value *)&set_2649;


// --------- hash-set -------------
Value *hash_set_2651;
Value *hash_set_2652(List *closures, Value *arg0) {
while (1) {
Value *values_1 = seq(empty_list, arg0);
incRef(values_1, 1);

// static-fixed
// #line 2015 "/home/jim/toccata/core.toc"
Value *rslt2 = set_2641(empty_list, values_1);
return(rslt2);

};};
Value *hash_set_2654(List *closures, Value *args) {
Value *arg0;
Value **destArgs3[1] = {&arg0};
destructValue("core", "2014", (Value *)args, 1, destArgs3);
return(hash_set_2652(closures, args));
};
FnArity hash_set_2653 = {FnArityType, -1, 1, (List *)0, 1, hash_set_2654};
Function hash_set_2655 = {FunctionType, -1, "hash-set", 1, {&hash_set_2653}};
Value *hash_set_2651 = (Value *)&hash_set_2655;


// --------- disj -------------
Value *disj_2657;
Value *disj_2658(List *closures, Value *set_0, Value *val_1) {
while (1) {
incRef(set_0, 1);
incRef(val_1, 1);
Value *rslt2 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", set_0, "core", 2019);

// call-list
// #line 2019 "/home/jim/toccata/core.toc"
List *newList3 = empty_list;
newList3 = listCons((Value *)val_1, newList3);
newList3 = listCons((Value *)rslt2, newList3);
Value *rslt4 = (Value *)newList3;

// static-variadic
// #line 2019 "/home/jim/toccata/core.toc"
Value *rslt5 = dissoc_1714(empty_list, (Value *)rslt4);
switch (rslt5->type) {
case 12: 
case 13: 
case 11: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set-map' at $TOCCATA_DIR/core.toc, line 2019\n");
fprintf(stderr, "Needed HashMap, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'HashMap' From:             \n$TOCCATA_DIR/core.toc:: 2019\n$TOCCATA_DIR/core.toc:: 1936\n");
#endif
abort();
}

// call invoke
// #line 2019 "/home/jim/toccata/core.toc"
Value *rslt6 = arityImpl2501(empty_list, reifiedPtr2511, rslt5);
return(rslt6);

};};
Value *disj_2660(List *closures, Value *set_0, Value *val_1) {
switch (set_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set' at $TOCCATA_DIR/core.toc, line 2017\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2018\n");
#endif
abort();
}
return(disj_2658(closures, set_0, val_1));
};
FnArity disj_2659 = {FnArityType, -1, 2, (List *)0, 0, disj_2660};
Function disj_2661 = {FunctionType, -1, "disj", 1, {&disj_2659}};
Value *disj_2657 = (Value *)&disj_2661;


// --------- subset -------------
Value *subset_2663;
Value *anon_2667(List *closures, Value *arg0) {

while (1) {

dec_and_free(arg0, 1);
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs2[2] = {&val1, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs2);
incRef(val1, 1);

dec_and_free(closuresTail, 1);
return(val1);

};};
Value *subset_2664(List *closures, Value *super_0, Value *sub_1) {
while (1) {
incRef(super_0, 1);
incRef(sub_1, 2);
Value *rslt2 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", sub_1, "core", 2024);
Value *rslt3 = proto1Arg(&keys_Implementations_405, "<nothing>/keys", rslt2, "core", 2024);

// static-fixed
// #line 2024 "/home/jim/toccata/core.toc"
Value *rslt4 = every_1630(empty_list, rslt3, super_0);
Value *mv_5 = rslt4;
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 2024\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_5, 1);
switch (mv_5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_5)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_6 = malloc_fnArity();
anon_6->count = 1;
anon_6->variadic = 0;
anon_6->fn = anon_2667;
anon_6->closures = empty_list;
anon_6->closures = listCons((Value *)sub_1, (List *)anon_6->closures);
Function *anon_2670 = malloc_function(1);
anon_2670->name = "anon";
anon_2670->arityCount = 1;
anon_2670->arities[0] = anon_6;
Value *fn2666 = (Value *)anon_2670;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt7 = maybe_map_480(empty_list, mv_5, fn2666);
return(rslt7);

};};
Value *subset_2672(List *closures, Value *super_0, Value *sub_1) {
switch (super_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'super' at $TOCCATA_DIR/core.toc, line 2021\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, super_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2022\n");
#endif
abort();
}
switch (sub_1->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'sub' at $TOCCATA_DIR/core.toc, line 2021\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, sub_1)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2023\n");
#endif
abort();
}
return(subset_2664(closures, super_0, sub_1));
};
FnArity subset_2671 = {FnArityType, -1, 2, (List *)0, 0, subset_2672};
Function subset_2673 = {FunctionType, -1, "subset", 1, {&subset_2671}};
Value *subset_2663 = (Value *)&subset_2673;


// --------- union -------------
Value *union_2675;
Value *union_2676(List *closures, Value *set1_0, Value *set2_1) {
while (1) {
incRef(set1_0, 1);
incRef(set2_1, 1);
Value *rslt2 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", set2_1, "core", 2030);
Value *rslt3 = proto1Arg(&keys_Implementations_405, "<nothing>/keys", rslt2, "core", 2030);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 2030\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2030\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// type-known for reduce
// #line 2030 "/home/jim/toccata/core.toc"
Value *rslt4 = List_reduce_635(empty_list, rslt3, set1_0, conj_295);
return(rslt4);

};};
Value *union_2678(List *closures, Value *set1_0, Value *set2_1) {
switch (set1_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set1' at $TOCCATA_DIR/core.toc, line 2027\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set1_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2028\n");
#endif
abort();
}
switch (set2_1->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set2' at $TOCCATA_DIR/core.toc, line 2027\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set2_1)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2029\n");
#endif
abort();
}
return(union_2676(closures, set1_0, set2_1));
};
FnArity union_2677 = {FnArityType, -1, 2, (List *)0, 0, union_2678};
Function union_2679 = {FunctionType, -1, "union", 1, {&union_2677}};
Value *union_2675 = (Value *)&union_2679;


// --------- intersection -------------
Value *intersection_2681;
Value *anon_2684(List *closures, Value *inter_0, Value *x_1) {

while (1) {
incRef(inter_0, 3);
incRef(x_1, 1);
Value *val2;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs12[2] = {&val2, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs12);
incRef(val2, 1);

dec_and_free(closuresTail, 1);

// dynamic unknown type
// #line 2037 "/home/jim/toccata/core.toc"
Value *rslt6;
if((val2)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(val2->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at core: 2037\n",
extractStr(type_name(empty_list, val2)), val2->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt6 = _fn(_arity->closures, val2, x_1);
} else {
FnArity *arity3 = findFnArity(val2, 1);
if(arity3 != (FnArity *)0 && !arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
rslt6 = fn5(arity3->closures, x_1);
} else if(arity3 != (FnArity *)0 && arity3->variadic) {
FnType1 *fn5 = (FnType1 *)arity3->fn;
List *dynArgs4 = empty_list;
dynArgs4 = (List *)listCons(x_1, dynArgs4);
rslt6 = fn5(arity3->closures, (Value *)dynArgs4);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)val2)->name);
  abort();
}
dec_and_free(val2, 1);
}

// call-list
// #line 2037 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)inter_0, newList7);
newList7 = listCons((Value *)conj_295, newList7);
Value *rslt8 = (Value *)newList7;

// static-variadic
// #line 2037 "/home/jim/toccata/core.toc"
Value *rslt9 = partial_720(empty_list, (Value *)rslt8);
Value *rslt10 = proto2Arg(&map_Implementations_267, "<nothing>/map", rslt6, rslt9, "core", 2037);
if (!isNothing(rslt10,"",0)) {
Value *rslt11 = maybeExtract(rslt10);
return(rslt11);
} else {
dec_and_free(rslt10, 1);
return(inter_0);
}

};};
Value *intersection_2682(List *closures, Value *set1_0, Value *set2_1) {
while (1) {
incRef(set2_1, 1);
Value *rslt2 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", set2_1, "core", 2035);
Value *rslt3 = proto1Arg(&keys_Implementations_405, "<nothing>/keys", rslt2, "core", 2035);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 2035\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2035\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 2035 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
Value *rslt5 = (Value *)newList4;

// static-variadic
// #line 2035 "/home/jim/toccata/core.toc"
Value *rslt6 = hash_set_2652(empty_list, (Value *)rslt5);
FnArity *anon_7 = malloc_fnArity();
anon_7->count = 2;
anon_7->variadic = 0;
anon_7->fn = anon_2684;
anon_7->closures = empty_list;
anon_7->closures = listCons((Value *)set1_0, (List *)anon_7->closures);
Function *anon_2687 = malloc_function(1);
anon_2687->name = "anon";
anon_2687->arityCount = 1;
anon_2687->arities[0] = anon_7;
Value *fn2683 = (Value *)anon_2687;

// type-known for reduce
// #line 2035 "/home/jim/toccata/core.toc"
Value *rslt8 = List_reduce_635(empty_list, rslt3, rslt6, fn2683);
return(rslt8);

};};
Value *intersection_2689(List *closures, Value *set1_0, Value *set2_1) {
switch (set1_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set1' at $TOCCATA_DIR/core.toc, line 2032\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set1_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2033\n");
#endif
abort();
}
switch (set2_1->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set2' at $TOCCATA_DIR/core.toc, line 2032\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set2_1)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2034\n");
#endif
abort();
}
return(intersection_2682(closures, set1_0, set2_1));
};
FnArity intersection_2688 = {FnArityType, -1, 2, (List *)0, 0, intersection_2689};
Function intersection_2690 = {FunctionType, -1, "intersection", 1, {&intersection_2688}};
Value *intersection_2681 = (Value *)&intersection_2690;


// --------- difference -------------
Value *difference_2692;
Value *anon_2695(List *closures, Value *diff_0, Value *x_1) {

while (1) {
incRef(diff_0, 3);
incRef(x_1, 3);
Value *val3;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val3, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val3, 1);

dec_and_free(closuresTail, 1);
Value *andRslt2;
Value *rslt4 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", val3, "core", 2045);
Value *rslt5 = proto2Arg(&get_Implementations_413, "<nothing>/get", rslt4, x_1, "core", 2045);
andRslt2 = rslt5;
if (isNothing(andRslt2,"",0)) {
dec_and_free(diff_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt2, 1);

// static-fixed
// #line 2046 "/home/jim/toccata/core.toc"
Value *rslt6 = maybe_4(empty_list, diff_0);
andRslt2 = rslt6;
}
if (!isNothing(andRslt2,"",0)) {
Value *rslt8 = maybeExtract(andRslt2);
return(rslt8);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7 = proto2Arg(&conj_Implementations_303, "<nothing>/conj", diff_0, x_1, "core", 2047);
return(rslt7);
}

};};
Value *difference_2693(List *closures, Value *set1_0, Value *set2_1) {
while (1) {
incRef(set1_0, 1);
Value *rslt2 = proto1Arg(&protoImpls2491, "<nothing>/.set-map", set1_0, "core", 2043);
Value *rslt3 = proto1Arg(&keys_Implementations_405, "<nothing>/keys", rslt2, "core", 2043);
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 2043\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2043\n$TOCCATA_DIR/core.toc:: 708 \n$TOCCATA_DIR/core.toc:: 684 \n");
#endif
abort();
}

// call-list
// #line 2043 "/home/jim/toccata/core.toc"
List *newList4 = empty_list;
Value *rslt5 = (Value *)newList4;

// static-variadic
// #line 2043 "/home/jim/toccata/core.toc"
Value *rslt6 = hash_set_2652(empty_list, (Value *)rslt5);
FnArity *anon_7 = malloc_fnArity();
anon_7->count = 2;
anon_7->variadic = 0;
anon_7->fn = anon_2695;
anon_7->closures = empty_list;
anon_7->closures = listCons((Value *)set2_1, (List *)anon_7->closures);
Function *anon_2698 = malloc_function(1);
anon_2698->name = "anon";
anon_2698->arityCount = 1;
anon_2698->arities[0] = anon_7;
Value *fn2694 = (Value *)anon_2698;

// type-known for reduce
// #line 2043 "/home/jim/toccata/core.toc"
Value *rslt8 = List_reduce_635(empty_list, rslt3, rslt6, fn2694);
return(rslt8);

};};
Value *difference_2700(List *closures, Value *set1_0, Value *set2_1) {
switch (set1_0->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set1' at $TOCCATA_DIR/core.toc, line 2040\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set1_0)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2041\n");
#endif
abort();
}
switch (set2_1->type) {
case 30: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'set2' at $TOCCATA_DIR/core.toc, line 2040\n");
fprintf(stderr, "Needed HashSet, got %s\n", extractStr(type_name(empty_list, set2_1)));
fprintf(stderr, "'HashSet' From:             \n$TOCCATA_DIR/core.toc:: 2042\n");
#endif
abort();
}
return(difference_2693(closures, set1_0, set2_1));
};
FnArity difference_2699 = {FnArityType, -1, 2, (List *)0, 0, difference_2700};
Function difference_2701 = {FunctionType, -1, "difference", 1, {&difference_2699}};
Value *difference_2692 = (Value *)&difference_2701;


// --------- select-keys -------------
Value *select_keys_2703;
Value *select_keys_2704(List *closures, Value *m_0, Value *ks_1) {
while (1) {
incRef(m_0, 1);
incRef(ks_1, 1);

// static-fixed
// #line 2050 "/home/jim/toccata/core.toc"
Value *rslt2 = set_2641(empty_list, ks_1);

// static-fixed
// #line 2050 "/home/jim/toccata/core.toc"
Value *rslt3 = filter_keys_2031(empty_list, m_0, rslt2);
return(rslt3);

};};
FnArity select_keys_2705 = {FnArityType, -1, 2, (List *)0, 0, select_keys_2704};
Function select_keys_2707 = {FunctionType, -1, "select-keys", 1, {&select_keys_2705}};
Value *select_keys_2703 = (Value *)&select_keys_2707;


// --------- integer-gen -------------
Value *integer_gen_2709;
Value *integer_gen_2710(List *closures, Value *x_0) {
while (1) {

// inline
// #line 2054 "/home/jim/toccata/core.toc"

  if (x_0->type != IntegerType) {
    fprintf(stderr, "Invalid argument passed to 'integer-gen'\n");
    abort();
  }
  intGenerator *intGen = (intGenerator *)my_malloc(sizeof(intGenerator));
  intGen->sym_counter = ((Integer *)x_0)->numVal;
  dec_and_free(x_0, 1);
  return((Value *)opaqueValue((void *)intGen, freeIntGenerator));

#

};};
FnArity integer_gen_2711 = {FnArityType, -1, 1, (List *)0, 0, integer_gen_2710};
Function integer_gen_2713 = {FunctionType, -1, "integer-gen", 1, {&integer_gen_2711}};
Value *integer_gen_2709 = (Value *)&integer_gen_2713;


// --------- new-int -------------
Value *new_int_2715;
Value *new_int_2716(List *closures, Value *gen_0) {
while (1) {

// inline
// #line 2066 "/home/jim/toccata/core.toc"

  intGenerator *gen = (intGenerator *)((Opaque *)gen_0)->ptr;
  dec_and_free(gen_0, 1);
  return(integerValue(gen->sym_counter++));

#

};};
FnArity new_int_2717 = {FnArityType, -1, 1, (List *)0, 0, new_int_2716};
Function new_int_2719 = {FunctionType, -1, "new-int", 1, {&new_int_2717}};
Value *new_int_2715 = (Value *)&new_int_2719;

Value *type_val_2720_2721;
ProtoImpls protoImpls2724;
ProtoImpls protoImpls2726;
Value *dispatchFnPtr2722;
Value *protoImpl2723(List *closures, Value *arg);
Value *protoImpl2725(List *closures, Value *arg1, Value *arg2);
Value *arityImpl2731(List *closures, Value *);
Value *arityImpl2732(List *closures, Value *);
Value *arityImpl2733(List *closures, Value *, Value *);
Value *arityImpl2734(List *closures, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[13];
} str49 = {StringBufferType, -1, 12, 0, "IntGenerator"};
Value *strPtr49 = (Value *)&str49;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[4];
} str50 = {StringBufferType, -1, 3, 0, "gen"};
Value *strPtr50 = (Value *)&str50;
Value *arityImpl2731(List *closures, Value *z_0) {
while (1) {

dec_and_free(z_0, 1);
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr46, newList1);
newList1 = listCons((Value *)strPtr50, newList1);
newList1 = listCons((Value *)strPtr44, newList1);
newList1 = listCons((Value *)strPtr49, newList1);
newList1 = listCons((Value *)strPtr42, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt2);

};};
FnArity staticArity2735 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2731};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[27];
} str51 = {StringBufferType, -1, 26, 0, "*IntGenerator constructor*"};
Value *strPtr51 = (Value *)&str51;
Value *arityImpl2732(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr51);

};};
FnArity staticArity2737 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2732};
Value *arityImpl2733(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
Value *rslt2 = reified_get_type_31(empty_list, type_val_2720_2721);
Value *rslt3 = reified_get_type_31(empty_list, y_1);
Value *rslt4 = Integer__EQ__STAR__475(empty_list, rslt2, rslt3);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt4);

};};
FnArity staticArity2739 = {FnArityType, -1, 2, (List *)0, 0, arityImpl2733};
Value *arityImpl2734(List *closures, Value *arg0, Value *gen_1) {
while (1) {

dec_and_free(arg0, 1);
incRef(gen_1, 1);
Vector *newVect2 = empty_vect;
newVect2 = mutateVectConj(newVect2, gen_1);
Value *rslt3 = (Value *)newVect2;
switch (rslt3->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Vector' From: \n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 1) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 1, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value **rslt3_args[2] = {&rslt3_0, &rslt3_1};
destructValue("", "0", (Value *)rslt3, 2, rslt3_args);
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
}
Value *rslt4 = new_type_value_69(empty_list, type_val_2720_2721, rslt3);
return(rslt4);

};};
FnArity staticArity2741 = {FnArityType, -1, 2, (List *)0, 0, arityImpl2734};
ReifiedVal reifiedStatic2743 = {33, -1, (Value *)0, 0, {}};
Value *reifiedPtr2744 = (Value *)&reifiedStatic2743;
Value *IntGenerator__EQ__STAR__2755(List *closures, Value *, Value *);
Value *IntGenerator_type_name_2756(List *closures, Value *);
Value *IntGenerator_has_field_2757(List *closures, Value *, Value *);
Value *IntGenerator_gen_2758(List *closures, Value *, Value *);
Value *IntGenerator_gen_2759(List *closures, Value *);
Value *IntGenerator_get_2760(List *closures, Value *, Value *);
Value *IntGenerator_sha1_update_2761(List *closures, Value *, Value *);
Value *IntGenerator_sha1_2762(List *closures, Value *);
Value *IntGenerator_extract_2763(List *closures, Value *);
Value *IntGenerator_assoc_STAR__2764(List *closures, Value *, Value *, Value *, Value *, Value *);
Value *IntGenerator__EQ__STAR__2755(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 3);
Value *andRslt2;
Value *rslt3 = reified_get_type_31(empty_list, x_0);
Value *rslt4 = reified_get_type_31(empty_list, y_1);
Value *rslt5 = Integer__EQ__STAR__475(empty_list, rslt3, rslt4);
andRslt2 = rslt5;
if (isNothing(andRslt2,"",0)) {
dec_and_free(y_1, 2);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
dec_and_free(reified_type_args_24, 2);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt6 = reified_type_args_25(empty_list, x_0);
Value *rslt7 = reified_type_args_25(empty_list, y_1);
Value *rslt8 = Vector__EQ__STAR__1485(empty_list, rslt6, rslt7);
andRslt2 = rslt8;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt9 = maybe_4(empty_list, x_0);
switch (rslt9->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt9);
}
}

};};
FnArity IntGenerator__EQ__STAR__2765 = {FnArityType, -1, 2, (List *)0, 0, IntGenerator__EQ__STAR__2755};
Value *IntGenerator_type_name_2756(List *closures, Value *x_0) {
while (1) {

dec_and_free(x_0, 1);
return(strPtr49);

};};
FnArity IntGenerator_type_name_2767 = {FnArityType, -1, 1, (List *)0, 0, IntGenerator_type_name_2756};
Value *IntGenerator_has_field_2757(List *closures, Value *x_0, Value *field_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(field_1, 1);
Value *orRslt2;
Value *rslt3 = identical_464(empty_list, dispatchFnPtr2722, field_1);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(nothing_8, 1);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
return(nothing_8);
}

};};
FnArity IntGenerator_has_field_2769 = {FnArityType, -1, 2, (List *)0, 0, IntGenerator_has_field_2757};
Value *IntGenerator_gen_2758(List *closures, Value *value_0, Value *gen_1) {
while (1) {
incRef(value_0, 3);
incRef(gen_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, value_0);
Value *rslt3 = Vector_store_1504(empty_list, rslt2, numPtr0, gen_1);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 492\n");
#endif
abort();
}
Value *rslt4 = Maybe_extract_510(empty_list, rslt3);
Value *rslt5 = make_value_75(empty_list, value_0, rslt4);
return(rslt5);

};};
FnArity IntGenerator_gen_2771 = {FnArityType, -1, 2, (List *)0, 0, IntGenerator_gen_2758};
Value *IntGenerator_gen_2759(List *closures, Value *value_0) {
while (1) {
incRef(value_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, value_0);
Value *rslt2 = Vector_nth_1503(empty_list, rslt1, numPtr0);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
Value *rslt3 = Maybe_extract_510(empty_list, rslt2);
return(rslt3);

};};
FnArity IntGenerator_gen_2773 = {FnArityType, -1, 1, (List *)0, 0, IntGenerator_gen_2759};
Value *IntGenerator_get_2760(List *closures, Value *x_0, Value *field_1) {
while (1) {
incRef(x_0, 3);
incRef(field_1, 3);
Value *andRslt2;
Value *rslt3 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt7 = _fn(_arity->closures, field_1, x_0);
} else {
FnArity *arity4 = findFnArity(field_1, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
rslt7 = fn6(arity4->closures, x_0);
} else if(arity4 != (FnArity *)0 && arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(x_0, dynArgs5);
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt8 = maybe_4(empty_list, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 509\n");
#endif
abort();
}
return(rslt8);
}

};};
FnArity IntGenerator_get_2775 = {FnArityType, -1, 2, (List *)0, 0, IntGenerator_get_2760};
Value *IntGenerator_sha1_update_2761(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 3);
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = reified_type_args_25(empty_list, x_0);
Value *rslt4 = Vector_sha1_update_1501(empty_list, rslt3, ctxt_1);
return(rslt4);

};};
FnArity IntGenerator_sha1_update_2777 = {FnArityType, -1, 2, (List *)0, 0, IntGenerator_sha1_update_2761};
Value *IntGenerator_sha1_2762(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *rslt1 = sha1_init_446(empty_list);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "sha1-update", x_0, rslt1, "", 0);
Value *rslt3 = sha1_finalize_452(empty_list, rslt2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt3);

};};
FnArity IntGenerator_sha1_2779 = {FnArityType, -1, 1, (List *)0, 0, IntGenerator_sha1_2762};
Value *IntGenerator_extract_2763(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);
Value *rslt1 = reified_type_args_25(empty_list, arg0);
Value *gen_4;
Value *tail_2;
Value **destArgs3[2] = {&gen_4, &tail_2};
destructValue("core", "2072", (Value *)rslt1, 2, destArgs3);
incRef(gen_4, 1);

dec_and_free(tail_2, 1);

// static-fixed
// #line 2074 "/home/jim/toccata/core.toc"
Value *rslt5 = new_int_2716(empty_list, gen_4);
return(rslt5);

};};
Value *IntGenerator_extract_2782(List *closures, Value *arg0) {
switch (arg0->type) {
case 32: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed IntGenerator, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'IntGenerator' From:        \n$TOCCATA_DIR/core.toc:: 2072\n");
#endif
abort();
}
return(IntGenerator_extract_2763(closures, arg0));
};
FnArity IntGenerator_extract_2781 = {FnArityType, -1, 1, (List *)0, 0, IntGenerator_extract_2782};
Value *IntGenerator_assoc_STAR__2764(List *closures, Value *x_0, Value *field_1, Value *new_value_2, Value *arg3, Value *arg4) {
while (1) {
incRef(x_0, 5);
incRef(field_1, 3);
incRef(new_value_2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);
Value *orRslt5;
Value *andRslt6;
Value *rslt7 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt7->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
abort();
}
andRslt6 = rslt7;
if (isNothing(andRslt6,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(new_value_2, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt6, 1);
Value *rslt11;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt11 = _fn(_arity->closures, field_1, x_0, new_value_2);
} else {
FnArity *arity8 = findFnArity(field_1, 2);
if(arity8 != (FnArity *)0 && !arity8->variadic) {
FnType2 *fn10 = (FnType2 *)arity8->fn;
rslt11 = fn10(arity8->closures, x_0, new_value_2);
} else if(arity8 != (FnArity *)0 && arity8->variadic) {
FnType1 *fn10 = (FnType1 *)arity8->fn;
List *dynArgs9 = empty_list;
dynArgs9 = (List *)listCons(new_value_2, dynArgs9);
dynArgs9 = (List *)listCons(x_0, dynArgs9);
rslt11 = fn10(arity8->closures, (Value *)dynArgs9);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt12 = maybe_4(empty_list, rslt11);
andRslt6 = rslt12;
}
orRslt5 = andRslt6;
if (!isNothing(orRslt5,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);

} else {
dec_and_free(orRslt5, 1);
Value *rslt13 = maybe_4(empty_list, x_0);
orRslt5 = rslt13;
}
switch (orRslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, orRslt5)));
fprintf(stderr, "'Maybe' From: \n");
#endif
abort();
}
Value *rslt14 = Maybe_extract_510(empty_list, orRslt5);
return(rslt14);

};};
FnArity IntGenerator_assoc_STAR__2783 = {FnArityType, -1, 5, (List *)0, 0, IntGenerator_assoc_STAR__2764};
ReifiedVal reifiedStatic2785 = {32, -1, (Value *)0, 0, {}};
Value *reifiedPtr2786 = (Value *)&reifiedStatic2785;

// --------- int-generator -------------
Value *int_generator_2788;
Value *int_generator_2790(List *closures) {
while (1) {
Value *rslt3;
FnArity *arity0 = findFnArity(int_generator_2788, 1);
if(arity0 != (FnArity *)0 && !arity0->variadic) { FnType1 *fn2 = (FnType1 *)arity0->fn;


// dynamic fn type
// #line 2077 "/home/jim/toccata/core.toc"
rslt3 = fn2(arity0->closures, numPtr0);
} else if(arity0 != (FnArity *)0 && arity0->variadic) { FnType1 *fn2 = (FnType1 *)arity0->fn;
List *dynArgs1 = empty_list;
dynArgs1 = (List *)listCons(numPtr0, dynArgs1);

// dynamic fn type
// #line 2077 "/home/jim/toccata/core.toc"
rslt3 = fn2(arity0->closures, (Value *)dynArgs1);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)int_generator_2788)->name, "core", 2077);
  abort();
}
dec_and_free(int_generator_2788, 1);
return(rslt3);

};};
FnArity int_generator_2791 = {FnArityType, -1, 0, (List *)0, 0, int_generator_2790};
Value *int_generator_2789(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);

// static-fixed
// #line 2078 "/home/jim/toccata/core.toc"
Value *rslt1 = integer_gen_2710(empty_list, x_0);

// call invoke
// #line 2078 "/home/jim/toccata/core.toc"
Value *rslt2 = arityImpl2734(empty_list, reifiedPtr2744, rslt1);
return(rslt2);

};};
FnArity int_generator_2793 = {FnArityType, -1, 1, (List *)0, 0, int_generator_2789};
Function int_generator_2795 = {FunctionType, -1, "int-generator", 2, {&int_generator_2791, &int_generator_2793}};
Value *int_generator_2788 = (Value *)&int_generator_2795;

Value *sym_counter_2796;

// --------- gensym -------------
Value *gensym_2798;
Value *gensym_2799(List *closures, Value *prefix_0) {
while (1) {
incRef(prefix_0, 1);

// TODO: make sure the call to 'extract' is type-known
Value *rslt1 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", sym_counter_2796, "core", 2085);

// call-list
// #line 2085 "/home/jim/toccata/core.toc"
List *newList2 = empty_list;
newList2 = listCons((Value *)rslt1, newList2);
newList2 = listCons((Value *)prefix_0, newList2);
Value *rslt3 = (Value *)newList2;

// static-variadic
// #line 2085 "/home/jim/toccata/core.toc"
Value *rslt4 = str_893(empty_list, (Value *)rslt3);
switch (rslt4->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'sym-str' at $TOCCATA_DIR/core.toc, line 2085\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 2085\n$TOCCATA_DIR/core.toc:: 851 \n");
#endif
abort();
}

// static-fixed
// #line 2085 "/home/jim/toccata/core.toc"
Value *rslt5 = symbol_790(empty_list, rslt4);
return(rslt5);

};};
Value *gensym_2801(List *closures, Value *prefix_0) {
switch (prefix_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'prefix' at $TOCCATA_DIR/core.toc, line 2082\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, prefix_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 2083\n");
#endif
abort();
}
return(gensym_2799(closures, prefix_0));
};
FnArity gensym_2800 = {FnArityType, -1, 1, (List *)0, 0, gensym_2801};
Function gensym_2802 = {FunctionType, -1, "gensym", 1, {&gensym_2800}};
Value *gensym_2798 = (Value *)&gensym_2802;


// --------- create-lazy -------------
Value *create_lazy_2804;
Value *create_lazy_2805(List *closures) {
while (1) {

// inline
// #line 2091 "/home/jim/toccata/core.toc"

  extractCache *newCache = (extractCache *)my_malloc(sizeof(extractCache));
  newCache->tail = malloc_list();
  pthread_mutex_init(&newCache->access, NULL);
  return((Value *)opaqueValue((void *)newCache, freeExtractCache));

#

};};
FnArity create_lazy_2806 = {FnArityType, -1, 0, (List *)0, 0, create_lazy_2805};
Function create_lazy_2808 = {FunctionType, -1, "create-lazy", 1, {&create_lazy_2806}};
Value *create_lazy_2804 = (Value *)&create_lazy_2808;


// --------- get-lazy -------------
Value *get_lazy_2810;
Value *get_lazy_2811(List *closures, Value *lazy_struct_0) {
while (1) {

// inline
// #line 2100 "/home/jim/toccata/core.toc"

  extractCache *cache = (extractCache *)((Opaque *)lazy_struct_0)->ptr;
  incRef((Value *)cache->tail, 1);
  dec_and_free(lazy_struct_0, 1);
  return((Value *)cache->tail);

#

};};
FnArity get_lazy_2812 = {FnArityType, -1, 1, (List *)0, 0, get_lazy_2811};
Function get_lazy_2814 = {FunctionType, -1, "get-lazy", 1, {&get_lazy_2812}};
Value *get_lazy_2810 = (Value *)&get_lazy_2814;


// --------- first-lazy -------------
Value *first_lazy_2816;
Value *first_lazy_2817(List *closures, Value *lazy_0, Value *tail_1) {
while (1) {

// private function used for implementing LazyList

// inline
// #line 2110 "/home/jim/toccata/core.toc"

  List *cache = (List *)lazy_0;
  extractCache *tail = (extractCache *)((Opaque *)tail_1)->ptr;
  if (cache->head == (Value *)0) {
    pthread_mutex_lock(&tail->access);
    if (cache->head == (Value *)0) {
      // leave the mutex locked and return nothing
      dec_and_free(lazy_0, 1);
      dec_and_free(tail_1, 1);
      return(nothing);
    } else {
// TODO: untested code path
fprintf(stderr, "first-lazy 4\n");
abort();
      pthread_mutex_unlock(&tail->access);
      incRef(cache->head, 1);
      dec_and_free(lazy_0, 1);
      dec_and_free(tail_1, 1);
      return(maybe((List *)0, (Value *)0, cache->head));
    }
  } else {
    incRef(cache->head, 1);
    dec_and_free(lazy_0, 1);
    dec_and_free(tail_1, 1);
    return(maybe((List *)0, (Value *)0, cache->head));
  }

#

};};
Value *first_lazy_2819(List *closures, Value *lazy_0, Value *tail_1) {
switch (lazy_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'lazy' at $TOCCATA_DIR/core.toc, line 2107\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, lazy_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2108\n");
#endif
abort();
}
return(first_lazy_2817(closures, lazy_0, tail_1));
};
FnArity first_lazy_2818 = {FnArityType, -1, 2, (List *)0, 0, first_lazy_2819};
Function first_lazy_2820 = {FunctionType, -1, "first-lazy", 1, {&first_lazy_2818}};
Value *first_lazy_2816 = (Value *)&first_lazy_2820;


// --------- append-to-lazy-tail -------------
Value *append_to_lazy_tail_2822;
Value *append_to_lazy_tail_2823(List *closures, Value *tail_0, Value *value_1) {
while (1) {

// inline
// #line 2140 "/home/jim/toccata/core.toc"

  extractCache *cacheTail = (extractCache *)((Opaque *)tail_0)->ptr;
  cacheTail->tail->head = value_1;
  cacheTail->tail->tail = malloc_list();
  List *original = cacheTail->tail;
  cacheTail->tail = cacheTail->tail->tail;
  incRef((Value *)cacheTail->tail, 1);
  dec_and_free(tail_0, 1);
  dec_and_free((Value *)original, 1);
  pthread_mutex_unlock(&cacheTail->access);
  return(nothing);

#

};};
FnArity append_to_lazy_tail_2824 = {FnArityType, -1, 2, (List *)0, 0, append_to_lazy_tail_2823};
Function append_to_lazy_tail_2826 = {FunctionType, -1, "append-to-lazy-tail", 1, {&append_to_lazy_tail_2824}};
Value *append_to_lazy_tail_2822 = (Value *)&append_to_lazy_tail_2826;


// --------- rest-of-lazy -------------
Value *rest_of_lazy_2828;
Value *rest_of_lazy_2829(List *closures, Value *lazy_0) {
while (1) {

// private function used for implementing LazyList

// inline
// #line 2156 "/home/jim/toccata/core.toc"

  List *cache = (List *)lazy_0;
  Value *result;
  result = (Value *)cache->tail;
  incRef(result, 1);
  dec_and_free(lazy_0, 1);
  return(result);

#

};};
Value *rest_of_lazy_2831(List *closures, Value *lazy_0) {
switch (lazy_0->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'lazy' at $TOCCATA_DIR/core.toc, line 2153\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, lazy_0)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2154\n");
#endif
abort();
}
return(rest_of_lazy_2829(closures, lazy_0));
};
FnArity rest_of_lazy_2830 = {FnArityType, -1, 1, (List *)0, 0, rest_of_lazy_2831};
Function rest_of_lazy_2832 = {FunctionType, -1, "rest-of-lazy", 1, {&rest_of_lazy_2830}};
Value *rest_of_lazy_2828 = (Value *)&rest_of_lazy_2832;

Value *type_val_2833_2834;
ProtoImpls protoImpls2839;
ProtoImpls protoImpls2841;
Value *dispatchFnPtr2837;
Value *protoImpl2838(List *closures, Value *arg);
Value *protoImpl2840(List *closures, Value *arg1, Value *arg2);
ProtoImpls protoImpls2843;
ProtoImpls protoImpls2845;
Value *dispatchFnPtr2836;
Value *protoImpl2842(List *closures, Value *arg);
Value *protoImpl2844(List *closures, Value *arg1, Value *arg2);
ProtoImpls protoImpls2847;
ProtoImpls protoImpls2849;
Value *dispatchFnPtr2835;
Value *protoImpl2846(List *closures, Value *arg);
Value *protoImpl2848(List *closures, Value *arg1, Value *arg2);
Value *arityImpl2854(List *closures, Value *);
Value *arityImpl2855(List *closures, Value *);
Value *arityImpl2856(List *closures, Value *, Value *);
Value *arityImpl2857(List *closures, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[9];
} str52 = {StringBufferType, -1, 8, 0, "LazyList"};
Value *strPtr52 = (Value *)&str52;
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[22];
} str53 = {StringBufferType, -1, 21, 0, "container, lazy, tail"};
Value *strPtr53 = (Value *)&str53;
Value *arityImpl2854(List *closures, Value *z_0) {
while (1) {

dec_and_free(z_0, 1);
List *newList1 = empty_list;
newList1 = listCons((Value *)strPtr46, newList1);
newList1 = listCons((Value *)strPtr53, newList1);
newList1 = listCons((Value *)strPtr44, newList1);
newList1 = listCons((Value *)strPtr52, newList1);
newList1 = listCons((Value *)strPtr42, newList1);
Value *rslt2 = (Value *)newList1;
switch (rslt2->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt2);

};};
FnArity staticArity2858 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2854};
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[23];
} str54 = {StringBufferType, -1, 22, 0, "*LazyList constructor*"};
Value *strPtr54 = (Value *)&str54;
Value *arityImpl2855(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
return(strPtr54);

};};
FnArity staticArity2860 = {FnArityType, -1, 1, (List *)0, 0, arityImpl2855};
Value *arityImpl2856(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
Value *rslt2 = reified_get_type_31(empty_list, type_val_2833_2834);
Value *rslt3 = reified_get_type_31(empty_list, y_1);
Value *rslt4 = Integer__EQ__STAR__475(empty_list, rslt2, rslt3);
switch (rslt4->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt4)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt4);

};};
FnArity staticArity2862 = {FnArityType, -1, 2, (List *)0, 0, arityImpl2856};
Value *arityImpl2857(List *closures, Value *arg0, Value *container_1, Value *lazy_2, Value *tail_3) {
while (1) {

dec_and_free(arg0, 1);
incRef(container_1, 1);
incRef(lazy_2, 1);
incRef(tail_3, 1);
Vector *newVect4 = empty_vect;
newVect4 = mutateVectConj(newVect4, container_1);
newVect4 = mutateVectConj(newVect4, lazy_2);
newVect4 = mutateVectConj(newVect4, tail_3);
Value *rslt5 = (Value *)newVect4;
switch (rslt5->type) {
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Vector, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Vector' From: \n");
#endif
abort();
}
switch (rslt5->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt5)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt5, 1)) < 3) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 3, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt5))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt5, 1);
Value *rslt5_0;
Value *rslt5_1;
Value *rslt5_2;
Value *rslt5_3;
Value **rslt5_args[4] = {&rslt5_0, &rslt5_1, &rslt5_2, &rslt5_3};
destructValue("", "0", (Value *)rslt5, 4, rslt5_args);
dec_and_free(rslt5_0, 1);
dec_and_free(rslt5_1, 1);
dec_and_free(rslt5_2, 1);
dec_and_free(rslt5_3, 1);
}
Value *rslt6 = new_type_value_69(empty_list, type_val_2833_2834, rslt5);
return(rslt6);

};};
FnArity staticArity2864 = {FnArityType, -1, 4, (List *)0, 0, arityImpl2857};
ReifiedVal reifiedStatic2866 = {35, -1, (Value *)0, 0, {}};
Value *reifiedPtr2867 = (Value *)&reifiedStatic2866;
Value *LazyList_string_list_2885(List *closures, Value *);
Value *LazyList__EQ__STAR__2886(List *closures, Value *, Value *);
Value *LazyList_first_2887(List *closures, Value *);
Value *LazyList_rest_2888(List *closures, Value *);
Value *LazyList_type_name_2889(List *closures, Value *);
Value *LazyList_has_field_2890(List *closures, Value *, Value *);
Value *LazyList_container_2891(List *closures, Value *, Value *);
Value *LazyList_container_2892(List *closures, Value *);
Value *LazyList_lazy_2893(List *closures, Value *, Value *);
Value *LazyList_lazy_2894(List *closures, Value *);
Value *LazyList_tail_2895(List *closures, Value *, Value *);
Value *LazyList_tail_2896(List *closures, Value *);
Value *LazyList_get_2897(List *closures, Value *, Value *);
Value *LazyList_sha1_update_2898(List *closures, Value *, Value *);
Value *LazyList_sha1_2899(List *closures, Value *);
Value *LazyList_empty_QM__2900(List *closures, Value *);
Value *LazyList_assoc_STAR__2901(List *closures, Value *, Value *, Value *, Value *, Value *);
struct {int64_t type;
        int32_t refs;
        int64_t len;
        Integer *hash;
        char buffer[11];
} str55 = {StringBufferType, -1, 10, 0, "<LazyList>"};
Value *strPtr55 = (Value *)&str55;
Value *LazyList_string_list_2885(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);
Value *rslt1 = reified_type_args_25(empty_list, arg0);
Value *container_4;
Value *lazy_5;
Value *tail_6;
Value *tail_2;
Value **destArgs3[4] = {&container_4, &lazy_5, &tail_6, &tail_2};
destructValue("core", "2165", (Value *)rslt1, 4, destArgs3);

dec_and_free(container_4, 1);

dec_and_free(lazy_5, 1);

dec_and_free(tail_6, 1);

dec_and_free(tail_2, 1);

// call-list
// #line 2167 "/home/jim/toccata/core.toc"
List *newList7 = empty_list;
newList7 = listCons((Value *)strPtr55, newList7);
Value *rslt8 = (Value *)newList7;
switch (rslt8->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'List' From:               \n$TOCCATA_DIR/core.toc:: 858\n");
#endif
abort();
}
return(rslt8);

};};
Value *LazyList_string_list_2903(List *closures, Value *arg0) {
switch (arg0->type) {
case 34: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed LazyList, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'LazyList' From:            \n$TOCCATA_DIR/core.toc:: 2165\n");
#endif
abort();
}
return(LazyList_string_list_2885(closures, arg0));
};
FnArity LazyList_string_list_2902 = {FnArityType, -1, 1, (List *)0, 0, LazyList_string_list_2903};
Value *LazyList__EQ__STAR__2886(List *closures, Value *x_0, Value *y_1) {
while (1) {
incRef(x_0, 5);
incRef(y_1, 3);
Value *andRslt2;
Value *rslt3 = reified_get_type_31(empty_list, x_0);
Value *rslt4 = reified_get_type_31(empty_list, y_1);
Value *rslt5 = Integer__EQ__STAR__475(empty_list, rslt3, rslt4);
andRslt2 = rslt5;
if (isNothing(andRslt2,"",0)) {
dec_and_free(y_1, 2);
dec_and_free(x_0, 4);
dec_and_free(maybe_3, 1);
dec_and_free(reified_type_args_24, 2);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt6 = reified_type_args_25(empty_list, x_0);
Value *rslt7 = reified_type_args_25(empty_list, y_1);
Value *rslt8 = Vector__EQ__STAR__1485(empty_list, rslt6, rslt7);
andRslt2 = rslt8;
if (isNothing(andRslt2,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt9 = maybe_4(empty_list, x_0);
switch (rslt9->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt9)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 547\n");
#endif
abort();
}
return(rslt9);
}
}

};};
FnArity LazyList__EQ__STAR__2904 = {FnArityType, -1, 2, (List *)0, 0, LazyList__EQ__STAR__2886};
Value *LazyList_first_2887(List *closures, Value *c_0) {
while (1) {
incRef(c_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, c_0);
Value *container_4;
Value *lazy_5;
Value *tail_6;
Value *tail_2;
Value **destArgs3[4] = {&container_4, &lazy_5, &tail_6, &tail_2};
destructValue("core", "2165", (Value *)rslt1, 4, destArgs3);
incRef(container_4, 1);
incRef(lazy_5, 1);
switch (lazy_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'lazy' at $TOCCATA_DIR/core.toc, line 2165\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, lazy_5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2176\n$TOCCATA_DIR/core.toc:: 2108\n");
#endif
abort();
}
incRef(tail_6, 3);

dec_and_free(tail_2, 1);
Value *orRslt7;

// static-fixed
// #line 2176 "/home/jim/toccata/core.toc"
Value *rslt8 = first_lazy_2817(empty_list, lazy_5, tail_6);
orRslt7 = rslt8;
if (!isNothing(orRslt7,"",0)) {
dec_and_free(tail_6, 2);
dec_and_free(maybe_3, 1);
dec_and_free(container_4, 2);
dec_and_free(append_to_lazy_tail_2822, 1);
return(orRslt7);
} else {
dec_and_free(orRslt7, 1);
Value *rslt9 = proto1Arg(&extract_Implementations_277, "<nothing>/extract", container_4, "core", 2177);
Value *v_10 = rslt9;
incRef(v_10, 2);

// static-fixed
// #line 2178 "/home/jim/toccata/core.toc"
Value *rslt11 = append_to_lazy_tail_2823(empty_list, tail_6, v_10);

dec_and_free(rslt11, 1);

// static-fixed
// #line 2177 "/home/jim/toccata/core.toc"
Value *rslt12 = maybe_4(empty_list, v_10);
switch (rslt12->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>' at $TOCCATA_DIR/core.toc, line 2178\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt12)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 424\n");
#endif
abort();
}
return(rslt12);
}

};};
Value *LazyList_first_2907(List *closures, Value *c_0) {
switch (c_0->type) {
case 34: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c'\n");
fprintf(stderr, "Needed LazyList, got %s\n", extractStr(type_name(empty_list, c_0)));
fprintf(stderr, "'LazyList' From:            \n$TOCCATA_DIR/core.toc:: 2165\n");
#endif
abort();
}
return(LazyList_first_2887(closures, c_0));
};
FnArity LazyList_first_2906 = {FnArityType, -1, 1, (List *)0, 0, LazyList_first_2907};
Value *LazyList_rest_2888(List *closures, Value *c_0) {
while (1) {
incRef(c_0, 3);
Value *rslt1 = reified_type_args_25(empty_list, c_0);
Value *container_4;
Value *lazy_5;
Value *tail_6;
Value *tail_2;
Value **destArgs3[4] = {&container_4, &lazy_5, &tail_6, &tail_2};
destructValue("core", "2165", (Value *)rslt1, 4, destArgs3);
incRef(container_4, 1);
incRef(lazy_5, 1);
switch (lazy_5->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'lazy' at $TOCCATA_DIR/core.toc, line 2165\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, lazy_5)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2184\n$TOCCATA_DIR/core.toc:: 2154\n");
#endif
abort();
}
incRef(tail_6, 1);

dec_and_free(tail_2, 1);
Value *rslt7 = proto1Arg(&first_Implementations_336, "<nothing>/first", c_0, "core", 2183);

dec_and_free(rslt7, 1);

// static-fixed
// #line 2184 "/home/jim/toccata/core.toc"
Value *rslt8 = rest_of_lazy_2829(empty_list, lazy_5);

// call invoke
// #line 2184 "/home/jim/toccata/core.toc"
Value *rslt9 = arityImpl2857(empty_list, reifiedPtr2867, container_4, rslt8, tail_6);
return(rslt9);

};};
Value *LazyList_rest_2909(List *closures, Value *c_0) {
switch (c_0->type) {
case 34: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c'\n");
fprintf(stderr, "Needed LazyList, got %s\n", extractStr(type_name(empty_list, c_0)));
fprintf(stderr, "'LazyList' From:            \n$TOCCATA_DIR/core.toc:: 2165\n");
#endif
abort();
}
return(LazyList_rest_2888(closures, c_0));
};
FnArity LazyList_rest_2908 = {FnArityType, -1, 1, (List *)0, 0, LazyList_rest_2909};
Value *LazyList_type_name_2889(List *closures, Value *x_0) {
while (1) {

dec_and_free(x_0, 1);
return(strPtr52);

};};
FnArity LazyList_type_name_2910 = {FnArityType, -1, 1, (List *)0, 0, LazyList_type_name_2889};
Value *LazyList_has_field_2890(List *closures, Value *x_0, Value *field_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(field_1, 5);
Value *orRslt2;
Value *rslt3 = identical_464(empty_list, dispatchFnPtr2837, field_1);
orRslt2 = rslt3;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(nothing_8, 1);
dec_and_free(field_1, 4);
dec_and_free(dispatchFnPtr2835, 1);
dec_and_free(dispatchFnPtr2836, 1);
dec_and_free(identical_463, 2);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *rslt4 = identical_464(empty_list, dispatchFnPtr2836, field_1);
orRslt2 = rslt4;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(nothing_8, 1);
dec_and_free(field_1, 2);
dec_and_free(dispatchFnPtr2835, 1);
dec_and_free(identical_463, 1);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
Value *rslt5 = identical_464(empty_list, dispatchFnPtr2835, field_1);
orRslt2 = rslt5;
if (!isNothing(orRslt2,"",0)) {
dec_and_free(nothing_8, 1);
return(orRslt2);
} else {
dec_and_free(orRslt2, 1);
return(nothing_8);
}
}
}

};};
FnArity LazyList_has_field_2912 = {FnArityType, -1, 2, (List *)0, 0, LazyList_has_field_2890};
Value *LazyList_container_2891(List *closures, Value *value_0, Value *container_1) {
while (1) {
incRef(value_0, 3);
incRef(container_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, value_0);
Value *rslt3 = Vector_store_1504(empty_list, rslt2, numPtr0, container_1);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 492\n");
#endif
abort();
}
Value *rslt4 = Maybe_extract_510(empty_list, rslt3);
Value *rslt5 = make_value_75(empty_list, value_0, rslt4);
return(rslt5);

};};
FnArity LazyList_container_2914 = {FnArityType, -1, 2, (List *)0, 0, LazyList_container_2891};
Value *LazyList_container_2892(List *closures, Value *value_0) {
while (1) {
incRef(value_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, value_0);
Value *rslt2 = Vector_nth_1503(empty_list, rslt1, numPtr0);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
Value *rslt3 = Maybe_extract_510(empty_list, rslt2);
return(rslt3);

};};
FnArity LazyList_container_2916 = {FnArityType, -1, 1, (List *)0, 0, LazyList_container_2892};
Value *LazyList_lazy_2893(List *closures, Value *value_0, Value *lazy_1) {
while (1) {
incRef(value_0, 3);
incRef(lazy_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, value_0);
Value *rslt3 = Vector_store_1504(empty_list, rslt2, numPtr3, lazy_1);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 492\n");
#endif
abort();
}
Value *rslt4 = Maybe_extract_510(empty_list, rslt3);
Value *rslt5 = make_value_75(empty_list, value_0, rslt4);
return(rslt5);

};};
FnArity LazyList_lazy_2918 = {FnArityType, -1, 2, (List *)0, 0, LazyList_lazy_2893};
Value *LazyList_lazy_2894(List *closures, Value *value_0) {
while (1) {
incRef(value_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, value_0);
Value *rslt2 = Vector_nth_1503(empty_list, rslt1, numPtr3);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
Value *rslt3 = Maybe_extract_510(empty_list, rslt2);
return(rslt3);

};};
FnArity LazyList_lazy_2920 = {FnArityType, -1, 1, (List *)0, 0, LazyList_lazy_2894};
Value *LazyList_tail_2895(List *closures, Value *value_0, Value *tail_1) {
while (1) {
incRef(value_0, 3);
incRef(tail_1, 1);
Value *rslt2 = reified_type_args_25(empty_list, value_0);
Value *rslt3 = Vector_store_1504(empty_list, rslt2, numPtr1, tail_1);
switch (rslt3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 492\n");
#endif
abort();
}
Value *rslt4 = Maybe_extract_510(empty_list, rslt3);
Value *rslt5 = make_value_75(empty_list, value_0, rslt4);
return(rslt5);

};};
FnArity LazyList_tail_2922 = {FnArityType, -1, 2, (List *)0, 0, LazyList_tail_2895};
Value *LazyList_tail_2896(List *closures, Value *value_0) {
while (1) {
incRef(value_0, 1);
Value *rslt1 = reified_type_args_25(empty_list, value_0);
Value *rslt2 = Vector_nth_1503(empty_list, rslt1, numPtr1);
switch (rslt2->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt2)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 486\n");
#endif
abort();
}
Value *rslt3 = Maybe_extract_510(empty_list, rslt2);
return(rslt3);

};};
FnArity LazyList_tail_2924 = {FnArityType, -1, 1, (List *)0, 0, LazyList_tail_2896};
Value *LazyList_get_2897(List *closures, Value *x_0, Value *field_1) {
while (1) {
incRef(x_0, 3);
incRef(field_1, 3);
Value *andRslt2;
Value *rslt3 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt3->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt3)));
abort();
}
andRslt2 = rslt3;
if (isNothing(andRslt2,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
return(nothing);
} else {
dec_and_free(andRslt2, 1);
Value *rslt7;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_421);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 2 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType2 *_fn = (FnType2 *)_arity->fn;
rslt7 = _fn(_arity->closures, field_1, x_0);
} else {
FnArity *arity4 = findFnArity(field_1, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
rslt7 = fn6(arity4->closures, x_0);
} else if(arity4 != (FnArity *)0 && arity4->variadic) {
FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(x_0, dynArgs5);
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt8 = maybe_4(empty_list, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 509\n");
#endif
abort();
}
return(rslt8);
}

};};
FnArity LazyList_get_2926 = {FnArityType, -1, 2, (List *)0, 0, LazyList_get_2897};
Value *LazyList_sha1_update_2898(List *closures, Value *x_0, Value *ctxt_1) {
while (1) {
incRef(x_0, 3);
incRef(ctxt_1, 3);
Value *rslt2 = sha1_update_type_1262(empty_list, x_0, ctxt_1);

dec_and_free(rslt2, 1);
Value *rslt3 = reified_type_args_25(empty_list, x_0);
Value *rslt4 = Vector_sha1_update_1501(empty_list, rslt3, ctxt_1);
return(rslt4);

};};
FnArity LazyList_sha1_update_2928 = {FnArityType, -1, 2, (List *)0, 0, LazyList_sha1_update_2898};
Value *LazyList_sha1_2899(List *closures, Value *x_0) {
while (1) {
incRef(x_0, 1);
Value *rslt1 = sha1_init_446(empty_list);
Value *rslt2 = proto2Arg(&sha1_update_Implementations_393, "sha1-update", x_0, rslt1, "", 0);
Value *rslt3 = sha1_finalize_452(empty_list, rslt2);
switch (rslt3->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Integer' From:            \n$TOCCATA_DIR/core.toc:: 499\n");
#endif
abort();
}
return(rslt3);

};};
FnArity LazyList_sha1_2930 = {FnArityType, -1, 1, (List *)0, 0, LazyList_sha1_2899};
Value *LazyList_empty_QM__2900(List *closures, Value *arg0) {
while (1) {
incRef(arg0, 1);
Value *rslt1 = reified_type_args_25(empty_list, arg0);
Value *container_4;
Value *lazy_5;
Value *tail_6;
Value *tail_2;
Value **destArgs3[4] = {&container_4, &lazy_5, &tail_6, &tail_2};
destructValue("core", "2165", (Value *)rslt1, 4, destArgs3);

dec_and_free(container_4, 1);

dec_and_free(lazy_5, 1);

dec_and_free(tail_6, 1);

dec_and_free(tail_2, 1);
return(nothing_8);

};};
Value *LazyList_empty_QM__2933(List *closures, Value *arg0) {
switch (arg0->type) {
case 34: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '_'\n");
fprintf(stderr, "Needed LazyList, got %s\n", extractStr(type_name(empty_list, arg0)));
fprintf(stderr, "'LazyList' From:            \n$TOCCATA_DIR/core.toc:: 2165\n");
#endif
abort();
}
return(LazyList_empty_QM__2900(closures, arg0));
};
FnArity LazyList_empty_QM__2932 = {FnArityType, -1, 1, (List *)0, 0, LazyList_empty_QM__2933};
Value *LazyList_assoc_STAR__2901(List *closures, Value *x_0, Value *field_1, Value *new_value_2, Value *arg3, Value *arg4) {
while (1) {
incRef(x_0, 5);
incRef(field_1, 3);
incRef(new_value_2, 1);

dec_and_free(arg3, 1);

dec_and_free(arg4, 1);
Value *orRslt5;
Value *andRslt6;
Value *rslt7 = proto2Arg(&has_field_Implementations_60, "has-field", x_0, field_1, "", 0);
if (rslt7->type != MaybeType) {
fprintf(stderr, "Wrong type of result returned at %s, line %d\n", "",0);
fprintf(stderr, "Expected Maybe, got %s\n", extractStr(type_name(empty_list, rslt7)));
abort();
}
andRslt6 = rslt7;
if (isNothing(andRslt6,"",0)) {
dec_and_free(field_1, 2);
dec_and_free(new_value_2, 2);
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);
} else {
dec_and_free(andRslt6, 1);
Value *rslt11;
if((field_1)->type != FunctionType) {
FnArity *_arity = (FnArity *)findProtoImpl(field_1->type, &invoke_Implementations_423);
if(_arity == (FnArity *)0) {
fprintf(stderr, "\n*** No implementation of 'invoke' with 3 arguments for type: %s (%" PRId64 ") at : 0\n",
extractStr(type_name(empty_list, field_1)), field_1->type);
abort();
}
FnType3 *_fn = (FnType3 *)_arity->fn;
rslt11 = _fn(_arity->closures, field_1, x_0, new_value_2);
} else {
FnArity *arity8 = findFnArity(field_1, 2);
if(arity8 != (FnArity *)0 && !arity8->variadic) {
FnType2 *fn10 = (FnType2 *)arity8->fn;
rslt11 = fn10(arity8->closures, x_0, new_value_2);
} else if(arity8 != (FnArity *)0 && arity8->variadic) {
FnType1 *fn10 = (FnType1 *)arity8->fn;
List *dynArgs9 = empty_list;
dynArgs9 = (List *)listCons(new_value_2, dynArgs9);
dynArgs9 = (List *)listCons(x_0, dynArgs9);
rslt11 = fn10(arity8->closures, (Value *)dynArgs9);
} else {
fprintf(stderr, "\n*** no arity found for '%s'.\n", ((Function *)field_1)->name);
  abort();
}
dec_and_free(field_1, 1);
}
Value *rslt12 = maybe_4(empty_list, rslt11);
andRslt6 = rslt12;
}
orRslt5 = andRslt6;
if (!isNothing(orRslt5,"",0)) {
dec_and_free(x_0, 2);
dec_and_free(maybe_3, 1);

} else {
dec_and_free(orRslt5, 1);
Value *rslt13 = maybe_4(empty_list, x_0);
orRslt5 = rslt13;
}
switch (orRslt5->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, orRslt5)));
fprintf(stderr, "'Maybe' From: \n");
#endif
abort();
}
Value *rslt14 = Maybe_extract_510(empty_list, orRslt5);
return(rslt14);

};};
FnArity LazyList_assoc_STAR__2934 = {FnArityType, -1, 5, (List *)0, 0, LazyList_assoc_STAR__2901};
ReifiedVal reifiedStatic2936 = {34, -1, (Value *)0, 0, {}};
Value *reifiedPtr2937 = (Value *)&reifiedStatic2936;

// --------- lazy-list -------------
Value *lazy_list_2939;
Value *lazy_list_2940(List *closures, Value *container_0) {
while (1) {
incRef(container_0, 1);

// static-fixed
// #line 2187 "/home/jim/toccata/core.toc"
Value *rslt1 = create_lazy_2805(empty_list);
Value *lazy_struct_2 = rslt1;
incRef(lazy_struct_2, 3);

// static-fixed
// #line 2188 "/home/jim/toccata/core.toc"
Value *rslt3 = get_lazy_2811(empty_list, lazy_struct_2);

// call invoke
// #line 2188 "/home/jim/toccata/core.toc"
Value *rslt4 = arityImpl2857(empty_list, reifiedPtr2867, container_0, rslt3, lazy_struct_2);
return(rslt4);

};};
FnArity lazy_list_2941 = {FnArityType, -1, 1, (List *)0, 0, lazy_list_2940};
Function lazy_list_2943 = {FunctionType, -1, "lazy-list", 1, {&lazy_list_2941}};
Value *lazy_list_2939 = (Value *)&lazy_list_2943;


// --------- null-term -------------
Value *null_term_2945;
Value *null_term_2946(List *closures, Value *s_0) {
while (1) {

// inline
// #line 2192 "/home/jim/toccata/core.toc"
return((Value *)nullTerm(s_0));

#

};};
Value *null_term_2948(List *closures, Value *s_0) {
switch (s_0->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 's' at $TOCCATA_DIR/core.toc, line 2190\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, s_0)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 2191\n");
#endif
abort();
}
return(null_term_2946(closures, s_0));
};
FnArity null_term_2947 = {FnArityType, -1, 1, (List *)0, 0, null_term_2948};
Function null_term_2949 = {FunctionType, -1, "null-term", 1, {&null_term_2947}};
Value *null_term_2945 = (Value *)&null_term_2949;


// --------- list-zipper -------------
Value *list_zipper_2951;
Value *anon_2955(List *closures, Value *firsts_0) {

while (1) {
incRef(firsts_0, 1);
Value *val5;
Value *val3;
Value *val1;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs10[4] = {&val5, &val3, &val1, &closuresTail};
destructValue("", "", (Value *)closures, 4, destArgs10);
incRef(val5, 1);
incRef(val3, 1);
switch (val3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, val3)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2197\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}
incRef(val1, 1);

dec_and_free(closuresTail, 1);
Value *rslt2 = proto2Arg(&map_Implementations_267, "<nothing>/map", val1, rest_314, "core", 2197);

// static-fixed
// #line 2197 "/home/jim/toccata/core.toc"
Value *rslt4 = cons_282(empty_list, firsts_0, val3);
Value *rslt9;
FnArity *arity6 = findFnArity(val5, 2);
if(arity6 != (FnArity *)0 && !arity6->variadic) { FnType2 *fn8 = (FnType2 *)arity6->fn;


// dynamic fn type
// #line 2197 "/home/jim/toccata/core.toc"
rslt9 = fn8(arity6->closures, rslt2, rslt4);
} else if(arity6 != (FnArity *)0 && arity6->variadic) { FnType1 *fn8 = (FnType1 *)arity6->fn;
List *dynArgs7 = empty_list;
dynArgs7 = (List *)listCons(rslt4, dynArgs7);
dynArgs7 = (List *)listCons(rslt2, dynArgs7);

// dynamic fn type
// #line 2197 "/home/jim/toccata/core.toc"
rslt9 = fn8(arity6->closures, (Value *)dynArgs7);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)val5)->name, "core", 2197);
  abort();
}
dec_and_free(val5, 1);
return(rslt9);

};};
Value *list_zipper_2952(List *closures, Value *lists_0, Value *zipped_1) {
while (1) {
incRef(lists_0, 2);
incRef(zipped_1, 2);

// static-fixed
// #line 2195 "/home/jim/toccata/core.toc"
Value *rslt2 = every_1630(empty_list, lists_0, first_317);
Value *mv_3 = rslt2;
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv' at $TOCCATA_DIR/core.toc, line 2195\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
incRef(mv_3, 1);
switch (mv_3->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'mv'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, mv_3)));
fprintf(stderr, "'Maybe' From:              \n$TOCCATA_DIR/core.toc:: 593\n$TOCCATA_DIR/core.toc:: 583\n");
#endif
abort();
}
FnArity *anon_4 = malloc_fnArity();
anon_4->count = 1;
anon_4->variadic = 0;
anon_4->fn = anon_2955;
anon_4->closures = empty_list;
anon_4->closures = listCons((Value *)lists_0, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)zipped_1, (List *)anon_4->closures);
anon_4->closures = listCons((Value *)list_zipper_2951, (List *)anon_4->closures);
Function *anon_2958 = malloc_function(1);
anon_2958->name = "anon";
anon_2958->arityCount = 1;
anon_2958->arities[0] = anon_4;
Value *fn2954 = (Value *)anon_2958;

// static-fixed
// #line 593 "/home/jim/toccata/core.toc"
Value *rslt5 = maybe_map_480(empty_list, mv_3, fn2954);
if (!isNothing(rslt5,"",0)) {
Value *rslt7 = maybeExtract(rslt5);
return(rslt7);
} else {
dec_and_free(rslt5, 1);
Value *rslt6 = proto1Arg(&reverse_Implementations_331, "<nothing>/reverse", zipped_1, "core", 2198);
return(rslt6);
}

};};
FnArity list_zipper_2959 = {FnArityType, -1, 2, (List *)0, 0, list_zipper_2952};
Function list_zipper_2961 = {FunctionType, -1, "list-zipper", 1, {&list_zipper_2959}};
Value *list_zipper_2951 = (Value *)&list_zipper_2961;


// --------- zip-lists -------------
Value *zip_lists_2963;
Value *zip_lists_2964(List *closures, Value *arg0) {
while (1) {
Value *l_3;
Value *lists_1;
Value **destArgs2[2] = {&l_3, &lists_1};
destructValue("core", "2200", (Value *)arg0, 2, destArgs2);
incRef(l_3, 1);
incRef(lists_1, 1);
switch (lists_1->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'l' at $TOCCATA_DIR/core.toc, line 2200\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, lists_1)));
fprintf(stderr, "'List' From:                \n$TOCCATA_DIR/core.toc:: 2201\n$TOCCATA_DIR/core.toc:: 362 \n");
#endif
abort();
}

// static-fixed
// #line 2201 "/home/jim/toccata/core.toc"
Value *rslt4 = cons_282(empty_list, l_3, lists_1);

// static-fixed
// #line 2201 "/home/jim/toccata/core.toc"
Value *rslt5 = list_zipper_2952(empty_list, rslt4, empty_list_0);
return(rslt5);

};};
Value *zip_lists_2966(List *closures, Value *args) {
Value *arg0;
Value **destArgs6[1] = {&arg0};
destructValue("core", "2200", (Value *)args, 1, destArgs6);
return(zip_lists_2964(closures, args));
};
FnArity zip_lists_2965 = {FnArityType, -1, 1, (List *)0, 1, zip_lists_2966};
Function zip_lists_2967 = {FunctionType, -1, "zip-lists", 1, {&zip_lists_2965}};
Value *zip_lists_2963 = (Value *)&zip_lists_2967;

Value *arityImpl2969(List *closures, Value *, Value *);
Integer num9 = {IntegerType, -1, 6};
Value *numPtr9 = (Value *)&num9;
Integer num10 = {IntegerType, -1, 8};
Value *numPtr10 = (Value *)&num10;
Value *arityImpl2969(List *closures, Value *x_0, Value *y_1) {
while (1) {

dec_and_free(x_0, 1);
incRef(y_1, 1);
List *newList2 = empty_list;
newList2 = listCons((Value *)numPtr10, newList2);
newList2 = listCons((Value *)numPtr9, newList2);
Value *rslt3 = (Value *)newList2;
switch (rslt3->type) {
case 6: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed List, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'List' From: \n");
#endif
abort();
}
switch (rslt3->type) {
case 6: 
case 8: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Sequence, got %s\n", extractStr(type_name(empty_list, rslt3)));
fprintf(stderr, "'Sequence' From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (countSeq(incRef(rslt3, 1)) < 2) {
#ifndef EMBEDDED
fprintf(stderr, "Insufficient values\n");
fprintf(stderr, "Needed 2, got %" PRId64 "\n", ((Integer *)count(empty_list, rslt3))->numVal);
fprintf(stderr, "From: \nMin Length From: \n: 0              \n: 0              \n: 0              \n");
#endif
abort();
}
if (1) {
 // TODO: I'm sure this is awful
incRef(rslt3, 1);
Value *rslt3_0;
Value *rslt3_1;
Value *rslt3_2;
Value **rslt3_args[3] = {&rslt3_0, &rslt3_1, &rslt3_2};
destructValue("", "0", (Value *)rslt3, 3, rslt3_args);
switch (rslt3_0->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_0)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
switch (rslt3_1->type) {
case 1: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Integer, got %s\n", extractStr(type_name(empty_list, rslt3_1)));
fprintf(stderr, "'Integer' From: \n");
#endif
abort();
}
dec_and_free(rslt3_0, 1);
dec_and_free(rslt3_1, 1);
dec_and_free(rslt3_2, 1);
}
Value *rslt4 = reified_get_type_31(empty_list, y_1);
List *newList5 = empty_list;
newList5 = listCons((Value *)rslt4, newList5);
newList5 = listCons((Value *)_EQ__STAR__440, newList5);
Value *rslt6 = (Value *)newList5;
Value *rslt7 = partial_720(empty_list, (Value *)rslt6);
Value *rslt8 = some_714(empty_list, rslt3, rslt7);
switch (rslt8->type) {
case 7: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed Maybe, got %s\n", extractStr(type_name(empty_list, rslt8)));
fprintf(stderr, "'Maybe' From:             \n$TOCCATA_DIR/core.toc:: 58\n");
#endif
abort();
}
return(rslt8);

};};
FnArity staticArity2970 = {FnArityType, -1, 2, (List *)0, 0, arityImpl2969};
ReifiedVal reifiedStatic2972 = {36, -1, (Value *)0, 0, {}};
Value *reifiedPtr2973 = (Value *)&reifiedStatic2972;
SubString sym0 = {SymbolType, -1, 5, 0, 0, "bogus"};
Value *symPtr0 = (Value *)&sym0;
Value *anon_2976(List *closures, Value *arg0) {

while (1) {
Value *x_3;
Value *y_4;
Value *t_1;
Value **destArgs2[3] = {&x_3, &y_4, &t_1};
destructValue("runtime-tests/variadic-count-2.toc", "4", (Value *)arg0, 3, destArgs2);
incRef(x_3, 1);

dec_and_free(y_4, 1);

dec_and_free(t_1, 1);
Value *val5;
Value *closuresTail;
incRef((Value *)closures, 1);
Value **destArgs9[2] = {&val5, &closuresTail};
destructValue("", "", (Value *)closures, 2, destArgs9);
incRef(val5, 1);

dec_and_free(closuresTail, 1);

// call-list
// #line 5 "runtime-tests/variadic-count-2.toc"
List *newList6 = empty_list;
newList6 = listCons((Value *)x_3, newList6);
newList6 = listCons((Value *)val5, newList6);
Value *rslt7 = (Value *)newList6;

// static-variadic
// #line 5 "runtime-tests/variadic-count-2.toc"
Value *rslt8 = println_881(empty_list, (Value *)rslt7);
return(rslt8);

};};
Value *main_2974(List *closures, Value *arg0) {
while (1) {

dec_and_free(arg0, 1);
Value *a_1 = symPtr0;
FnArity *anon_2 = malloc_fnArity();
anon_2->count = 1;
anon_2->variadic = 1;
anon_2->fn = anon_2976;
anon_2->closures = empty_list;
anon_2->closures = listCons((Value *)a_1, (List *)anon_2->closures);
Function *anon_2979 = malloc_function(1);
anon_2979->name = "anon";
anon_2979->arityCount = 1;
anon_2979->arities[0] = anon_2;
Value *fn2975 = (Value *)anon_2979;
Value *f_3 = fn2975;
incRef(f_3, 1);
Value *rslt7;
FnArity *arity4 = findFnArity(f_3, 1);
if(arity4 != (FnArity *)0 && !arity4->variadic) { FnType1 *fn6 = (FnType1 *)arity4->fn;


// dynamic fn type
// #line 6 "runtime-tests/variadic-count-2.toc"
rslt7 = fn6(arity4->closures, numPtr3);
} else if(arity4 != (FnArity *)0 && arity4->variadic) { FnType1 *fn6 = (FnType1 *)arity4->fn;
List *dynArgs5 = empty_list;
dynArgs5 = (List *)listCons(numPtr3, dynArgs5);

// dynamic fn type
// #line 6 "runtime-tests/variadic-count-2.toc"
rslt7 = fn6(arity4->closures, (Value *)dynArgs5);
} else {
fprintf(stderr, "\n*** no arity found for '%s' at: %s, %d.\n", ((Function *)f_3)->name, "runtime-tests/variadic-count-2.toc", 6);
  abort();
}
dec_and_free(f_3, 1);
return(rslt7);

};};
FnArity main_2980 = {FnArityType, -1, 1, (List *)0, 0, main_2974};

#

int main (int argc, char **argv) {
maybeNothing = maybe((List *)0, (Value *)0, nothing);
maybeNothing->refs = -1;
outstream = stdout;
__atomic_store(&futuresQueue.input, &empty_list, __ATOMIC_RELAXED);
futuresQueue.output = empty_list;
pthread_mutex_init(&futuresQueue.mutex, NULL);
pthread_cond_init(&futuresQueue.notEmpty, NULL);
pthread_mutex_init(&shutDown.access, NULL);
startWorkers();
switch (strPtr39->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr39)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1917\n$TOCCATA_DIR/core.toc:: 823 \n");
#endif
abort();
}
switch (strPtr39->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr39)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1917\n$TOCCATA_DIR/core.toc:: 1917\n");
#endif
abort();
}

// static-fixed
// #line 1917 "/home/jim/toccata/core.toc"
Value *rslt0 = char_code_775(empty_list, strPtr39);
code_0_2469 = rslt0;
code_0_2469->refs = -1;

#
switch (strPtr40->type) {
case 2: 
case 5: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter 'c'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr40)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1918\n$TOCCATA_DIR/core.toc:: 823 \n");
#endif
abort();
}
switch (strPtr40->type) {
case 2: 
break;
 default:
#ifndef EMBEDDED
fprintf(stderr, "Invalid type of value for parameter '<unknown>'\n");
fprintf(stderr, "Needed String, got %s\n", extractStr(type_name(empty_list, strPtr40)));
fprintf(stderr, "'String' From:              \n$TOCCATA_DIR/core.toc:: 1918\n$TOCCATA_DIR/core.toc:: 1918\n");
#endif
abort();
}

// static-fixed
// #line 1918 "/home/jim/toccata/core.toc"
Value *rslt1 = char_code_775(empty_list, strPtr40);
code_9_2470 = rslt1;
code_9_2470->refs = -1;

#

type_val_2487_2488 = reifiedPtr2638;

type_val_2720_2721 = reifiedPtr2786;

// static-fixed
// #line 2080 "/home/jim/toccata/core.toc"
Value *rslt2 = int_generator_2790(empty_list);
sym_counter_2796 = rslt2;
sym_counter_2796->refs = -1;

#

type_val_2833_2834 = reifiedPtr2937;

#
  List *argList = malloc_list();
  argList->len = 0;
  argList->head = (Value *)0;
  argList->tail = (List *)0;
  List *tail = argList;
  for(int i = 0; i < argc; i++) {
     List *newTail = malloc_list();
     newTail->len = 0;
     newTail->tail = (List *)0;
     newTail->head = (Value *)0;
     tail->head = stringValue(argv[i]);
     tail->tail = newTail;
     tail = newTail;
     argList->len++;
}
  argList->refs = -1;
Value *the_final_answer = main_2974((List *)empty_list, (Value *)argList);

#ifdef CHECK_MEM_LEAK
freeGlobal(code_0_2469);
freeGlobal(code_9_2470);
freeGlobal(sym_counter_2796);

#
  cleanupMemory(the_final_answer, maybeNothing, argList);
  if (malloc_count - free_count != 0)
    return(1);
#endif
#
  return(0);
};

// wrap 2 args
ProtoImpls wrap_Implementations_263 = {6, {{6, (Value *)&List_wrap_592}, {8, (Value *)&Vector_wrap_1585}, {15, (Value *)&Promise_wrap_2228}, {16, (Value *)&Future_wrap_2337}, {30, (Value *)&HashSet_wrap_2616}, {7, (Value *)&Maybe_wrap_532}}};
Value *wrap_262(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&wrap_Implementations_263, "wrap", arg0, arg1, "core", 316));
}
FnArity protoFnArity3108 = {FnArityType, -1, 2, (List *)0, 0, wrap_262};
Function protoFn3107 = {FunctionType, -1, "wrap", 1, {&protoFnArity3108}};
Value *wrap_261 = (Value *)&protoFn3107;


// reduce 3 args
ProtoImpls reduce_Implementations_299 = {5, {{2, (Value *)&String_reduce_1082}, {5, (Value *)&String_reduce_1194}, {6, (Value *)&List_reduce_638}, {8, (Value *)&Vector_reduce_1535}, {30, (Value *)&HashSet_reduce_2633}}};
Value *reduce_298(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&reduce_Implementations_299, "reduce", arg0, arg1, arg2, "core", 404));
}
FnArity protoFnArity3106 = {FnArityType, -1, 3, (List *)0, 0, reduce_298};
Function protoFn3105 = {FunctionType, -1, "reduce", 1, {&protoFnArity3106}};
Value *reduce_297 = (Value *)&protoFn3105;


// vals 1 args
ProtoImpls vals_Implementations_402 = {3, {{12, (Value *)&ArrayNode_vals_1822}, {13, (Value *)&HashCollisionNode_vals_1909}, {11, (Value *)&BitmapIndexNode_vals_1996}}};
Value *vals_401(List *closures, Value *arg0) {
  return(proto1Arg(&vals_Implementations_402, "vals", arg0, "core", 521));
}
FnArity protoFnArity3104 = {FnArityType, -1, 1, (List *)0, 0, vals_401};
Function protoFn3103 = {FunctionType, -1, "vals", 1, {&protoFnArity3104}};
Value *vals_400 = (Value *)&protoFn3103;


// empty 1 args
ProtoImpls empty_Implementations_301 = {5, {{2, (Value *)&String_empty_1114}, {5, (Value *)&String_empty_1226}, {6, (Value *)&List_empty_602}, {8, (Value *)&Vector_empty_996}, {30, (Value *)&HashSet_empty_2627}}};
Value *empty_300(List *closures, Value *arg0) {
  return(proto1Arg(&empty_Implementations_301, "empty", arg0, "core", 383));
}
FnArity protoFnArity3102 = {FnArityType, -1, 1, (List *)0, 0, empty_300};
Function protoFn3101 = {FunctionType, -1, "empty", 1, {&protoFnArity3102}};
Value *empty_296 = (Value *)&protoFn3101;


// split 2 args
ProtoImpls split_Implementations_323 = {2, {{6, (Value *)&List_split_1385}, {8, (Value *)&Vector_split_1540}}};
Value *split_322(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&split_Implementations_323, "split", arg0, arg1, "core", 443));
}
FnArity protoFnArity3100 = {FnArityType, -1, 2, (List *)0, 0, split_322};

// split 3 args
ProtoImpls split_Implementations_325 = {2, {{6, (Value *)&List_split_1383}, {8, (Value *)&Vector_split_1538}}};
Value *split_324(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&split_Implementations_325, "split", arg0, arg1, arg2, "core", 443));
}
FnArity protoFnArity3099 = {FnArityType, -1, 3, (List *)0, 0, split_324};
Function protoFn3098 = {FunctionType, -1, "split", 2, {&protoFnArity3100, &protoFnArity3099}};
Value *split_321 = (Value *)&protoFn3098;


// .lazy 2 args
ProtoImpls protoImpls2845 = {1, {{34, (Value *)&LazyList_lazy_2918}}};
Value *protoImpl2844(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&protoImpls2845, ".lazy", arg0, arg1, "core", 0));
}
FnArity protoFnArity3097 = {FnArityType, -1, 2, (List *)0, 0, protoImpl2844};

// .lazy 1 args
ProtoImpls protoImpls2843 = {1, {{34, (Value *)&LazyList_lazy_2920}}};
Value *protoImpl2842(List *closures, Value *arg0) {
  return(proto1Arg(&protoImpls2843, ".lazy", arg0, "core", 0));
}
FnArity protoFnArity3096 = {FnArityType, -1, 1, (List *)0, 0, protoImpl2842};
Function protoFn3095 = {FunctionType, -1, ".lazy", 2, {&protoFnArity3097, &protoFnArity3096}};
Value *dispatchFnPtr2836 = (Value *)&protoFn3095;


// to-str 1 args
ProtoImpls to_str_Implementations_328 = {4, {{2, (Value *)&String_to_str_1058}, {5, (Value *)&String_to_str_1170}, {6, (Value *)&List_to_str_821}, {8, (Value *)&Vector_to_str_990}}};
Value *to_str_327(List *closures, Value *arg0) {
  return(proto1Arg(&to_str_Implementations_328, "to-str", arg0, "core", 455));
}
FnArity protoFnArity3094 = {FnArityType, -1, 1, (List *)0, 0, to_str_327};
Function protoFn3093 = {FunctionType, -1, "to-str", 1, {&protoFnArity3094}};
Value *to_str_320 = (Value *)&protoFn3093;


// reverse 1 args
ProtoImpls reverse_Implementations_331 = {4, {{2, (Value *)&String_reverse_1084}, {5, (Value *)&String_reverse_1196}, {6, (Value *)&List_reverse_580}, {8, (Value *)&Vector_reverse_1533}}};
Value *reverse_330(List *closures, Value *arg0) {
  return(proto1Arg(&reverse_Implementations_331, "reverse", arg0, "core", 449));
}
FnArity protoFnArity3092 = {FnArityType, -1, 1, (List *)0, 0, reverse_330};
Function protoFn3091 = {FunctionType, -1, "reverse", 1, {&protoFnArity3092}};
Value *reverse_319 = (Value *)&protoFn3091;


// nth 2 args
ProtoImpls nth_Implementations_385 = {4, {{2, (Value *)&String_nth_1110}, {5, (Value *)&String_nth_1222}, {6, (Value *)&List_nth_1410}, {8, (Value *)&Vector_nth_1574}}};
Value *nth_384(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&nth_Implementations_385, "nth", arg0, arg1, "core", 482));
}
FnArity protoFnArity3090 = {FnArityType, -1, 2, (List *)0, 0, nth_384};
Function protoFn3089 = {FunctionType, -1, "nth", 1, {&protoFnArity3090}};
Value *nth_383 = (Value *)&protoFn3089;


// assoc* 5 args
ProtoImpls assoc_STAR__Implementations_14 = {6, {{12, (Value *)&ArrayNode_assoc_STAR__1680}, {13, (Value *)&HashCollisionNode_assoc_STAR__1704}, {30, (Value *)&HashSet_assoc_STAR__2635}, {11, (Value *)&BitmapIndexNode_assoc_STAR__1658}, {34, (Value *)&LazyList_assoc_STAR__2934}, {32, (Value *)&IntGenerator_assoc_STAR__2783}}};
Value *assoc_STAR__13(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4) {
  return(proto5Arg(&assoc_STAR__Implementations_14, "assoc*", arg0, arg1, arg2, arg3, arg4, "core", 18));
}
FnArity protoFnArity3088 = {FnArityType, -1, 5, (List *)0, 0, assoc_STAR__13};
Function protoFn3087 = {FunctionType, -1, "assoc*", 1, {&protoFnArity3088}};
Value *assoc_STAR__12 = (Value *)&protoFn3087;


// type-name 1 args
ProtoImpls type_name_Implementations_42 = {21, {{2, (Value *)&String_type_name_1091}, {5, (Value *)&String_type_name_1203}, {4, (Value *)&Function_type_name_843}, {6, (Value *)&List_type_name_1392}, {8, (Value *)&Vector_type_name_1547}, {31, (Value *)&staticArity2504}, {33, (Value *)&staticArity2737}, {17, (Value *)&Agent_type_name_2400}, {12, (Value *)&ArrayNode_type_name_1806}, {13, (Value *)&HashCollisionNode_type_name_1893}, {15, (Value *)&Promise_type_name_2204}, {16, (Value *)&Future_type_name_2315}, {30, (Value *)&HashSet_type_name_2572}, {1, (Value *)&Integer_type_name_953}, {10, (Value *)&Symbol_type_name_1250}, {11, (Value *)&BitmapIndexNode_type_name_1980}, {34, (Value *)&LazyList_type_name_2910}, {7, (Value *)&Maybe_type_name_1294}, {32, (Value *)&IntGenerator_type_name_2767}, {0, (Value *)&Default_type_name_44}, {35, (Value *)&staticArity2860}}};
Value *type_name_41(List *closures, Value *arg0) {
  return(proto1Arg(&type_name_Implementations_42, "type-name", arg0, "core", 45));
}
FnArity protoFnArity3086 = {FnArityType, -1, 1, (List *)0, 0, type_name_41};
Function protoFn3085 = {FunctionType, -1, "type-name", 1, {&protoFnArity3086}};
Value *type_name_40 = (Value *)&protoFn3085;


// sha1-update 2 args
ProtoImpls sha1_update_Implementations_393 = {11, {{2, (Value *)&String_sha1_update_1101}, {5, (Value *)&String_sha1_update_1213}, {6, (Value *)&List_sha1_update_1401}, {8, (Value *)&Vector_sha1_update_1565}, {17, (Value *)&Agent_sha1_update_2402}, {30, (Value *)&HashSet_sha1_update_2597}, {1, (Value *)&Integer_sha1_update_957}, {10, (Value *)&Symbol_sha1_update_1256}, {34, (Value *)&LazyList_sha1_update_2928}, {7, (Value *)&Maybe_sha1_update_1301}, {32, (Value *)&IntGenerator_sha1_update_2777}}};
Value *sha1_update_392(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&sha1_update_Implementations_393, "sha1-update", arg0, arg1, "core", 496));
}
FnArity protoFnArity3084 = {FnArityType, -1, 2, (List *)0, 0, sha1_update_392};
Function protoFn3083 = {FunctionType, -1, "sha1-update", 1, {&protoFnArity3084}};
Value *sha1_update_391 = (Value *)&protoFn3083;


// .gen 2 args
ProtoImpls protoImpls2726 = {1, {{32, (Value *)&IntGenerator_gen_2771}}};
Value *protoImpl2725(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&protoImpls2726, ".gen", arg0, arg1, "core", 0));
}
FnArity protoFnArity3082 = {FnArityType, -1, 2, (List *)0, 0, protoImpl2725};

// .gen 1 args
ProtoImpls protoImpls2724 = {1, {{32, (Value *)&IntGenerator_gen_2773}}};
Value *protoImpl2723(List *closures, Value *arg0) {
  return(proto1Arg(&protoImpls2724, ".gen", arg0, "core", 0));
}
FnArity protoFnArity3081 = {FnArityType, -1, 1, (List *)0, 0, protoImpl2723};
Function protoFn3080 = {FunctionType, -1, ".gen", 2, {&protoFnArity3082, &protoFnArity3081}};
Value *dispatchFnPtr2722 = (Value *)&protoFn3080;


// .tail 2 args
ProtoImpls protoImpls2849 = {1, {{34, (Value *)&LazyList_tail_2922}}};
Value *protoImpl2848(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&protoImpls2849, ".tail", arg0, arg1, "core", 0));
}
FnArity protoFnArity3079 = {FnArityType, -1, 2, (List *)0, 0, protoImpl2848};

// .tail 1 args
ProtoImpls protoImpls2847 = {1, {{34, (Value *)&LazyList_tail_2924}}};
Value *protoImpl2846(List *closures, Value *arg0) {
  return(proto1Arg(&protoImpls2847, ".tail", arg0, "core", 0));
}
FnArity protoFnArity3078 = {FnArityType, -1, 1, (List *)0, 0, protoImpl2846};
Function protoFn3077 = {FunctionType, -1, ".tail", 2, {&protoFnArity3079, &protoFnArity3078}};
Value *dispatchFnPtr2835 = (Value *)&protoFn3077;


// seq 1 args
ProtoImpls seq_Implementations_333 = {8, {{2, (Value *)&String_seq_1060}, {5, (Value *)&String_seq_1172}, {6, (Value *)&List_seq_578}, {8, (Value *)&Vector_seq_977}, {12, (Value *)&ArrayNode_seq_1804}, {13, (Value *)&HashCollisionNode_seq_1891}, {30, (Value *)&HashSet_seq_2570}, {11, (Value *)&BitmapIndexNode_seq_1978}}};
Value *seq_332(List *closures, Value *arg0) {
  return(proto1Arg(&seq_Implementations_333, "seq", arg0, "core", 413));
}
FnArity protoFnArity3076 = {FnArityType, -1, 1, (List *)0, 0, seq_332};
Function protoFn3075 = {FunctionType, -1, "seq", 1, {&protoFnArity3076}};
Value *seq_318 = (Value *)&protoFn3075;


// string-list 1 args
ProtoImpls string_list_Implementations_797 = {19, {{2, (Value *)&String_string_list_1052}, {5, (Value *)&String_string_list_1164}, {4, (Value *)&Function_string_list_837}, {6, (Value *)&List_string_list_1368}, {8, (Value *)&Vector_string_list_1511}, {31, (Value *)&staticArity2502}, {33, (Value *)&staticArity2735}, {17, (Value *)&Agent_string_list_2396}, {12, (Value *)&ArrayNode_string_list_1787}, {13, (Value *)&HashCollisionNode_string_list_1874}, {15, (Value *)&Promise_string_list_2199}, {16, (Value *)&Future_string_list_2311}, {30, (Value *)&HashSet_string_list_2564}, {1, (Value *)&Integer_string_list_947}, {10, (Value *)&Symbol_string_list_1244}, {11, (Value *)&BitmapIndexNode_string_list_1961}, {34, (Value *)&LazyList_string_list_2902}, {7, (Value *)&Maybe_string_list_1283}, {35, (Value *)&staticArity2858}}};
Value *string_list_796(List *closures, Value *arg0) {
  return(proto1Arg(&string_list_Implementations_797, "string-list", arg0, "core", 856));
}
FnArity protoFnArity3074 = {FnArityType, -1, 1, (List *)0, 0, string_list_796};
Function protoFn3073 = {FunctionType, -1, "string-list", 1, {&protoFnArity3074}};
Value *string_list_795 = (Value *)&protoFn3073;


// flatten 1 args
ProtoImpls flatten_Implementations_265 = {2, {{6, (Value *)&List_flatten_594}, {8, (Value *)&Vector_flatten_1596}}};
Value *flatten_264(List *closures, Value *arg0) {
  return(proto1Arg(&flatten_Implementations_265, "flatten", arg0, "core", 292));
}
FnArity protoFnArity3072 = {FnArityType, -1, 1, (List *)0, 0, flatten_264};
Function protoFn3071 = {FunctionType, -1, "flatten", 1, {&protoFnArity3072}};
Value *flatten_260 = (Value *)&protoFn3071;


// map 2 args
ProtoImpls map_Implementations_267 = {6, {{6, (Value *)&List_map_590}, {8, (Value *)&Vector_map_1583}, {15, (Value *)&Promise_map_2226}, {16, (Value *)&Future_map_2335}, {30, (Value *)&HashSet_map_2623}, {7, (Value *)&Maybe_map_526}}};
Value *map_266(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&map_Implementations_267, "map", arg0, arg1, "core", 326));
}
FnArity protoFnArity3070 = {FnArityType, -1, 2, (List *)0, 0, map_266};
Function protoFn3069 = {FunctionType, -1, "map", 1, {&protoFnArity3070}};
Value *map_259 = (Value *)&protoFn3069;


// send* 2 args
ProtoImpls send_STAR__Implementations_269 = {1, {{17, (Value *)&Agent_send_STAR__2406}}};
Value *send_STAR__268(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&send_STAR__Implementations_269, "send*", arg0, arg1, "core", 332));
}
FnArity protoFnArity3068 = {FnArityType, -1, 2, (List *)0, 0, send_STAR__268};
Function protoFn3067 = {FunctionType, -1, "send*", 1, {&protoFnArity3068}};
Value *send_STAR__258 = (Value *)&protoFn3067;


// dissoc* 4 args
ProtoImpls dissoc_STAR__Implementations_16 = {3, {{12, (Value *)&ArrayNode_dissoc_STAR__1686}, {13, (Value *)&HashCollisionNode_dissoc_STAR__1706}, {11, (Value *)&BitmapIndexNode_dissoc_STAR__1660}}};
Value *dissoc_STAR__15(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3) {
  return(proto4Arg(&dissoc_STAR__Implementations_16, "dissoc*", arg0, arg1, arg2, arg3, "core", 19));
}
FnArity protoFnArity3066 = {FnArityType, -1, 4, (List *)0, 0, dissoc_STAR__15};
Function protoFn3065 = {FunctionType, -1, "dissoc*", 1, {&protoFnArity3066}};
Value *dissoc_STAR__11 = (Value *)&protoFn3065;


// .set-map 2 args
ProtoImpls protoImpls2493 = {1, {{30, (Value *)&HashSet_set_map_2576}}};
Value *protoImpl2492(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&protoImpls2493, ".set-map", arg0, arg1, "core", 0));
}
FnArity protoFnArity3064 = {FnArityType, -1, 2, (List *)0, 0, protoImpl2492};

// .set-map 1 args
ProtoImpls protoImpls2491 = {1, {{30, (Value *)&HashSet_set_map_2578}}};
Value *protoImpl2490(List *closures, Value *arg0) {
  return(proto1Arg(&protoImpls2491, ".set-map", arg0, "core", 0));
}
FnArity protoFnArity3063 = {FnArityType, -1, 1, (List *)0, 0, protoImpl2490};
Function protoFn3062 = {FunctionType, -1, ".set-map", 2, {&protoFnArity3064, &protoFnArity3063}};
Value *dispatchFnPtr2489 = (Value *)&protoFn3062;


// conj 2 args
ProtoImpls conj_Implementations_303 = {3, {{6, (Value *)&List_conj_604}, {8, (Value *)&Vector_conj_1002}, {30, (Value *)&HashSet_conj_2631}}};
Value *conj_302(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&conj_Implementations_303, "conj", arg0, arg1, "core", 388));
}
FnArity protoFnArity3061 = {FnArityType, -1, 2, (List *)0, 0, conj_302};
Function protoFn3060 = {FunctionType, -1, "conj", 1, {&protoFnArity3061}};
Value *conj_295 = (Value *)&protoFn3060;


// invoke 2 args
ProtoImpls invoke_Implementations_421 = {3, {{31, (Value *)&staticArity2508}, {33, (Value *)&staticArity2741}, {30, (Value *)&HashSet_invoke_2606}}};
Value *invoke_420(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&invoke_Implementations_421, "invoke", arg0, arg1, "core", 535));
}
FnArity protoFnArity3059 = {FnArityType, -1, 2, (List *)0, 0, invoke_420};

// invoke 5 args
ProtoImpls invoke_Implementations_427 = {0, {}};
Value *invoke_426(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4) {
  return(proto5Arg(&invoke_Implementations_427, "invoke", arg0, arg1, arg2, arg3, arg4, "core", 535));
}
FnArity protoFnArity3058 = {FnArityType, -1, 5, (List *)0, 0, invoke_426};

// invoke 4 args
ProtoImpls invoke_Implementations_425 = {1, {{35, (Value *)&staticArity2864}}};
Value *invoke_424(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3) {
  return(proto4Arg(&invoke_Implementations_425, "invoke", arg0, arg1, arg2, arg3, "core", 535));
}
FnArity protoFnArity3057 = {FnArityType, -1, 4, (List *)0, 0, invoke_424};

// invoke 6 args
ProtoImpls invoke_Implementations_429 = {0, {}};
Value *invoke_428(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5) {
  return(proto6Arg(&invoke_Implementations_429, "invoke", arg0, arg1, arg2, arg3, arg4, arg5, "core", 535));
}
FnArity protoFnArity3056 = {FnArityType, -1, 6, (List *)0, 0, invoke_428};

// invoke 8 args
ProtoImpls invoke_Implementations_433 = {0, {}};
Value *invoke_432(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7) {
  return(proto8Arg(&invoke_Implementations_433, "invoke", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, "core", 535));
}
FnArity protoFnArity3055 = {FnArityType, -1, 8, (List *)0, 0, invoke_432};

// invoke 3 args
ProtoImpls invoke_Implementations_423 = {1, {{7, (Value *)&Maybe_invoke_524}}};
Value *invoke_422(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&invoke_Implementations_423, "invoke", arg0, arg1, arg2, "core", 535));
}
FnArity protoFnArity3054 = {FnArityType, -1, 3, (List *)0, 0, invoke_422};

// invoke 1 args
ProtoImpls invoke_Implementations_419 = {0, {}};
Value *invoke_418(List *closures, Value *arg0) {
  return(proto1Arg(&invoke_Implementations_419, "invoke", arg0, "core", 535));
}
FnArity protoFnArity3053 = {FnArityType, -1, 1, (List *)0, 0, invoke_418};

// invoke 9 args
ProtoImpls invoke_Implementations_435 = {0, {}};
Value *invoke_434(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6, Value *arg7, Value *arg8) {
  return(proto9Arg(&invoke_Implementations_435, "invoke", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, "core", 535));
}
FnArity protoFnArity3052 = {FnArityType, -1, 9, (List *)0, 0, invoke_434};

// invoke 7 args
ProtoImpls invoke_Implementations_431 = {0, {}};
Value *invoke_430(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4, Value *arg5, Value *arg6) {
  return(proto7Arg(&invoke_Implementations_431, "invoke", arg0, arg1, arg2, arg3, arg4, arg5, arg6, "core", 535));
}
FnArity protoFnArity3051 = {FnArityType, -1, 7, (List *)0, 0, invoke_430};
Function protoFn3050 = {FunctionType, -1, "invoke", 9, {&protoFnArity3059, &protoFnArity3058, &protoFnArity3057, &protoFnArity3056, &protoFnArity3055, &protoFnArity3054, &protoFnArity3053, &protoFnArity3052, &protoFnArity3051}};
Value *invoke_417 = (Value *)&protoFn3050;


// show* 2 args
ProtoImpls show_STAR__Implementations_800 = {14, {{2, (Value *)&String_show_STAR__1054}, {5, (Value *)&String_show_STAR__1166}, {4, (Value *)&Function_show_STAR__839}, {6, (Value *)&List_show_STAR__1376}, {8, (Value *)&Vector_show_STAR__1519}, {17, (Value *)&Agent_show_STAR__2398}, {12, (Value *)&ArrayNode_show_STAR__1795}, {13, (Value *)&HashCollisionNode_show_STAR__1882}, {15, (Value *)&Promise_show_STAR__2202}, {16, (Value *)&Future_show_STAR__2313}, {1, (Value *)&Integer_show_STAR__949}, {10, (Value *)&Symbol_show_STAR__1246}, {11, (Value *)&BitmapIndexNode_show_STAR__1969}, {7, (Value *)&Maybe_show_STAR__1290}}};
Value *show_STAR__799(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&show_STAR__Implementations_800, "show*", arg0, arg1, "core", 860));
}
FnArity protoFnArity3049 = {FnArityType, -1, 2, (List *)0, 0, show_STAR__799};
Function protoFn3048 = {FunctionType, -1, "show*", 1, {&protoFnArity3049}};
Value *show_STAR__794 = (Value *)&protoFn3048;


// first 1 args
ProtoImpls first_Implementations_336 = {5, {{2, (Value *)&String_first_1069}, {5, (Value *)&String_first_1181}, {6, (Value *)&List_first_582}, {8, (Value *)&Vector_first_1525}, {34, (Value *)&LazyList_first_2906}}};
Value *first_335(List *closures, Value *arg0) {
  return(proto1Arg(&first_Implementations_336, "first", arg0, "core", 421));
}
FnArity protoFnArity3047 = {FnArityType, -1, 1, (List *)0, 0, first_335};
Function protoFn3046 = {FunctionType, -1, "first", 1, {&protoFnArity3047}};
Value *first_317 = (Value *)&protoFn3046;


// butlast 1 args
ProtoImpls butlast_Implementations_339 = {4, {{2, (Value *)&String_butlast_1080}, {5, (Value *)&String_butlast_1192}, {6, (Value *)&List_butlast_1380}, {8, (Value *)&Vector_butlast_1531}}};
Value *butlast_338(List *closures, Value *arg0) {
  return(proto1Arg(&butlast_Implementations_339, "butlast", arg0, "core", 436));
}
FnArity protoFnArity3045 = {FnArityType, -1, 1, (List *)0, 0, butlast_338};
Function protoFn3044 = {FunctionType, -1, "butlast", 1, {&protoFnArity3045}};
Value *butlast_316 = (Value *)&protoFn3044;


// zero 1 args
ProtoImpls zero_Implementations_239 = {9, {{2, (Value *)&String_zero_1097}, {5, (Value *)&String_zero_1209}, {6, (Value *)&List_zero_586}, {8, (Value *)&Vector_zero_1551}, {12, (Value *)&ArrayNode_zero_1828}, {13, (Value *)&HashCollisionNode_zero_1915}, {30, (Value *)&HashSet_zero_2584}, {11, (Value *)&BitmapIndexNode_zero_2002}, {7, (Value *)&Maybe_zero_522}}};
Value *zero_238(List *closures, Value *arg0) {
  return(proto1Arg(&zero_Implementations_239, "zero", arg0, "core", 259));
}
FnArity protoFnArity3043 = {FnArityType, -1, 1, (List *)0, 0, zero_238};
Function protoFn3042 = {FunctionType, -1, "zero", 1, {&protoFnArity3043}};
Value *zero_237 = (Value *)&protoFn3042;


// flat-map 2 args
ProtoImpls flat_map_Implementations_271 = {6, {{6, (Value *)&List_flat_map_596}, {8, (Value *)&Vector_flat_map_1594}, {15, (Value *)&Promise_flat_map_2262}, {16, (Value *)&Future_flat_map_2371}, {30, (Value *)&HashSet_flat_map_2614}, {7, (Value *)&Maybe_flat_map_536}}};
Value *flat_map_270(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&flat_map_Implementations_271, "flat-map", arg0, arg1, "core", 286));
}
FnArity protoFnArity3041 = {FnArityType, -1, 2, (List *)0, 0, flat_map_270};
Function protoFn3040 = {FunctionType, -1, "flat-map", 1, {&protoFnArity3041}};
Value *flat_map_257 = (Value *)&protoFn3040;


// vec 1 args
ProtoImpls vec_Implementations_341 = {5, {{2, (Value *)&String_vec_1062}, {5, (Value *)&String_vec_1174}, {6, (Value *)&List_vec_636}, {8, (Value *)&Vector_vec_1523}, {30, (Value *)&HashSet_vec_2568}}};
Value *vec_340(List *closures, Value *arg0) {
  return(proto1Arg(&vec_Implementations_341, "vec", arg0, "core", 417));
}
FnArity protoFnArity3039 = {FnArityType, -1, 1, (List *)0, 0, vec_340};
Function protoFn3038 = {FunctionType, -1, "vec", 1, {&protoFnArity3039}};
Value *vec_315 = (Value *)&protoFn3038;


// get* 5 args
ProtoImpls get_STAR__Implementations_18 = {3, {{12, (Value *)&ArrayNode_get_STAR__1684}, {13, (Value *)&HashCollisionNode_get_STAR__1710}, {11, (Value *)&BitmapIndexNode_get_STAR__1662}}};
Value *get_STAR__17(List *closures, Value *arg0, Value *arg1, Value *arg2, Value *arg3, Value *arg4) {
  return(proto5Arg(&get_STAR__Implementations_18, "get*", arg0, arg1, arg2, arg3, arg4, "core", 16));
}
FnArity protoFnArity3037 = {FnArityType, -1, 5, (List *)0, 0, get_STAR__17};
Function protoFn3036 = {FunctionType, -1, "get*", 1, {&protoFnArity3037}};
Value *get_STAR__10 = (Value *)&protoFn3036;


// rest 1 args
ProtoImpls rest_Implementations_344 = {5, {{2, (Value *)&String_rest_1071}, {5, (Value *)&String_rest_1183}, {6, (Value *)&List_rest_584}, {8, (Value *)&Vector_rest_1527}, {34, (Value *)&LazyList_rest_2908}}};
Value *rest_343(List *closures, Value *arg0) {
  return(proto1Arg(&rest_Implementations_344, "rest", arg0, "core", 426));
}
FnArity protoFnArity3035 = {FnArityType, -1, 1, (List *)0, 0, rest_343};
Function protoFn3034 = {FunctionType, -1, "rest", 1, {&protoFnArity3035}};
Value *rest_314 = (Value *)&protoFn3034;


// type-args 1 args
ProtoImpls type_args_Implementations_47 = {8, {{2, (Value *)&String_type_args_1093}, {5, (Value *)&String_type_args_1205}, {6, (Value *)&List_type_args_1394}, {8, (Value *)&Vector_type_args_1549}, {1, (Value *)&Integer_type_args_951}, {10, (Value *)&Symbol_type_args_1252}, {7, (Value *)&Maybe_type_args_1292}, {0, (Value *)&Default_type_args_49}}};
Value *type_args_46(List *closures, Value *arg0) {
  return(proto1Arg(&type_args_Implementations_47, "type-args", arg0, "core", 52));
}
FnArity protoFnArity3033 = {FnArityType, -1, 1, (List *)0, 0, type_args_46};
Function protoFn3032 = {FunctionType, -1, "type-args", 1, {&protoFnArity3033}};
Value *type_args_39 = (Value *)&protoFn3032;


// extend 2 args
ProtoImpls extend_Implementations_273 = {1, {{16, (Value *)&Future_extend_2380}}};
Value *extend_272(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&extend_Implementations_273, "extend", arg0, arg1, "core", 301));
}
FnArity protoFnArity3031 = {FnArityType, -1, 2, (List *)0, 0, extend_272};
Function protoFn3030 = {FunctionType, -1, "extend", 1, {&protoFnArity3031}};
Value *extend_256 = (Value *)&protoFn3030;


// split-with 2 args
ProtoImpls split_with_Implementations_346 = {4, {{2, (Value *)&String_split_with_1089}, {5, (Value *)&String_split_with_1201}, {6, (Value *)&List_split_with_1390}, {8, (Value *)&Vector_split_with_1545}}};
Value *split_with_345(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&split_with_Implementations_346, "split-with", arg0, arg1, "core", 447));
}
FnArity protoFnArity3029 = {FnArityType, -1, 2, (List *)0, 0, split_with_345};

// split-with 3 args
ProtoImpls split_with_Implementations_348 = {4, {{2, (Value *)&String_split_with_1087}, {5, (Value *)&String_split_with_1199}, {6, (Value *)&List_split_with_1388}, {8, (Value *)&Vector_split_with_1543}}};
Value *split_with_347(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&split_with_Implementations_348, "split-with", arg0, arg1, arg2, "core", 447));
}
FnArity protoFnArity3028 = {FnArityType, -1, 3, (List *)0, 0, split_with_347};
Function protoFn3027 = {FunctionType, -1, "split-with", 2, {&protoFnArity3029, &protoFnArity3028}};
Value *split_with_313 = (Value *)&protoFn3027;


// empty? 1 args
ProtoImpls empty_QM__Implementations_305 = {9, {{2, (Value *)&String_empty_QM__1112}, {5, (Value *)&String_empty_QM__1224}, {6, (Value *)&List_empty_QM__600}, {8, (Value *)&Vector_empty_QM__994}, {12, (Value *)&ArrayNode_empty_QM__1842}, {13, (Value *)&HashCollisionNode_empty_QM__1929}, {30, (Value *)&HashSet_empty_QM__2625}, {11, (Value *)&BitmapIndexNode_empty_QM__2016}, {34, (Value *)&LazyList_empty_QM__2932}}};
Value *empty_QM__304(List *closures, Value *arg0) {
  return(proto1Arg(&empty_QM__Implementations_305, "empty?", arg0, "core", 375));
}
FnArity protoFnArity3026 = {FnArityType, -1, 1, (List *)0, 0, empty_QM__304};
Function protoFn3025 = {FunctionType, -1, "empty?", 1, {&protoFnArity3026}};
Value *empty_QM__294 = (Value *)&protoFn3025;


// comp* 2 args
ProtoImpls comp_STAR__Implementations_241 = {11, {{2, (Value *)&String_comp_STAR__1099}, {5, (Value *)&String_comp_STAR__1211}, {4, (Value *)&Function_comp_STAR__855}, {6, (Value *)&List_comp_STAR__588}, {8, (Value *)&Vector_comp_STAR__1558}, {12, (Value *)&ArrayNode_comp_STAR__1840}, {13, (Value *)&HashCollisionNode_comp_STAR__1927}, {15, (Value *)&Promise_comp_STAR__2217}, {16, (Value *)&Future_comp_STAR__2328}, {30, (Value *)&HashSet_comp_STAR__2586}, {11, (Value *)&BitmapIndexNode_comp_STAR__2014}}};
Value *comp_STAR__240(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&comp_STAR__Implementations_241, "comp*", arg0, arg1, "core", 273));
}
FnArity protoFnArity3024 = {FnArityType, -1, 2, (List *)0, 0, comp_STAR__240};

// comp* 3 args
ProtoImpls comp_STAR__Implementations_243 = {0, {}};
Value *comp_STAR__242(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&comp_STAR__Implementations_243, "comp*", arg0, arg1, arg2, "core", 273));
}
FnArity protoFnArity3023 = {FnArityType, -1, 3, (List *)0, 0, comp_STAR__242};
Function protoFn3022 = {FunctionType, -1, "comp*", 2, {&protoFnArity3024, &protoFnArity3023}};
Value *comp_STAR__236 = (Value *)&protoFn3022;


// filter 2 args
ProtoImpls filter_Implementations_308 = {2, {{6, (Value *)&List_filter_606}, {8, (Value *)&Vector_filter_1603}}};
Value *filter_307(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&filter_Implementations_308, "filter", arg0, arg1, "core", 393));
}
FnArity protoFnArity3021 = {FnArityType, -1, 2, (List *)0, 0, filter_307};
Function protoFn3020 = {FunctionType, -1, "filter", 1, {&protoFnArity3021}};
Value *filter_293 = (Value *)&protoFn3020;


// store 3 args
ProtoImpls store_Implementations_388 = {1, {{8, (Value *)&Vector_store_1576}}};
Value *store_387(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&store_Implementations_388, "store", arg0, arg1, arg2, "core", 488));
}
FnArity protoFnArity3019 = {FnArityType, -1, 3, (List *)0, 0, store_387};
Function protoFn3018 = {FunctionType, -1, "store", 1, {&protoFnArity3019}};
Value *store_382 = (Value *)&protoFn3018;


// =* 2 args
ProtoImpls _EQ__STAR__Implementations_442 = {14, {{2, (Value *)&String__EQ__STAR__1056}, {5, (Value *)&String__EQ__STAR__1168}, {4, (Value *)&Function__EQ__STAR__841}, {6, (Value *)&List__EQ__STAR__576}, {8, (Value *)&Vector__EQ__STAR__1521}, {12, (Value *)&ArrayNode__EQ__STAR__1802}, {13, (Value *)&HashCollisionNode__EQ__STAR__1889}, {30, (Value *)&HashSet__EQ__STAR__2566}, {1, (Value *)&Integer__EQ__STAR__476}, {10, (Value *)&Symbol__EQ__STAR__1248}, {11, (Value *)&BitmapIndexNode__EQ__STAR__1976}, {34, (Value *)&LazyList__EQ__STAR__2904}, {7, (Value *)&Maybe__EQ__STAR__514}, {32, (Value *)&IntGenerator__EQ__STAR__2765}}};
Value *_EQ__STAR__441(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&_EQ__STAR__Implementations_442, "=*", arg0, arg1, "core", 545));
}
FnArity protoFnArity3017 = {FnArityType, -1, 2, (List *)0, 0, _EQ__STAR__441};
Function protoFn3016 = {FunctionType, -1, "=*", 1, {&protoFnArity3017}};
Value *_EQ__STAR__440 = (Value *)&protoFn3016;


// hash-seq 2 args
ProtoImpls hash_seq_Implementations_21 = {3, {{12, (Value *)&ArrayNode_hash_seq_1682}, {13, (Value *)&HashCollisionNode_hash_seq_1708}, {11, (Value *)&BitmapIndexNode_hash_seq_1656}}};
Value *hash_seq_20(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&hash_seq_Implementations_21, "hash-seq", arg0, arg1, "core", 14));
}
FnArity protoFnArity3015 = {FnArityType, -1, 2, (List *)0, 0, hash_seq_20};
Function protoFn3014 = {FunctionType, -1, "hash-seq", 1, {&protoFnArity3015}};
Value *hash_seq_9 = (Value *)&protoFn3014;


// count 1 args
ProtoImpls count_Implementations_310 = {8, {{2, (Value *)&String_count_737}, {5, (Value *)&String_count_741}, {6, (Value *)&List_count_598}, {8, (Value *)&Vector_count_998}, {12, (Value *)&ArrayNode_count_1678}, {13, (Value *)&HashCollisionNode_count_1702}, {30, (Value *)&HashSet_count_2629}, {11, (Value *)&BitmapIndexNode_count_1654}}};
Value *count_309(List *closures, Value *arg0) {
  return(proto1Arg(&count_Implementations_310, "count", arg0, "core", 379));
}
FnArity protoFnArity3013 = {FnArityType, -1, 1, (List *)0, 0, count_309};
Function protoFn3012 = {FunctionType, -1, "count", 1, {&protoFnArity3013}};
Value *count_292 = (Value *)&protoFn3012;


// apply* 2 args
ProtoImpls apply_STAR__Implementations_275 = {6, {{4, (Value *)&Function_apply_STAR__859}, {6, (Value *)&List_apply_STAR__1414}, {8, (Value *)&Vector_apply_STAR__1587}, {15, (Value *)&Promise_apply_STAR__2250}, {16, (Value *)&Future_apply_STAR__2359}, {7, (Value *)&Maybe_apply_STAR__534}}};
Value *apply_STAR__274(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&apply_STAR__Implementations_275, "apply*", arg0, arg1, "core", 321));
}
FnArity protoFnArity3011 = {FnArityType, -1, 2, (List *)0, 0, apply_STAR__274};
Function protoFn3010 = {FunctionType, -1, "apply*", 1, {&protoFnArity3011}};
Value *apply_STAR__255 = (Value *)&protoFn3010;


// <* 2 args
ProtoImpls _LT__STAR__Implementations_438 = {4, {{2, (Value *)&String__LT__STAR__1095}, {5, (Value *)&String__LT__STAR__1207}, {1, (Value *)&Integer__LT__STAR__955}, {10, (Value *)&Symbol__LT__STAR__1254}}};
Value *_LT__STAR__437(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&_LT__STAR__Implementations_438, "<*", arg0, arg1, "core", 539));
}
FnArity protoFnArity3009 = {FnArityType, -1, 2, (List *)0, 0, _LT__STAR__437};
Function protoFn3008 = {FunctionType, -1, "<*", 1, {&protoFnArity3009}};
Value *_LT__STAR__436 = (Value *)&protoFn3008;


// get-type 1 args
ProtoImpls get_type_Implementations_52 = {1, {{0, (Value *)&Default_get_type_54}}};
Value *get_type_51(List *closures, Value *arg0) {
  return(proto1Arg(&get_type_Implementations_52, "get-type", arg0, "core", 38));
}
FnArity protoFnArity3007 = {FnArityType, -1, 1, (List *)0, 0, get_type_51};
Function protoFn3006 = {FunctionType, -1, "get-type", 1, {&protoFnArity3007}};
Value *get_type_38 = (Value *)&protoFn3006;


// .container 2 args
ProtoImpls protoImpls2841 = {1, {{34, (Value *)&LazyList_container_2914}}};
Value *protoImpl2840(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&protoImpls2841, ".container", arg0, arg1, "core", 0));
}
FnArity protoFnArity3005 = {FnArityType, -1, 2, (List *)0, 0, protoImpl2840};

// .container 1 args
ProtoImpls protoImpls2839 = {1, {{34, (Value *)&LazyList_container_2916}}};
Value *protoImpl2838(List *closures, Value *arg0) {
  return(proto1Arg(&protoImpls2839, ".container", arg0, "core", 0));
}
FnArity protoFnArity3004 = {FnArityType, -1, 1, (List *)0, 0, protoImpl2838};
Function protoFn3003 = {FunctionType, -1, ".container", 2, {&protoFnArity3005, &protoFnArity3004}};
Value *dispatchFnPtr2837 = (Value *)&protoFn3003;


// instance? 2 args
ProtoImpls instance_QM__Implementations_57 = {15, {{27, (Value *)&staticArity208}, {22, (Value *)&staticArity178}, {31, (Value *)&staticArity2506}, {28, (Value *)&staticArity731}, {20, (Value *)&staticArity166}, {33, (Value *)&staticArity2739}, {26, (Value *)&staticArity202}, {36, (Value *)&staticArity2970}, {25, (Value *)&staticArity196}, {19, (Value *)&staticArity160}, {24, (Value *)&staticArity190}, {21, (Value *)&staticArity172}, {23, (Value *)&staticArity184}, {29, (Value *)&staticArity1753}, {35, (Value *)&staticArity2862}}};
Value *instance_QM__56(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&instance_QM__Implementations_57, "instance?", arg0, arg1, "core", 56));
}
FnArity protoFnArity3002 = {FnArityType, -1, 2, (List *)0, 0, instance_QM__56};
Function protoFn3001 = {FunctionType, -1, "instance?", 1, {&protoFnArity3002}};
Value *instance_QM__37 = (Value *)&protoFn3001;


// has-field 2 args
ProtoImpls has_field_Implementations_60 = {4, {{30, (Value *)&HashSet_has_field_2574}, {34, (Value *)&LazyList_has_field_2912}, {32, (Value *)&IntGenerator_has_field_2769}, {0, (Value *)&Default_has_field_62}}};
Value *has_field_59(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&has_field_Implementations_60, "has-field", arg0, arg1, "core", 34));
}
FnArity protoFnArity3000 = {FnArityType, -1, 2, (List *)0, 0, has_field_59};
Function protoFn2999 = {FunctionType, -1, "has-field", 1, {&protoFnArity3000}};
Value *has_field_36 = (Value *)&protoFn2999;


// keys 1 args
ProtoImpls keys_Implementations_405 = {3, {{12, (Value *)&ArrayNode_keys_1814}, {13, (Value *)&HashCollisionNode_keys_1901}, {11, (Value *)&BitmapIndexNode_keys_1988}}};
Value *keys_404(List *closures, Value *arg0) {
  return(proto1Arg(&keys_Implementations_405, "keys", arg0, "core", 517));
}
FnArity protoFnArity2998 = {FnArityType, -1, 1, (List *)0, 0, keys_404};
Function protoFn2997 = {FunctionType, -1, "keys", 1, {&protoFnArity2998}};
Value *keys_399 = (Value *)&protoFn2997;


// last 1 args
ProtoImpls last_Implementations_350 = {4, {{2, (Value *)&String_last_1078}, {5, (Value *)&String_last_1190}, {6, (Value *)&List_last_1378}, {8, (Value *)&Vector_last_1529}}};
Value *last_349(List *closures, Value *arg0) {
  return(proto1Arg(&last_Implementations_350, "last", arg0, "core", 431));
}
FnArity protoFnArity2996 = {FnArityType, -1, 1, (List *)0, 0, last_349};
Function protoFn2995 = {FunctionType, -1, "last", 1, {&protoFnArity2996}};
Value *last_312 = (Value *)&protoFn2995;


// sha1 1 args
ProtoImpls sha1_Implementations_395 = {12, {{2, (Value *)&String_sha1_1103}, {5, (Value *)&String_sha1_1215}, {4, (Value *)&Function_sha1_857}, {6, (Value *)&List_sha1_1408}, {8, (Value *)&Vector_sha1_1572}, {17, (Value *)&Agent_sha1_2404}, {30, (Value *)&HashSet_sha1_2604}, {1, (Value *)&Integer_sha1_959}, {10, (Value *)&Symbol_sha1_1258}, {34, (Value *)&LazyList_sha1_2930}, {7, (Value *)&Maybe_sha1_1303}, {32, (Value *)&IntGenerator_sha1_2779}}};
Value *sha1_394(List *closures, Value *arg0) {
  return(proto1Arg(&sha1_Implementations_395, "sha1", arg0, "core", 497));
}
FnArity protoFnArity2994 = {FnArityType, -1, 1, (List *)0, 0, sha1_394};
Function protoFn2993 = {FunctionType, -1, "sha1", 1, {&protoFnArity2994}};
Value *sha1_390 = (Value *)&protoFn2993;


// assoc 3 args
ProtoImpls assoc_Implementations_408 = {2, {{7, (Value *)&Maybe_assoc_520}, {0, (Value *)&Default_assoc_410}}};
Value *assoc_407(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&assoc_Implementations_408, "assoc", arg0, arg1, arg2, "core", 503));
}
FnArity protoFnArity2992 = {FnArityType, -1, 3, (List *)0, 0, assoc_407};
Function protoFn2991 = {FunctionType, -1, "assoc", 1, {&protoFnArity2992}};
Value *assoc_398 = (Value *)&protoFn2991;


// same-type? 2 args
ProtoImpls same_type_QM__Implementations_65 = {0, {}};
Value *same_type_QM__64(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&same_type_QM__Implementations_65, "same-type?", arg0, arg1, "core", 60));
}
FnArity protoFnArity2990 = {FnArityType, -1, 2, (List *)0, 0, same_type_QM__64};
Function protoFn2989 = {FunctionType, -1, "same-type?", 1, {&protoFnArity2990}};
Value *same_type_QM__35 = (Value *)&protoFn2989;


// extract 1 args
ProtoImpls extract_Implementations_277 = {5, {{17, (Value *)&Agent_extract_2408}, {15, (Value *)&Promise_extract_2219}, {16, (Value *)&Future_extract_2373}, {7, (Value *)&Maybe_extract_530}, {32, (Value *)&IntGenerator_extract_2781}}};
Value *extract_276(List *closures, Value *arg0) {
  return(proto1Arg(&extract_Implementations_277, "extract", arg0, "core", 307));
}
FnArity protoFnArity2988 = {FnArityType, -1, 1, (List *)0, 0, extract_276};
Function protoFn2987 = {FunctionType, -1, "extract", 1, {&protoFnArity2988}};
Value *extract_254 = (Value *)&protoFn2987;


// duplicate 1 args
ProtoImpls duplicate_Implementations_279 = {0, {}};
Value *duplicate_278(List *closures, Value *arg0) {
  return(proto1Arg(&duplicate_Implementations_279, "duplicate", arg0, "core", 311));
}
FnArity protoFnArity2986 = {FnArityType, -1, 1, (List *)0, 0, duplicate_278};
Function protoFn2985 = {FunctionType, -1, "duplicate", 1, {&protoFnArity2986}};
Value *duplicate_253 = (Value *)&protoFn2985;


// get 2 args
ProtoImpls get_Implementations_413 = {8, {{8, (Value *)&Vector_get_992}, {12, (Value *)&ArrayNode_get_1824}, {13, (Value *)&HashCollisionNode_get_1911}, {30, (Value *)&HashSet_get_2582}, {11, (Value *)&BitmapIndexNode_get_1998}, {34, (Value *)&LazyList_get_2926}, {7, (Value *)&Maybe_get_516}, {32, (Value *)&IntGenerator_get_2775}}};
Value *get_412(List *closures, Value *arg0, Value *arg1) {
  return(proto2Arg(&get_Implementations_413, "get", arg0, arg1, "core", 512));
}
FnArity protoFnArity2984 = {FnArityType, -1, 2, (List *)0, 0, get_412};

// get 3 args
ProtoImpls get_Implementations_415 = {4, {{12, (Value *)&ArrayNode_get_1826}, {13, (Value *)&HashCollisionNode_get_1913}, {11, (Value *)&BitmapIndexNode_get_2000}, {7, (Value *)&Maybe_get_518}}};
Value *get_414(List *closures, Value *arg0, Value *arg1, Value *arg2) {
  return(proto3Arg(&get_Implementations_415, "get", arg0, arg1, arg2, "core", 512));
}
FnArity protoFnArity2983 = {FnArityType, -1, 3, (List *)0, 0, get_414};
Function protoFn2982 = {FunctionType, -1, "get", 2, {&protoFnArity2984, &protoFnArity2983}};
Value *get_397 = (Value *)&protoFn2982;

Value *(*type_name)(List *, Value *) = type_name_41;
Value *(*invoke0Args)(List *, Value *) = invoke_418;
Value *(*invoke1Arg)(List *, Value *, Value*) = invoke_420;
Value *(*invoke2Args)(List *, Value *, Value*, Value*) = invoke_422;
Value *(*equalSTAR)(List *, Value *, Value*) = _EQ__STAR__441;
Value *(*hashSeq)(List *, Value*, Value*) = hash_seq_20;
Value *(*count)(List *, Value*) = count_309;
Value *(*seq)(List *, Value*) = seq_332;
Value *(*sha1)(List *, Value*) = sha1_394;
Value *(*assoc)(List *, Value*, Value*, Value*, Value*, Value*) = assoc_STAR__13;
Value *(*dissoc)(List *, Value*, Value*, Value*, Value*) = dissoc_STAR__15;
Value *(*get)(List *, Value*, Value*, Value*, Value*, Value*) = get_STAR__17;
Value *(*showFn)(List *, Value *) = show_804;
Value *(*fn_apply)(List *, Value*, Value*) = fn_apply_117;
