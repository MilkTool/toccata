
(defprotocol FileLineInfo
  (file-name [ast] "")
  (line-number [ast] 0))

(deftype block-comment-ast [lines file-name line-number]
  Stringable
  (string-list [_] (comp (list "<BlockCommentAST")
                         (interpose lines "\n")
                         (list ">")))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn block-comment [file-name line-number lines]
  (block-comment-ast lines file-name line-number))


(deftype inline-ast [lang result-type txt file-name line-number]
  Stringable
  (string-list [_] (list "<InlineAST>"))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn inline [lang txt result-type file-name line-number]
  (inline-ast lang txt result-type file-name line-number))


(deftype params-ast [fixed variadic]
  Stringable
  (string-list [_] (comp (list "[")
                         (flat-map (interpose fixed " ") string-list)
                         (extract (or (map variadic (fn [variadic]
                                                      (cons " & " (string-list variadic))))
                                      (maybe "")))
                         (list "]"))))

(defn params [fixed variadic]
  (params-ast fixed variadic))


(deftype main-ast [params body]
  Stringable
  (string-list [_] (comp (list "<MainAST ")
                         (string-list params)
                         (list " ")
                         (string-list body)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn main-fn [params body]
  (main-ast params body))


(deftype definition-ast [sym value]
  Stringable
  (string-list [_] (list "<DefAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn definition [sym value]
  (definition-ast sym value))


(deftype fn-arity-ast [params doc param-types body]
  Stringable
  (string-list [_] (comp (list "<FnArityAst ")
                         (string-list params)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn fn-arity [params doc body]
  (fn-arity-ast params doc [] body))


(deftype fn-ast [fn-sym arities]
  Stringable
  (string-list [_] (list "<FunctionAST " (str fn-sym) ">"))

  FileLineInfo
  (file-name [_] (file-name arities))
  (line-number [_] (line-number arities)))

(defn fn-expr [sym arities]
  (fn-ast sym arities))


(deftype call-ast [call-target args]
  Stringable
  (string-list [_]
    (list "<CallAST " (str call-target) " " (str args) ">"))

  FileLineInfo
  (file-name [_] (file-name call-target))
  (line-number [_] (line-number call-target)))

(defn call-expr [[target & args]]
  (call-ast target args))
