
(defprotocol FileLineInfo
  (file-name [ast] "")
  (line-number [ast] 0))

(defprotocol AssertionTest
  (not-assertion? [ast] (maybe ast)))

(extend-type List
  FileLineInfo
  (file-name [l]
    (extract (or (map (first l) file-name)
                 (maybe ""))))
  (line-number [l]
    (extract (or (map (first l) line-number)
                 (maybe "")))))

(deftype block-comment-ast [lines file-name line-number]
  AssertionTest
  (not-assertion? [_] nothing)

  Stringable
  (string-list [_] (comp (list "<BlockCommentAST")
                         (interpose lines "\n")
                         (list ">")))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn block-comment [file-name line-number lines]
  (block-comment-ast lines file-name line-number))


(deftype inline-ast [lang result-type txt file-name line-number]
  Stringable
  (string-list [_] (list "<InlineAST>"))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn inline [lang txt result-type file-name line-number]
  (inline-ast lang txt result-type file-name line-number))


(deftype params-ast [fixed variadic]
  Stringable
  (string-list [_] (comp (list "<Params ")
                         (flat-map (interpose fixed " ") string-list)
                         (cons " " (string-list variadic))
                         (list ">")))

  Collection
  (count [_] (count fixed))

  FileLineInfo
  (file-name [_] (file-name fixed))
  (line-number [_] (line-number fixed)))

(defn params [fixed variadic]
  (params-ast fixed variadic))


(deftype main-ast [params body]
  Stringable
  (string-list [_] (comp (list "<MainAST ")
                         (string-list params)
                         (list " ")
                         (string-list body)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn main-fn [params body]
  (main-ast params body))


(deftype definition-ast [sym value]
  Stringable
  (string-list [_] (list "<DefAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn definition [sym value]
  (definition-ast sym value))


(deftype fn-arity-ast [params doc param-types body]
  Stringable
  (string-list [_] (comp (list "<FnArityAst ")
                         (string-list params)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn fn-arity [params doc body]
  (fn-arity-ast params doc [] body))


(deftype fn-ast [fn-sym arities]
  Stringable
  (string-list [_] (list "<FunctionAST " (str fn-sym) ">"))

  FileLineInfo
  (file-name [_] (file-name arities))
  (line-number [_] (line-number arities)))

(defn fn-expr [sym arities]
  (fn-ast sym arities))


(deftype call-ast [call-target args]
  Stringable
  (string-list [_]
    (list "<CallAST " (str call-target) " " (str args) ">"))

  FileLineInfo
  (file-name [_] (file-name call-target))
  (line-number [_] (line-number call-target)))

(defn call-expr [[target & args]]
  (call-ast target args))


(deftype binding-ast [binding val]
  Stringable
  (string-list [_]
    (list "<BindingAST " (str binding) " " (str val) ">"))

  FileLineInfo
  (file-name [_] (file-name binding))
  (line-number [_] (line-number binding)))

(defn binding [binding val]
  (binding-ast binding val))


(deftype let-ast [bindings body]
  Stringable
  (string-list [_]
    (list "<LetAST " (str bindings) "\n" (str body) ">"))

  FileLineInfo
  (file-name [_] (file-name bindings))
  (line-number [_] (line-number bindings)))

(defn let-expr [bindings body]
  (let-ast bindings body))


(deftype and-ast [clauses]
  Stringable
  (string-list [_]
    (comp (list "<AndAST ")
          (flatten (map clauses string-list))
          (list ">")))

  FileLineInfo
  (file-name [_] (extract (map (first clauses) file-name)))
  (line-number [_] (extract (map (first clauses) line-number))))

(defn and-expr [clauses]
  (and-ast clauses))


(deftype or-ast [clauses]
  Stringable
  (string-list [_]
    (comp (list "<OrAST ")
          (flatten (map clauses string-list))
          (list ">")))

  FileLineInfo
  (file-name [_] (extract (map (first clauses) file-name)))
  (line-number [_] (extract (map (first clauses) line-number))))

(defn or-expr [clauses]
  (or-ast clauses))


(deftype assert-ast [assertion]
  Stringable
  (string-list [_] (list "<Assert " (str assertion) ">"))
  
  AssertionTest
  (not-assertion? [_] nothing)

  FileLineInfo
  (file-name [_] (file-name assertion))
  (line-number [_] (line-number assertion)))

(defn assert-expr [assertion]
  (assert-ast assertion))


(deftype returns-ast [sym assertion]
  Stringable
  (string-list [_] (list "<ReturnsAssertion " (str sym) " " (str assertion) ">"))
  
  AssertionTest
  (not-assertion? [_] nothing)

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn returns-expr [sym assertion]
  (returns-ast sym assertion))


(deftype prototype-ast [fn-name params doc default-body]
  Stringable
  (string-list [_] (list "<PrototypeFnAST " (str fn-name) ">"))

  FileLineInfo
  (file-name [_] (file-name fn-name))
  (line-number [_] (line-number fn-name)))

(defn prototype [fn-name args doc default-body]
  (prototype-ast fn-name args doc default-body))


(deftype protocol-ast [protocol-sym prototypes]
  Stringable
  (string-list [_] (list "<ProtocolAST " (str protocol-sym) ">"))

  FileLineInfo
  (file-name [_] (file-name protocol-sym))
  (line-number [_] (line-number protocol-sym)))

(defn protocol [sym prototypes]
  (protocol-ast sym prototypes))


(deftype extend-ast [type impls]
  Stringable
  (string-list [_] (list "<ExtendAST " (str type) ">"))

  FileLineInfo
  (file-name [_] (file-name type))
  (line-number [_] (line-number type)))

(defn type-extension [type impls]
 (extend-ast type impls))
