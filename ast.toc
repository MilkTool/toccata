
(defprotocol FileLineInfo
  (file-name [ast] "")
  (line-number [ast] 0))

(deftype block-comment-ast [lines file-name line-number]
  Stringable
  (string-list [_] (comp (list "<BlockCommentAST")
                         (interpose lines "\n")
                         (list ">")))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn block-comment [file-name line-number lines]
  (block-comment-ast lines file-name line-number))


(deftype inline-ast [lang result-type txt file-name line-number]
  Stringable
  (string-list [_] (list "<InlineAST>"))

  FileLineInfo
  (file-name [_] file-name)
  (line-number [_] line-number))

(defn inline [lang txt result-type file-name line-number]
  (inline-ast lang txt result-type file-name line-number))


(deftype args-ast [args tail]
  Stringable
  (string-list [_] (comp (list "[")
                         (flat-map (interpose args " ") string-list)
                         (extract (or (map tail (fn [tail]
                                                  (cons " & " (string-list tail))))
                                      (maybe "")))
                         (list "]"))))

(defn args [args-list tail]
  (args-ast args-list tail))


(deftype main-ast [args body]
  Stringable
  (string-list [_] (comp (list "<MainAST ")
                         (string-list args)
                         (list " ")
                         (string-list body)
                         (list ">")))

  FileLineInfo
  (file-name [_] (file-name body))
  (line-number [_] (line-number body)))

(defn main-fn [args body]
  (main-ast args body))


(deftype definition-ast [sym value]
  Stringable
  (string-list [_] (list "<DefAST " (str sym) ">"))

  FileLineInfo
  (file-name [_] (file-name sym))
  (line-number [_] (line-number sym)))

(defn def-expr [sym value]
  (definition-ast sym value))
