
;; A simple (and not quite complete) JSON parser

(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "882b014"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "7690cd3"))
(add-ns ebnf (git-dependency "https://github.com/Toccata-Lang/ebnf.git"
                             "ebnf.toc"
                             :sha "385b3ef"))

(def whitespace
  (grmr/rule "whitespace"
             (grmr/none-or-more (grmr/any " " "\t" "\r" "\n" "\f"))))

(def integer-value
  (grmr/rule "integer"
             (grmr/apply-fn (fn [negate digits]
                              (let [magnitude (str-to-int (to-str digits))]
                                (either (and negate
                                             (maybe (* -1 magnitude)))
                                        magnitude)))
                            (grmr/ignore whitespace)
                            (grmr/optional "-")
                            (grmr/one-or-more grmr/digit))))

(defn escaped-char [char result]
  (grmr/apply-fn (fn [& _] result) char))

(def escaped-chars
  (grmr/rule "escaped chars"
             (grmr/all "\\" (grmr/any (escaped-char "\"" "\"")
                                      (escaped-char "\\" "\\")
                                      (escaped-char "/" "/")
                                      (escaped-char "b" "\b")
                                      (escaped-char "f" "\f")
                                      (escaped-char "n" "\n")
                                      (escaped-char "r" "\r")
                                      (escaped-char "t" "\t")))))

(def string-value
  (grmr/rule "string"
             (grmr/apply-fn identity
                            (grmr/ignore whitespace)
                            (grmr/apply-fn to-str
                                           (grmr/ignore "\"")
                                           (grmr/none-or-more (grmr/any escaped-chars
                                                                        (grmr/not-char "\"")))
                                           (grmr/ignore "\"")))))


(def value (grmr/recurse "value"))

(def comma (grmr/all whitespace "," whitespace))

(def array
  (grmr/rule "array"
             (grmr/apply-fn flatten
                            (grmr/ignore whitespace)
                            (grmr/ignore "[")
                            (grmr/none-or-more
                             (grmr/apply-fn (fn [items last-item]
                                              (conj (flatten items) last-item))
                                            (grmr/none-or-more (grmr/all value
                                                                         (grmr/ignore comma)))
                                            value))
                            (grmr/ignore whitespace)
                            (grmr/ignore "]"))))

(def colon (grmr/all whitespace ":" whitespace))

(def key-value-pair (grmr/all string-value
                              (grmr/ignore colon)
                              value))

(def object
  (grmr/rule "object"
             (grmr/apply-fn (fn [kv-pairs]
                              (-> kv-pairs
                                  flatten
                                  (reduce {} (fn [m [k v]]
                                               (assoc m k v)))))
                            (grmr/ignore whitespace)
                            (grmr/ignore "{")
                            (grmr/none-or-more
                             (grmr/apply-fn (fn [items last-item]
                                              (conj (flatten items) last-item))
                                            (grmr/none-or-more (grmr/all key-value-pair
                                                                         (grmr/ignore comma)))
                                            key-value-pair))
                            (grmr/ignore whitespace)
                            (grmr/ignore "}"))))

(def value
  (grmr/recursive-rule "value"
                       (grmr/any string-value
                                 integer-value
                                 object
                                 array
                                 (grmr/apply-fn (fn [_ _] (maybe 'true))
                                                whitespace
                                                "true")
                                 (grmr/apply-fn (fn [_ _] nothing)
                                                whitespace
                                                "false")
                                 (grmr/apply-fn (fn [_ _] 'null)
                                                whitespace
                                                "null"))))

(def parser (rd/parser value))

(main [_]
      (println (parser  "
[1,2   ,   3]
"))
      (println (parser  " [2   ,   3] "))
      (println (parser  " [   3  ] "))
      (println (parser  " [   ] "))
      (println (parser  " [ [-2   ,   3] ] "))
      (println (parser  " [ [   -3  ] [ 1, 2] ] "))
      (println (parser  " [ [] {} []  ] "))
      (println (parser "  {  }   "))
      (println (parser "  { \"k1\"  : [ 1, 2 ] }"))
      (println (parser "  { \"k1\"  : [ 1, 2 ] , \"k2\":  {\"a\": 8}  }"))
      (println (parser "  { \"k1\"  : \"bo\n\tgus\"  , \"k2\": [\"toxic\"], \"k3\": 15 }"))
      (println (parser "   true   "))
      (println (parser "false   "))
      (println (parser "   null"))
      (println)
      (println (ebnf/produce-ebnf value))
)

