
;; A simple (and not quite complete) JSON parser

(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "882b014"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "7690cd3"))

(def escaped-doublequote
  (grmr/apply-fn (fn [& _] "\"")
                 "\""))

(def escaped-backslash
  (grmr/apply-fn (fn [& _] "\\")
                 "\\"))

(def escaped-slash
  (grmr/apply-fn (fn [& _] "/")
                 "/"))

(def escaped-backspace
  (grmr/apply-fn (fn [& _] "\b")
                 "b"))

(def escaped-formfeed
  (grmr/apply-fn (fn [& _] "\f")
                 "f"))

(def escaped-newline
  (grmr/apply-fn (fn [& _] "\n")
                 "n"))

(def escaped-return
  (grmr/apply-fn (fn [& _] "\r")
                 "r"))

(def escaped-tab
  (grmr/apply-fn (fn [& _] "\t")
                 "t"))

(def escaped-chars (grmr/all "\\" (grmr/any escaped-doublequote
                                            escaped-backslash
                                            escaped-slash
                                            escaped-backspace
                                            escaped-formfeed
                                            escaped-newline
                                            escaped-return
                                            escaped-tab)))

(def whitespace
  (grmr/none-or-more (grmr/any " " "\t" "\r" "\n" "\f")))

(def string-value (grmr/apply-fn identity
                                 (grmr/ignore whitespace)
                                 (grmr/apply-fn to-str
                                                (grmr/ignore "\"")
                                                (grmr/none-or-more (grmr/any escaped-chars
                                                                             (grmr/not-char "\"")))
                                                (grmr/ignore "\""))))


(def positive-integer (grmr/apply-fn (fn [digits]
                                       (str-to-int (to-str digits)))
                                     (grmr/one-or-more grmr/digit)))

(def integer-value (grmr/apply-fn identity
                                  (grmr/ignore whitespace)
                                  (grmr/any positive-integer
                                            (grmr/apply-fn (fn [int-value]
                                                             (* -1 int-value))
                                                           (grmr/ignore "-")
                                                           positive-integer))))

(def value (grmr/recurse "value"))

(def comma (grmr/all whitespace "," whitespace))

(def array
  (grmr/apply-fn flatten
                 (grmr/ignore whitespace)
                 (grmr/ignore "[")
                 (grmr/none-or-more
                  (grmr/apply-fn (fn [items last-item]
                                   (conj (flatten items) last-item))
                                 (grmr/none-or-more (grmr/all value
                                                              (grmr/ignore comma)))
                                 value))
                 (grmr/ignore whitespace)
                 (grmr/ignore "]")))

(def colon (grmr/all whitespace ":" whitespace))

(def key-value-pair (grmr/all string-value
                              (grmr/ignore colon)
                              value))

(def object
  (grmr/apply-fn (fn [kv-pairs]
                   (-> kv-pairs
                       flatten
                       (reduce {} (fn [m [k v]]
                                    (assoc m k v)))))
                 (grmr/ignore whitespace)
                 (grmr/ignore "{")
                 (grmr/none-or-more
                  (grmr/apply-fn (fn [items last-item]
                                   (conj (flatten items) last-item))
                                 (grmr/none-or-more (grmr/all key-value-pair
                                                              (grmr/ignore comma)))
                                 key-value-pair))
                 (grmr/ignore whitespace)
                 (grmr/ignore "}")))

(def value
  (grmr/recursive-rule "value"
                       (grmr/any string-value
                                 integer-value
                                 object
                                 array
                                 (grmr/apply-fn (fn [_] (maybe 'true)) "true")
                                 (grmr/apply-fn (fn [_] nothing) "false")
                                 (grmr/apply-fn (fn [_] 'null) "null"))))

(def parser (rd/parser value))

(main [_]
      (println (parser  "
[1,2   ,   3]
"))
      (println (parser  " [2   ,   3] "))
      (println (parser  " [   3  ] "))
      (println (parser  " [   ] "))
      (println (parser  " [ [2   ,   3] ] "))
      (println (parser  " [ [   3  ] [ 1, 2] ] "))
      (println (parser  " [ [] {} []  ] "))
      (println (parser "  {  }   "))
      (println (parser "  { \"k1\"  : [ 1, 2 ] }"))
      (println (parser "  { \"k1\"  : [ 1, 2 ] , \"k2\":  {\"a\": 8}  }"))
      (println (parser "  { \"k1\"  : \"bo\n\tgus\"  , \"k2\": [\"toxic\"], \"k3\": 15 }"))
)

