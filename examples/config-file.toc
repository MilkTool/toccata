
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "882b014"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "7690cd3"))
(add-ns fio (git-dependency "https://github.com/Toccata-Lang/file-io.git"
                            "file-io.toc"
                            :sha "e7a489b"))

(def whitespace (grmr/one-or-more (grmr/any " "
                                            "\t")))

(def newline "\n")

(def empty-line (grmr/all (grmr/optional whitespace)
                          newline))

(def not-newline (grmr/not-char "\n"))

(def comment (grmr/all (grmr/optional whitespace)
                       "#"
                       (grmr/none-or-more not-newline)
                       newline))

(def name (map (grmr/one-or-more (grmr/any grmr/alpha
                                           "-"))
               to-str))

(def integer-value (map (grmr/one-or-more grmr/digit)
                        (fn [digits]
                          (str-to-int (to-str digits)))))

(def string-value (grmr/apply-fn to-str
                                 (grmr/ignore "\"")
                                 (grmr/none-or-more (grmr/not-char "\""))
                                 (grmr/ignore "\"")))

(def config-line (grmr/apply-fn hash-map
                                (grmr/ignore (grmr/optional whitespace))
                                name
                                (grmr/ignore whitespace)
                                (grmr/any integer-value
                                          string-value)
                                (grmr/ignore (grmr/optional whitespace))
                                (grmr/ignore newline)))

(defn ignore [g]
  (map g (fn [_] {})))

(def config-file (map (grmr/none-or-more (grmr/any (ignore comment)
                                                   config-line
                                                   (ignore empty-line)))
                      (fn [config-lines]
                        (comp* {} config-lines))))

(def parser (rd/parser config-file))

(main [_]
      (for [config-map (parser (fio/slurp "config.txt"))]
        (map (seq config-map) (fn [[name value]]
                                (println (str name ":") value)))))
