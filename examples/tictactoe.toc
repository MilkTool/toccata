
(add-ns w (module "../wasm-toc/wasm.toc"))
(add-ns d (module "../wasm-toc/dom.toc"))

(add-ns h (git-dependency "https://github.com/Toccata-Lang/html-css.git"
                          "html-css.toc"
                          :sha "280e508"))

;; game HTML UI

(def square
  (-> (h/class "square")
      (h/background-color (h/hex-color "fff"))
      (h/border-width (h/px 1))
      (h/border-style h/solid)
      (h/border-color (h/hex-color "999"))
      (h/float h/left)
      (h/font-size (h/px 24))
      (h/font-weight h/bold)
      (h/line-height (h/px 34))
      (h/height (h/px 34))
      (h/margin-right (h/px -1))
      (h/margin-top (h/px -1))
      (h/padding (h/px 0))
      (h/text-align h/center)
      (h/width (h/px 34))))

(def board-row (h/class "board-row"))

(defn row [start]
  (h/div (-> (h/button "X")
             square
             (h/attr "onclick" (str "move(" start ")"))
             (h/attr "id" (str "button" start)))
         (-> (h/button "X")
             square
             (h/attr "onclick" (str "move(" (+ 1 start) ")"))
             (h/attr "id" (str "button" (+ 1 start))))
         (-> (h/button "X")
             square
             (h/attr "onclick" (str "move(" (+ 2 start) ")"))
             (h/attr "id" (str "button" (+ 2 start))))))

(def board
  (-> (h/div (row 0)
             (row 3)
             (row 6))
      (h/flex-column)))

(def history-button
  (-> (h/class "history-button")
      (h/color h/black)
      (h/background-color h/buttonface)))

(def ol
  (-> (h/class "ol")
      (h/padding-left (h/px 10))))

(def body
  (-> (h/class "body")
      (h/flex-row)
      (h/justify-content h/center)
      (h/height (h/percent 100))
      (h/font-size (h/px 14))
      (h/font-face "Century Gothic, Futura, sans-serif")
      (h/padding-top (h/percent 10))
      (h/margin (h/px 20))))

(def game-info
  (-> (h/div (-> (h/div "Winner")
                 (h/attr "id" "status")
                 (h/margin-bottom (h/px 10)))
             (-> (apply h/ol (map (range 10) (fn [idx]
                                               (-> (h/button (either (and (= 0 idx)
                                                                          (maybe (str "Go to game start")))
                                                                     (str "Go to position #" idx)))
                                                   (h/attr "id" (str "position" idx))
                                                   history-button
                                                   (h/attr "onclick" (str "position(" idx ")"))))))
                 (h/flex-column)))
      (h/margin-left (h/px 20))))

(def game
  (-> (h/div board game-info)
      (h/flex-row)))

;; create the UI

(def create-css-styles
  (map (first (d/get-elements-by-tag-name "head"))
       (fn [node]
         (d/append-child node
                         (d/inner-html (d/create-node (-> (h/style)
                                                          (h/attr "type" "text/css")))
                                       (str "." (h/html-str square) "\n"
                                            "." (h/html-str history-button) "\n"
                                            (h/html-str body) "\n"
                                            (h/html-str ol)))))))

(def create-board
  (map (first (d/get-elements-by-tag-name "body"))
       (fn [node]
         (d/append-child node (d/create-node game)))))

(def create-game-status
  (map (d/get-element-by-id "status")
       (fn [node]
         (d/inner-html node "Next player: X"))))


;; game mechanics

(def empty-board ["" "" ""
                  "" "" ""
                  "" "" ""])

(deftype GameState [curr-move history winner]
  Stringable
  (string-list [_]
    (let [curr-board (either (get history curr-move)
                             ["-" "-" "-"
                              "-" "-" "-"
                              "-" "-" "-"])]
      (list "curr-move: " (str curr-move) "  winner: " (str winner) "\n"
            "." (to-str (take curr-board 3)) "\n"
            "." (to-str (take (drop curr-board 3) 3)) "\n"
            "." (to-str (drop curr-board 6))))))

(def game-state (agent (GameState 0 [empty-board] "")))

(defn check-possible-winner [board a b c]
  (for [a (get board a)
        b (get board b)
        c (get board c)
        result (= a b c)]
    result))

(defn check-winner [board]
  (either (flat-map (or (check-possible-winner board 0 1 2)
                        (check-possible-winner board 3 4 5)
                        (check-possible-winner board 6 7 8)
                        (check-possible-winner board 0 3 6)
                        (check-possible-winner board 1 4 7)
                        (check-possible-winner board 2 5 8)
                        (check-possible-winner board 0 4 8)
                        (check-possible-winner board 2 4 6))
                    first)
          ""))

(defn reset-history [x]
  (map (drop (range 10) (inc x))
       (fn [idx]
         (map (d/get-element-by-id (str "position" idx))
              (fn [node]
                (d/set-style-attribute node "display" "none"))))))

(defn make-move [game-state y]
  (let [curr-move (.curr-move game-state)
        player (either (and (= 0 (rem curr-move 2))
                            (maybe "X"))
                       "O")
        next-player (either (and (= "X" player)
                                 (maybe "O"))
                            "X")]
    (either (for [_ (= "" (.winner game-state))
                  curr-board (get-in game-state [.history curr-move])
                  curr-square-value (get curr-board y)
                  _ (= "" curr-square-value)
                  new-board (store curr-board y player)]
              (let [new-history (-> (.history game-state)
                                    (take (inc curr-move))
                                    (conj new-board))
                    game-state (-> game-state
                                   (.curr-move (inc curr-move))
                                   (.history new-history))
                    winner (check-winner new-board)]
                (map (d/get-element-by-id "status")
                     (fn [node]
                       (d/inner-html node
                                     (either (and (= "" winner)
                                                  (maybe (str "Next player: " next-player)))
                                             (str "Winner: " winner)))))
                (reset-history (inc curr-move))
                (map (range (count new-board)) (fn [idx]
                                                 (map (d/get-element-by-id (str "button" idx))
                                                      (fn [node]
                                                        (d/inner-html node (either (get new-board idx)
                                                                                   ""))))))
                (map (d/get-element-by-id (str "position" (inc curr-move)))
                     (fn [node]
                       (d/set-style-attribute node "display" "block")))
                (GameState (inc curr-move) new-history winner)))
            game-state)))

(defn go-to-position [game-state curr-move]
  (either (map (get-in game-state [.history curr-move])
               (fn [board]
                 (let [winner (check-winner board)
                       next-player (either (and (= 0 (rem curr-move 2))
                                                (maybe "X"))
                                         "O")]
                   (map (d/get-element-by-id "status")
                        (fn [node]
                          (d/inner-html node (either (and (= "" winner)
                                                          (maybe (str "Next player: " next-player)))
                                                     (str "Winner: " winner)))))
                   (map (range (count board)) (fn [idx]
                                                (map (d/get-element-by-id (str "button" idx))
                                                     (fn [node]
                                                       (d/inner-html node (either (get board idx)
                                                                                  ""))))))
                   (-> game-state
                       (.winner winner)
                       (.curr-move curr-move)))))
          game-state))

;; possible actions from JavaScript

(defn move [x]
  (send game-state make-move x))

(JS-callable move 1)

(defn position [x]
  (send game-state go-to-position x))

(JS-callable position 1)

(def initialze-game
  (do
    (position 0)
    (reset-history 0)))

(main [_]
  '_)
