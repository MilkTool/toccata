
;; The core protocols of Toccata

(defprotocol Container
  (flat-map [mval f])
  (flatten [mval]
    (flat-map mval (fn [x] x)))
  (extract [wv])
  (extend [wv f])
  (duplicate [wv])
  (wrap [x v])
  (apply* [fv args])
  (map [v f])
  (send* [v f-and-args]))

(defprotocol Composition
  (zero [_])
  (comp* [mval mvals])
  (unit [_])
  (dist* [mval mvals]))

(defprotocol Collection
  (empty? [coll])
  (empty [coll])
  (count [coll])
  (conj [coll value])
  (reduce [coll result f]))

(defprotocol Function
  (invoke [_])
  (invoke [_ _])
  (invoke [_ _ _])
  (invoke [_ _ _ _])
  (invoke [_ _ _ _ _])
  (invoke [_ _ _ _ _ _])
  (invoke [_ _ _ _ _ _ _])
  (invoke [_ _ _ _ _ _ _ _])
  (invoke [_ _ _ _ _ _ _ _ _]))

(defprotocol Type
  (make-value [_])
  (make-value [_ _])
  (make-value [_ _ _])
  (make-value [_ _ _ _])
  (make-value [_ _ _ _ _])
  (make-value [_ _ _ _ _ _])
  (make-value [_ _ _ _ _ _ _])
  (make-value [_ _ _ _ _ _ _ _])
  (make-value [_ _ _ _ _ _ _ _ _])
  (instance? [type val]))

(defprotocol Getter
  (type-name [_]
    (number-str (get-type _)))
  (type-args [x]
    (get-type-args x)))

(defprotocol Eq
  (=* [x y]))

(defprotocol Ord
  (<* [x y])
  (range [end]))

(defprotocol Indexed
  (nth [coll n])
  (store [coll n v]))

(defprotocol Named
  (name [value]))

(defprotocol Hash
  (sha1 [_]))

(defprotocol Associative
  (assoc [m k v])
  (get [m k])
  (get [m k not-found])
  (keys [m])
  (vals [m])
  (dissoc [m k]))

(defprotocol Traversable
  (traverse [coll wrap f])
  (reverse [coll])
  (seq [coll])
  (vec [coll])
  (first [coll])
  (rest [coll])
  (last [coll])
  (butlast [coll])
  (filter [coll f])
  (to-str [coll]))

(defprotocol Stringable
  (string-list [value]))

(defprotocol HashMapNode
  (hash-seq [m s])
  (get* [m k v hash shift])
  (assoc* [m k v hash shift])
  (dissoc* [m k hash shift]))

(defprotocol Bitwise
  (bit-and [n n])
  (bit-or [n n])
  (bit-xor [n n])
  (bit-not [n]))


(defn number-str [n]
  (assert (instance? Integer n))
  (inline C String "return(integer_str(arg0));"))

(defn number= [x y]
  (inline C Maybe "return(integer_EQ(arg0, arg1));"))


(defn pr* [str]
  ;; Send a string to the current output stream
  (assert (instance? String str))
  (inline C Integer "return(pr_STAR(arg0));"))

(defn maybe [v]
  (inline C Maybe "
    return(maybe((List *)0, (Value *)0, arg0));"))
(def nothing (inline C Maybe "(Value *)&(Maybe){MaybeType, -1, 0}"))

(def empty-list
  (inline C List "(Value *)&(List){ListType,-1,0,0,0}"))

(def empty-vector
  (inline C Vector "(Value *)&(Vector){VectorType,-1,0,5,0,0}"))
