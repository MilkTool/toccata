
(deftype OneType [x])

(deftype AnotherType [y])

(def BothTypes (comp OneType
                     AnotherType))


(defn f [x]
  (assert (instance? Maybe x))
  (assert-result y (instance? BothTypes y))

  (either (and x (maybe (OneType 99)))
          (AnotherType 12)))

(defn g [x]
  (assert (instance? OneType x))

  (.x x))


(main [_]
      (println 'huh (g (f nothing))))
