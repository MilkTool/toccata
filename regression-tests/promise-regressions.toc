
(add-ns rt (module "regression-tester.toc"))

(defn test []
  (println "Checking promise regressions")
  (let [p (promise)]
    (rt/test (= nothing (delivered p))
             _FILE_ _LINE_)
    (deliver p (inc 9))
    (rt/test (= 10 (extract p))
             _FILE_ _LINE_)
    (rt/test (delivered p)
             _FILE_ _LINE_))
  (let [p (promise (inc 9))]
    (rt/test (= (maybe 10) (delivered p))
             _FILE_ _LINE_)
    (rt/test (delivered p)
             _FILE_ _LINE_))
  (let [p (promise)
        f1 (future (fn []
                     (let [x (extract p)]
                       (+ x 10))))
        f2 (future (fn []
                     (let [x (extract p)]
                       (+ x 20))))]
    (future (fn [] (deliver p (inc 0))))
    (rt/test (= 11 (extract f1))
             _FILE_ _LINE_)
    (rt/test (= 21 (extract f2))
             _FILE_ _LINE_))
  (let [p (future (fn []
                    (inc 9)))]
    (rt/test (= 10 (extract p))
             _FILE_ _LINE_)
    (rt/test (= 10 (extract p))
             _FILE_ _LINE_))
  (let [p1 (promise)
        p2 (map p1 inc)
        fut (future (fn []
                      (rt/test (= 4 (extract p2))
                               _FILE_ _LINE_)))]
    (deliver p1 3)
    (rt/test (= 3 (extract p1))
             _FILE_ _LINE_)
    (extract fut))
  (let [p1 (promise 2)
        p2 (map p1 inc)
        fut (future (fn []
                      (rt/test (= 3 (extract p2))
                               _FILE_ _LINE_)))]
    (rt/test (= 2 (extract p1))
             _FILE_ _LINE_)
    (extract fut))

  (let [double (fn [x]
                 (+ x x))]
    (let [p1 (promise)
          p2 (map (map p1 inc) double)
          p3 (map p1 (fn [x]
                       (double (inc x))))]
      (deliver p1 5)
      (rt/test (= (extract p2) (extract p3))
               _FILE_ _LINE_))

    (let [p1 (apply* (promise (fn [] 5)) empty-list)]
      (rt/test (= (extract p1) 5)
               _FILE_ _LINE_))

    (let [p1 (promise)
          p2 (map p1 inc)
          p3 (apply-to inc p1)]
      (deliver p1 5)
      (rt/test (= (extract p2) (extract p3))
               _FILE_ _LINE_))

    (let [p1 (promise)
          p2 (promise)
          p3 (apply* (promise +) [p1 p2])]
      (deliver p1 5)
      (deliver p2 10)
      (rt/test (= 15 (extract p3))
               _FILE_ _LINE_))

    (let [p1 (promise)
          p2 (promise)
          p3 (apply* (promise +) [p1 p2])]
      (deliver p2 10)
      (deliver p1 5)
      (rt/test (= 15 (extract p3))
               _FILE_ _LINE_))

    (let [p1 (promise)
          p2 (map p1 double)
          p4 (apply-to + p2 p1)]
      (deliver p1 5)
      (rt/test (= 15 (extract p4))
               _FILE_ _LINE_))

    (let [p1 (promise)
          p2 (promise)
          p3 (promise)
          p4 (apply-to vector p1 p2 p3)]
      (deliver p2 "two")
      (deliver p1 "one")
      (deliver p3 "three")
      (rt/test (= ["one" "two" "three"]
                  (extract p4))
               _FILE_ _LINE_)))

  (let [p1 (promise)
        p2 (promise)
        p3 (promise)
        p4 (comp p1 p2 p3)]
    (deliver p1 4)
    (deliver p2 8)
    (rt/test (= 4 (extract p4))
             _FILE_ _LINE_))

  (let [p1 (promise)
        p2 (promise)
        p3 (promise)
        p4 (comp p1 p2 p3)]
    (deliver p2 4)
    (deliver p1 8)
    (rt/test (= 4 (extract p4))
             _FILE_ _LINE_))

  (let [p1 (promise)
        p2 (promise)
        p3 (promise)
        p4 (comp p1 p2 p3)]
    (deliver p3 4)
    (deliver p2 8)
    (rt/test (= 4 (extract p4))
             _FILE_ _LINE_))

  (let [inc-val (inc 0)
        f (reify
            Function
            (invoke [_ x]
              (+ inc-val x 2)))]
    (let [p1 (promise)
          p2 (map p1 f)]
      (deliver p1 (inc 0))
      (rt/test (= 4 (extract p2))
               _FILE_ _LINE_))
    (let [p1 (promise)
          p2 (map p1 (reify
                       Function
                       (invoke [_ x]
                         (+ inc-val x))))]
      (deliver p1 (inc 0))
      (rt/test (= 2 (extract p2))
               _FILE_ _LINE_))
    (let [p1 (promise)
          p2 (flat-map p1 (reify
                            Function
                            (invoke [_ x]
                              (promise (+ inc-val x inc-val)))))]
      (deliver p1 (inc 0))
      (rt/test (= 3 (extract p2))
               _FILE_ _LINE_))
    (let [p1 (promise)
          p2 (map p1 (fn [& xs]
                       (let [[x] xs]
                         (+ x inc-val))))]
      (deliver p1 (inc 0))
      (rt/test (= 2 (extract p2))
               _FILE_ _LINE_)))

  ;; check the monad laws for Promise
  (let [f (fn [x]
            (promise (inc x)))
        double (fn [x]
                 (+ x x))
        g (fn [x]
            (promise (double x)))]
    (let [p1 (promise)
          p2 (flat-map p1 promise)]
      (deliver p1 7)
      (rt/test (= (extract p2) 7)
               _FILE_ _LINE_))
    (let [p1 (promise)
          p2 (flat-map p1 f)]
      (deliver p1 4)
      (rt/test (= (extract p2)
                  (extract (f 4)))
               _FILE_ _LINE_))
    (let [p1 (promise)
          p2 (flat-map p1 f)
          p3 (flat-map p2 g)
          p4 (flat-map p1 (fn [x] (flat-map (f x) g)))]
      (deliver p1 4)
      (rt/test (= 10 (extract p3) (extract p4))
               _FILE_ _LINE_)))
  ;; a special test
  (let [p1 (promise)
        p2 (promise)
        p3 (promise)
        p4 (flat-map p1 (fn [x]
                          (deliver p2 x)
                          p3))
        fut (future (fn []
                      (let [x (extract p4)]
                        (rt/test (= 99 x)
                                 _FILE_ _LINE_))))]
    (future (fn []
              (let [x (extract p2)]
                (deliver p3 x))))
    (deliver p1 99)
    (extract fut))
  (println "Promises are good"))
