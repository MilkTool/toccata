
(def magic "don't ask")

(defn test [v file line]
  (or v
      (maybe (let [_ (println "fail in!!" file line)]
               (abort)))))

(main [_]
      (println "Checking promise regressions")
      (let [p (promise)]
        (test (= nothing (delivered p))
              _FILE_ _LINE_)
        (deliver p (inc 9))
        (test (= 10 (extract p))
              _FILE_ _LINE_)
        (test (delivered p)
              _FILE_ _LINE_))
      (let [p (promise (inc 9))]
        (test (= (maybe 10) (delivered p))
              _FILE_ _LINE_)
        (test (delivered p)
              _FILE_ _LINE_))
      (let [p (promise)
            f1 (future (fn []
                         (let [x (extract p)]
                           (+ x 10))))
            f2 (future (fn []
                         (let [x (extract p)]
                           (+ x 20))))]
        (future (fn [] (deliver p (inc 0))))
        (test (= 11 (extract f1))
            _FILE_ _LINE_)
        (test (= 21 (extract f2))
              _FILE_ _LINE_))
      (let [p (future (fn []
                        (inc 9)))]
        (test (= 10 (extract p))
              _FILE_ _LINE_)
        (test (= 10 (extract p))
              _FILE_ _LINE_))
      (println "Promises are good"))
