
(add-ns rt (module "regression-tester.toc"))

(deftype BogusType [z]
  ;; blow it up
  )

(defprotocol BogusProtocol
  (bogus [x y]
    (str x)))

(deftype AnotherType [x z]
  Stringable
  (string-list [_] (list "<AnotherType " (str z) ">")))

(extend-type BogusType
  Stringable
  (string-list [x] (list "<BogusType " (str (.z x)) ">"))

  BogusProtocol
  (bogus [x y]
    (+ y 10)))

(def f1)

(defn f2 [x]
  (f1 x))

(def f1
  (reify
    Function
    (invoke [_ x]
      (+ x 10))))

(defn test []
  (println "Check deftypes regressions")
  (rt/test (= 15 (f2 5))
           _FILE_ _LINE_)

  (rt/test (= "<AnotherType 15>" (str (AnotherType 10 15)))
           _FILE_ _LINE_)

  (rt/test (= nothing (= (get-type [1]) (get-type (list 1 2))))
           _FILE_ _LINE_)
  (rt/test (= (get-type (list 1)) (get-type (list 2)))
           _FILE_ _LINE_)
  (rt/test (= nothing (= (get-type (list 1)) (get-type [1])))
           _FILE_ _LINE_)

  (let [one (inc 0)
        bt (BogusType one)
        [x] (type-args bt)]

    (rt/test (= "BogusType" (type-name bt))
             _FILE_ _LINE_)
    (rt/test (instance? BogusType bt)
             _FILE_ _LINE_)
    (rt/test (= 1 x)
             _FILE_ _LINE_)
    (rt/test (= 1 (.z bt))
             _FILE_ _LINE_)
    (rt/test (= (maybe 1) (get bt .z))
             _FILE_ _LINE_)
    (rt/test (= (maybe 2) (get (assoc bt .z 2) .z))
             _FILE_ _LINE_)
    (rt/test (= nothing (get bt .x))
             _FILE_ _LINE_)
    (rt/test (= bt (assoc bt .x 2))
             _FILE_ _LINE_)

    (rt/test (= (BogusType (inc 0)) bt)
             _FILE_ _LINE_)
    (rt/test (= (maybe (inc 4)) (get (assoc bt .z (inc 4)) .z))
             _FILE_ _LINE_))
  (rt/test (instance? Integer (inc 7))
           _FILE_ _LINE_)
  (println "Types are good"))

