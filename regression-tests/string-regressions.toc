
(def magic "don't ask")

(defn test [v file line]
  (or v
      (maybe (let [_ (println "fail in!!" file line)]
               (abort)))))

(def sample-str (str "Str" "ing"))

(main [_]
      (println "Checking string regressions")
      (test (instance? String (char 66))
            _FILE_ _LINE_)
      (test (= nothing (instance? Maybe (char 66)))
           _FILE_ _LINE_)
      (test (instance? String (subs "bogus" (inc 1)))
            _FILE_ _LINE_)
      (test (= (list "string") (string-list "string"))
            _FILE_ _LINE_)
      (test (= (list "tring") (string-list (subs "string" (inc 0))))
            _FILE_ _LINE_)
      (test (= "tring" (escape-chars (subs "string" (inc 0))))
            _FILE_ _LINE_)
      (test (= "String" (type-name "string"))
            _FILE_ _LINE_)
      (test (= "str" "str")
            _FILE_ _LINE_)
      (test (= sample-str sample-str)
            _FILE_ _LINE_)
      (test (= "string" (escape-chars "string"))
            _FILE_ _LINE_)
      (test (= "String" (type-name (subs "string" (inc 0))))
            _FILE_ _LINE_)
      (test (= (list "string") (type-args "string"))
            _FILE_ _LINE_)
      (test (= (list "tring") (type-args (subs "string" (inc 0))))
            _FILE_ _LINE_)
      (test (= (char-code "B") 66)
            _FILE_ _LINE_)
      (test (= (subs sample-str (inc 0)) "tring")
            _FILE_ _LINE_)
      (test (= "ring " (subs (subs (str sample-str " ") (inc 0)) (inc 0)))
            _FILE_ _LINE_)
      (test (= "tr" (subs sample-str (inc 0) (inc 1)))
            _FILE_ _LINE_)
      (test (= "ri" (subs (subs sample-str (inc 0)) (inc 0) (inc 1)))
            _FILE_ _LINE_)
      (test (= nothing (= (subs (str sample-str " ") (inc 3) (inc 6)) "tring"))
            _FILE_ _LINE_)
      (test (= nothing (= (subs (subs (str sample-str " ") 1) (inc 3) (inc 6)) "tring"))
            _FILE_ _LINE_)
      (test (= nothing (= (subs (str sample-str " ") 2) (subs (str sample-str " ") 1)))
            _FILE_ _LINE_)
      (test (= (char-code (subs "Bro" (inc -1) (inc 0))) 66)
            _FILE_ _LINE_)
      (test (= "" (subs (str sample-str " ") (inc 2) (inc -5)))
            _FILE_ _LINE_)
      (test (= (count (subs "Bro" (inc -1) (inc 0))) (inc 0))
            _FILE_ _LINE_)
      (test (= "abcd" (comp "a" "" "bc" "d"))
            _FILE_ _LINE_)
      (test (= (comp* (str "b" "o") (list "gus")) (comp* "bo" (list "gu" "s")))
            _FILE_ _LINE_)
      (test (= (subs "bogus" (inc 1)) (comp* "g" (list "u" "s")))
            _FILE_ _LINE_)
      (test (= (subs "bogus" (inc 1)) (subs "bogus" (inc 1)))
            _FILE_ _LINE_)
      (test (= "B" (char 66))
            _FILE_ _LINE_)
      (test (= (char 66) (str "B" ""))
            _FILE_ _LINE_)
      (test (= "" (empty "xy"))
            _FILE_ _LINE_)
      (test (= "" (empty (subs "abc" (inc 0))))
            _FILE_ _LINE_)
      (test (= nothing (empty? "abc"))
            _FILE_ _LINE_)
      (test (= nothing (empty? (subs "abc" (inc 0))))
            _FILE_ _LINE_)
      (test (= nothing (first ""))
            _FILE_ _LINE_)
      (test (= (maybe "a") (first "abc"))
            _FILE_ _LINE_)
      (test (= nothing (last ""))
            _FILE_ _LINE_)
      (test (= (maybe "c") (last "abc"))
            _FILE_ _LINE_)
      (test (= "" (butlast ""))
            _FILE_ _LINE_)
      (test (= "ab" (butlast "abc"))
            _FILE_ _LINE_)
      (test (= "" (rest ""))
            _FILE_ _LINE_)
      (test (= "" (rest (subs "aa" 1)))
            _FILE_ _LINE_)
      (test (= "bc" (rest "abc"))
            _FILE_ _LINE_)
      (let [s "string"]
        (sha1 s)
        (sha1 s))
      (let [s (subs (subs sample-str (inc 0)) (inc 0) (inc 1))]
        (sha1 s)
        (sha1 s))
      (test (= (inc -1) (count ""))
            _FILE_ _LINE_)
      (test (= (inc 1) (count "ab"))
            _FILE_ _LINE_)
      (test (= (inc -1) (count (subs "a" (inc 0))))
            _FILE_ _LINE_)
      (test (= (inc 1) (count (subs "abc" (inc 0))))
            _FILE_ _LINE_)
      (test (= empty-list (seq (str "" "")))
            _FILE_ _LINE_)
      (test (= (list "x" "y" "z") (seq (str "xy" "z")))
            _FILE_ _LINE_)
      (test (= (list "y" "z") (seq (subs (str "xy" "z") 1)))
            _FILE_ _LINE_)
      (test (= empty-vector (vec (str "" "")))
            _FILE_ _LINE_)
      (test (= ["x" "y" "z"] (vec (str "xy" "z")))
            _FILE_ _LINE_)
      (test (= (vector "y" "z") (vec (subs (str "xy" "z") 1)))
            _FILE_ _LINE_)
      (test (= "" (empty (subs "abc" (inc 0))))
            _FILE_ _LINE_)
      (test (= (list "z" "y" "x") (reduce "xyz" empty-list conj))
            _FILE_ _LINE_)
      (test (= (maybe "c") (nth "abc" 2))
            _FILE_ _LINE_)
      (test (= nothing (= "b" (nth "abc" 4)))
            _FILE_ _LINE_)
      (let [abc (str "abc" "")
            abcd (str "abcd" "")
            xyz (subs "wxyz" 1)
            wxyz (subs "vwxyz" 1)]
        (test (< abc abcd)
              _FILE_ _LINE_)
        (test (< abc xyz)
              _FILE_ _LINE_)
        (test (< wxyz xyz)
              _FILE_ _LINE_)
        (test (= nothing (< xyz abc))
              _FILE_ _LINE_))
      (println "Strings are good"))
