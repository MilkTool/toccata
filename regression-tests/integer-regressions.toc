
(def magic "don't ask")

(defn test [v file line]
  (or v
      (maybe (let [_ (println "fail in!!" file line)]
               (abort)))))

(main [_]
      (test (= (inc 2) (+ (inc 0) (inc 0) (inc 0)))
            _FILE_ _LINE_)
      (test (= (inc 2) (inc 2))
            _FILE_ _LINE_)
      (test (= "Integer" (type-name (+ 2 1)))
            _FILE_ _LINE_)
      (test (= (list 3) (type-args (+ 2 1)))
            _FILE_ _LINE_)
      (test (instance? Integer (+ 2 1))
            _FILE_ _LINE_)
      (test (= (list "3") (string-list (+ 2 1)))
            _FILE_ _LINE_)
      (test (= nothing (= (inc 2) (list (inc 0))))
            _FILE_ _LINE_)
      (test (= nothing (= (inc 2) (inc 3)))
            _FILE_ _LINE_)
      (test (= 3 (+ 1 (+ 1 1)))
            _FILE_ _LINE_)
      (test (= (+ (+ (inc 0) (inc 0)) (inc 0)) (inc 2))
            _FILE_ _LINE_)
      (test (= (+ (inc 0) (inc 0) (inc 0)) (inc 2))
            _FILE_ _LINE_)
      (test (= -1 (- (- (inc 0) (inc 0)) (inc 0)))
            _FILE_ _LINE_)
      (test (= (- (- (inc 0) (inc 0)) (inc 0)) -1)
            _FILE_ _LINE_)
      (test (= -1 (- (inc 0) (inc 0) (inc 0)))
            _FILE_ _LINE_)
      (test (= (* (inc 1) (* (inc 1) (inc 1))) 8)
            _FILE_ _LINE_)
      (test (= 8 (* (inc 1) (* (inc 1) (inc 1))))
            _FILE_ _LINE_)
      (test (= 8 (* (inc 1) (inc 1) (inc 1)))
            _FILE_ _LINE_)
      (test (= (rem 8 (* 2 2)) 0)
            _FILE_ _LINE_)
      (test (= 1 (rem (* 3 3) 2))
            _FILE_ _LINE_)
      (let [x (inc 49)]
        (sha1 x)
        (sha1 x))
      (test (= (maybe 1) (< (inc 0) (inc 1) (inc 2)))
            _FILE_ _LINE_)
      (test (= nothing (<* (inc 1) (inc 0)))
            _FILE_ _LINE_)
      (test (= 255 (bit-and (dec 512) (inc 254)))
            _FILE_ _LINE_)
      (test (= 511 (bit-or (dec 512) (inc 254)))
            _FILE_ _LINE_)
      (println "Integers are good"))
