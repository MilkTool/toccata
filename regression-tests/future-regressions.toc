
(add-ns rt (module "regression-tester.toc"))

(deftype Thunk [f x]
  Function
  (invoke [v]
    (f)))

(defn test []
  (println "Checking future regressions")

  (let [p (future (fn []
                    (inc 9)))]
    (rt/test (= 10 (extract p))
             _FILE_ _LINE_)
    (rt/test (= 10 (extract p))
             _FILE_ _LINE_))

  (let [f1 (future (fn [] 3))
        _ (map (range 800) inc)
        f2 (map f1 inc)
        fut (future (fn []
                      (rt/test (= 4 (extract f2))
                               _FILE_ _LINE_)))]
    (rt/test (= 3 (extract f1))
             _FILE_ _LINE_)
    (extract fut))

  (let [p (promise)]
    (extract (future (Thunk (fn [] (deliver p (inc 0))) (inc 9)))))

  (let [f1 (future (fn []
                     (map (range 800) inc)
                     2))
        f2 (map f1 inc)
        fut (future (fn []
                      (rt/test (= 3 (extract f2))
                               _FILE_ _LINE_)))]
    (rt/test (= 2 (extract f1))
             _FILE_ _LINE_)
    (extract fut))

  (let [double (fn [x]
                 (+ x x))]
    (let [f1 (future (fn []
                       (map (range 800) inc)
                       3))
          f2 (map (map f1 inc) double)
          f3 (map f1 (fn [x]
                       (double (inc x))))]
      (rt/test (= (extract f2) (extract f3))
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       5))
          p2 (map p1 inc)
          p3 (apply-to inc p1)]
      (rt/test (= (extract p2) (extract p3))
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       5))
          p2 (future (fn []
                       (map (range 200) inc)
                       10))
          p3 (apply (future (fn [] +)) [p1 p2])]
      (rt/test (= 15 (extract p3))
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       5))
          p2 (map p1 double)
          p4 (apply-to + p2 p1)]
      (rt/test (= 15 (extract p4))
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       "one"))
          p2 (future (fn []
                       (map (range 800) inc)
                       "two"))
          p3 (future (fn []
                       (map (range 800) inc)
                       "three"))
          p4 (apply-to vector p1 p2 p3)]
      (rt/test (= ["one" "two" "three"]
                  (extract p4))
               _FILE_ _LINE_)))

  (let [f (fn [x]
            (future (fn [] (inc x))))
        double (fn [x]
                 (+ x x))
        g (fn [x]
            (future (fn [] (double x))))]
    (let [p1 (future (fn []
                       (map (range 800) inc)
                       7))
          p2 (flat-map p1 (fn [x] (future (fn [] x))))]
      (rt/test (= (extract p2) 7)
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       4))
          p2 (flat-map p1 f)]
      (rt/test (= (extract p2)
                  (extract (f 4)))
               _FILE_ _LINE_))

    (let [p1 (future (fn []
                       (map (range 800) inc)
                       4))
          p2 (flat-map p1 f)
          p3 (flat-map p2 g)
          p4 (flat-map p1 (fn [x] (flat-map (f x) g)))]
      (rt/test (= 10 (extract p3) (extract p4))
               _FILE_ _LINE_)))

  (rt/test (= 93 (extract (future (reify
                                    Function
                                    (invoke [_]
                                      (inc 92))))))
           _FILE_ _LINE_)

  (rt/test (= 93 (extract (future (reify
                                    Function
                                    (invoke [_]
                                      (inc 92))))))
           _FILE_ _LINE_)

  (rt/test (= 93 (extract (future (fn [& _]
                                    (inc 92)))))
           _FILE_ _LINE_)

  (println "Futures are good"))
