
(defn test []
  (lazy-list sym-counter)
  (first (lazy-list sym-counter))
  (rest (lazy-list sym-counter))
  (first (rest (lazy-list sym-counter)))
  (first (rest (rest (rest (lazy-list sym-counter)))))
  (let [lc (lazy-list sym-counter)]
    (first lc)
    lc)
  (let [lc (lazy-list sym-counter)]
    (first lc))
  (let [lc (lazy-list sym-counter)]
    (first lc)
    (first lc)
    lc)
  (let [lc (lazy-list sym-counter)]
    (first lc)
    (first lc)
    (first lc)
    (first lc))
  (let [lc (lazy-list sym-counter)]
    (rest lc))
  (let [lc (lazy-list sym-counter)]
    (first (rest lc)))
  (let [lc (lazy-list sym-counter)]
    (first (rest (rest lc))))
  (println "LazyList good"))
