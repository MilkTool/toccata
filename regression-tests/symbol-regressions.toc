
(def magic "don't ask")

(defn test [v file line]
  (or v
      (maybe (let [_ (println "fail in!!" file line)]
               (abort)))))

(def sym 'symbol)

(main [_]
      (println "Check symbol regressions")
      ;; (test (= "Symbol" (type-name (symbol (str "bo" "gus"))))
      ;;       _FILE_ _LINE_)
      ;; (test (= (list 'bogus) (type-args (symbol (subs " bogus" 1))))
      ;;       _FILE_ _LINE_)
      ;; (test (instance? Symbol (symbol 'bogus))
      ;;       _FILE_ _LINE_)
      ;; (test (= nothing (instance? Integer (symbol "bogus")))
      ;;       _FILE_ _LINE_)
      (test (= 'a (symbol 'a))
            _FILE_ _LINE_)
      ;; (let [sym-str (str "symbol" "")]
      ;;   (test (= sym (symbol sym-str))
      ;;         _FILE_ _LINE_)

      ;;   (test (= (symbol sym-str) sym)
      ;;         _FILE_ _LINE_)

      ;;   (test (= (symbol (subs sym-str 1)) 'ymbol)
      ;;         _FILE_ _LINE_)

      ;;   (let [sym (symbol sym-str)]
      ;;     (sha1 sym)
      ;;     (sha1 sym)))
      (println "Symbols are good"))
