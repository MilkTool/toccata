
(add-ns rt (module "regression-tester.toc"))

(deftype ControlledHash [y eq]
  Stringable
  (string-list [_] (string-list y))

  Eq
  (=* [_ v]
    (and eq
         (= y (.y v))
         (maybe _)))

  Hashable
  (sha1 [_] y))

(defn bar [x]
  (assert (instance? ArrayNode x))
  (dissoc x '_))

(defn foo [x]
  (assert (instance? HashMap x))
  (assert-result y (instance? HashMap y))
  (bar x))

(defn test []
  (println "Checking hash-map regressions")
  (rt/test (= {} {})
           _FILE_ _LINE_)
  (rt/test (empty? {})
           _FILE_ _LINE_)

  (let [one-hash-map {(inc 0) (symbol "a")}]
    (rt/test (= nothing (empty? one-hash-map))
             _FILE_ _LINE_)
    (rt/test (= 1 (count one-hash-map))
             _FILE_ _LINE_)
    (rt/test (= 1 (count (assoc one-hash-map (inc 0) (symbol "b"))))
             _FILE_ _LINE_)
    (rt/test (= 2 (count (assoc one-hash-map (inc 1) (symbol "b"))))
             _FILE_ _LINE_))

  (let [one-hash-map {(ControlledHash (inc -1) (maybe (inc -1))) (symbol "a")}
        full-bmi (reduce (range 16) {} (fn [m n]
                                         (assoc m (ControlledHash n (maybe n)) (inc n))))
        array-node (assoc full-bmi (ControlledHash (inc 20) (maybe (inc 20))) (symbol "c"))
        collided (assoc-all {}
                            (ControlledHash (inc -1) nothing) (inc 0)
                            (ControlledHash (inc -1) (maybe (inc -1))) (symbol "a")
                            (ControlledHash (inc -1) nothing) (inc 0))]
    (rt/test (= nothing (empty? one-hash-map))
             _FILE_ _LINE_)
    (rt/test (= 1 (count one-hash-map))
             _FILE_ _LINE_)
    (rt/test (= 2 (count (hash-seq one-hash-map (list ""))))
             _FILE_ _LINE_)
    (rt/test (= (maybe (symbol "a")) (get one-hash-map (ControlledHash (inc -1) (maybe (inc -1)))))
             _FILE_ _LINE_)
    (rt/test (= 100 (get* full-bmi (ControlledHash 2 nothing) (inc 99)
                          (sha1 (ControlledHash 2 (maybe 1))) (inc -1)))
             _FILE_ _LINE_)
    (rt/test (= 1 (get* one-hash-map (inc 9) (inc 0) (sha1 (inc 9)) (inc -1)))
             _FILE_ _LINE_)
    (rt/test (= (symbol "a") (get* one-hash-map (ControlledHash (inc -1) (maybe (inc -1)))
                                   (inc 0) (sha1 (ControlledHash (inc -1) (maybe (inc -1))))
                                   (inc -1)))
             _FILE_ _LINE_)
    (rt/test (= (range 16)
                (let [ints-map (reduce (range 16) {} (fn [m n] (assoc m n n)))]
                  (map (range 16) (fn [n]
                                    (-> n
                                        (= (get* ints-map n (inc 0) (sha1 n) (inc -1)))
                                        (rt/test _FILE_ _LINE_)
                                        extract)))))
             _FILE_ _LINE_)
    (rt/test (= 1 (count (dissoc* one-hash-map (inc 0) (sha1 1) (inc -1))))
             _FILE_ _LINE_)
    (rt/test (= 0 (count (dissoc* one-hash-map (ControlledHash (inc -1) (maybe (inc -1)))
                                  (sha1 (ControlledHash (inc -1) (maybe (inc -1)))) (inc -1))))
             _FILE_ _LINE_)
    (rt/test (= 15 (count (dissoc* full-bmi (ControlledHash 5 (maybe 5))
                                   (sha1 (ControlledHash 5 (maybe 5))) 0)))
             _FILE_ _LINE_)
    (rt/test (= 1 (get* array-node (inc 3) (inc 0) (sha1 (inc 3)) (inc -1)))
             _FILE_ _LINE_)
    (rt/test (= 2 (count (assoc {(ControlledHash (inc -1) nothing) (symbol "a")}
                           (ControlledHash (inc -1) nothing) (symbol "a"))))
             _FILE_ _LINE_)
    (rt/test (= 1 (count (assoc one-hash-map (ControlledHash (inc -1) (maybe (inc -1)))
                                (symbol "b"))))
             _FILE_ _LINE_)
    (rt/test (= 2 (count (assoc one-hash-map (ControlledHash (inc 0) (maybe (inc 0)))
                                (symbol "b"))))
             _FILE_ _LINE_)
    (rt/test (= 17 (count (hash-seq full-bmi (list ""))))
             _FILE_ _LINE_)
    (rt/test (= 27 (count (reduce (range 27) {}
                                  (fn [m n] (assoc m (- n 1) (inc n))))))
             _FILE_ _LINE_)
    (rt/test (= 28 (count (hash-seq (reduce (range 27) {}
                                            (fn [m n] (assoc m (- n 1) (inc n))))
                                    (list ""))))
             _FILE_ _LINE_)
    (rt/test (= 2001 (count (hash-seq (reduce (range 2000) {}
                                              (fn [m n] (assoc m (ControlledHash n (maybe n)) (inc n))))
                                      (list ""))))
             _FILE_ _LINE_)
    (rt/test (= 16 (count (assoc full-bmi (ControlledHash (inc 0) (maybe (inc 0))) (symbol "b"))))
             _FILE_ _LINE_)
    (rt/test (= 17 (count (assoc full-bmi (ControlledHash (inc 98) (maybe (inc 98))) (symbol "b"))))
             _FILE_ _LINE_)
    (rt/test (= 17 (count array-node))
             _FILE_ _LINE_)
    (rt/test (= 18 (count (assoc array-node (symbol "a") (inc 0))))
             _FILE_ _LINE_)
    (rt/test (= 18 (count (assoc-all full-bmi
                                     (symbol "b") (inc 0)
                                     (symbol "d") (inc 1))))
             _FILE_ _LINE_)
    (rt/test (= 2 (count collided))
             _FILE_ _LINE_)
    (rt/test (= 3 (count (hash-seq collided (list ""))))
             _FILE_ _LINE_)
    (rt/test (= 1 (count (dissoc collided (ControlledHash (inc -1) (maybe (inc -1))))))
             _FILE_ _LINE_)
    (rt/test (= 100 (get* collided (ControlledHash 256 nothing) (inc 99)
                          (sha1 (ControlledHash 256 nothing)) (inc -1)))
             _FILE_ _LINE_)
    (rt/test (= (symbol "a") (get* collided (ControlledHash (inc -1) (maybe (inc -1))) (inc 99)
                                   (sha1 (ControlledHash (inc -1) (maybe (inc -1)))) (inc -1)))
             _FILE_ _LINE_)
    (rt/test (instance? HashMap one-hash-map)
             _FILE_ _LINE_)
    (rt/test (instance? HashMap array-node)
             _FILE_ _LINE_)
    (rt/test (= array-node (dissoc array-node (ControlledHash (inc 17) (maybe (inc 2)))))
             _FILE_ _LINE_))
  (rt/test (= 3 (count (reduce (range 3) {}
                               (fn [m n]
                                 (assoc m (ControlledHash (inc -1) nothing) (inc n))))))
           _FILE_ _LINE_)
  (rt/test (= 3 (count (assoc-all {}
                                  (symbol "a") (inc 0)
                                  (symbol "b") (inc 1)
                                  (symbol "c") (inc 2))))
           _FILE_ _LINE_)
  (rt/test (= 0 (count (reduce (range 16) (reduce (range 16) {} (fn [m n] (assoc m n n)))
                               (fn [m n]
                                 (dissoc* m n (sha1 n) (inc -1))))))
           _FILE_ _LINE_)
  (let [size 25
        ints-map (reduce (range size) {} (fn [m n] (assoc m n n)))]
    (rt/test (empty? (reduce (range size) ints-map
                             (fn [m n]
                               (dissoc* m n (sha1 n) (inc -1)))))
             _FILE_ _LINE_)

    (rt/test (= ints-map (foo ints-map))
             _FILE_ _LINE_))

  (let [bmi {(ControlledHash 3 (maybe 3)) 4, (ControlledHash 35 (maybe 3)) 99}]
    (rt/test (= bmi (dissoc bmi (ControlledHash 3 nothing)))
             _FILE_ _LINE_)
    (rt/test (empty? (dissoc bmi (ControlledHash 3 (maybe 3))
                             (ControlledHash 35 (maybe 3))))
             _FILE_ _LINE_))

  (let [collided (assoc-all {}
                            (ControlledHash (inc 0) nothing) (inc 2)
                            (ControlledHash (inc 0) (maybe (inc -1))) (inc 1)
                            (ControlledHash (inc 0) nothing) (inc 9))]
    (dissoc collided (ControlledHash (inc 0) (maybe (inc -1))))) 

  (let [collided (assoc-all {}
                            (ControlledHash (inc 0) (maybe (inc -1))) (inc 1)
                            (ControlledHash (inc 0) nothing) (inc 2)
                            (ControlledHash (inc 0) nothing) (inc 9))]
    (dissoc collided (ControlledHash (inc 0) (maybe (inc -1))))) 

  (let [collided (assoc-all {}
                            (ControlledHash (inc 0) (maybe (inc -1))) (inc 1)
                            (ControlledHash (inc 0) (maybe (inc 0))) (inc 2)
                            (ControlledHash (inc 0) nothing) (inc 9))]
    (-> collided
        (dissoc (ControlledHash (inc 0) (maybe (inc -1))))
        (dissoc (ControlledHash (inc 0) (maybe (inc 0)))))) 

  (let [collided (assoc-all {}
                            (ControlledHash (inc 0) (maybe (inc -1))) (inc 1)
                            (ControlledHash (inc 0) nothing) (inc 2)
                            (ControlledHash (inc 0) nothing) (inc 2)
                            (ControlledHash (inc 0) nothing) (inc 9))]
    (-> collided
        (dissoc (ControlledHash (inc 0) (maybe (inc -1))))
        (dissoc (ControlledHash (inc 0) (maybe (inc -1))))
        (dissoc (ControlledHash (inc 0) (maybe (inc 0)))))) 

  (let [collided (assoc-all {}
                            (ControlledHash (inc 0) (maybe (inc -1))) (inc 1)
                            (ControlledHash (inc 0) nothing) (inc 2)
                            (ControlledHash (inc 256) nothing) (inc 9))]
    (dissoc collided (ControlledHash (inc 0) (maybe (inc -1)))))

  (println "hash-maps are good"))

